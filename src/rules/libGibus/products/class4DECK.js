    export { setNEWobject as calcPedanaInput };
    export { PEDANA as pedanaClass };
 /*
LOG modifiche:

v.0.25XXxx: prima release ufficiale

*/


class PEDANA {
  constructor(inOBJ) {
      this.release                            = 'v.0.25XXxx';

      this.profili                            = [];
      this.altro                              = [];
      this.BOM                                = [];
      this.lista_coverZones                   = [];
      this.lista_piastrelle                   = [];
      this.lista_doghe                        = [];
      this.lista_magatelli                    = [];
      this.lista_glass                        = [];
      this.lista_pannelli_vetro               = [];

      this.lista_giunti                       = [];
      this.lista_staffe_antisollevamento      = [];

      this.lista_surface3D                    = [];  


      this.lista_linkPerCover                 = [];
      this.lista_angoliCover                  = []; 
      this.lista_stripLED                     = [];
      this.POWER_LINE_LIST                    = [];
      this.COMPONENTS_FLAG                    = []; 
      this.ElementiPerMartinetti              = this.cloneMyObj(this.caricaElementiPerMartinetti());
      this.codificaElementiMartinetti         = [];
      
     
      this.cost                               = this.cloneMyObj(this.defCost());
      
      this.smOBJ                              = this.cloneMyObj(inOBJ);                    
      this.PEDANA_COMPONENTS_FLAG             = this.CaricaCOMPONENTFLAGS_PEDANA();

      this.offset                             = this.sistemaOffset(); 
      this.lista_POST                         = this.caricaGambe();
      this.lista_luci                         = this.cloneMyObj(this.CalcolaLuci());
      this.costanti                           = this.cloneMyObj(this.CaricaCostanti());

      this.lista_vaschette                    = [];
      this.caricaVetrate();

      this.lista_nodi                         = this.GeneraNodi();
      this.lista_linkTraNodi                  = this.creaLinkTraNodi();
      
      this.zavorramento                       = {};
      this.lista_martinetti                   = [];
  
      
      this.lista_piastre_compensazione        = [];
      this.lista_piastra_profilizavorre       = [];

     



      // variabili per grafica
      this.grafica                    = this.init_grafica();




      



      this.BALLAST_TABLE = [
          [0, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900], 
          [200, 101, 102, 102, 103, 104, 104, 105, 105, 105, 106, 106, 107, 107, 107, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 104, 104, 104, 104, 104, 104, 105, 105, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88], 
          [210, 102, 101, 100, 100, 99, 98, 99, 99, 99, 100, 100, 101, 101, 101, 101, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 99, 99, 99, 99, 99, 99, 100, 100, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83], 
          [220, 102, 100, 98, 96, 94, 93, 93, 93, 94, 94, 94, 94, 95, 95, 95, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 94, 94, 94, 94, 94, 94, 94, 95, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77], 
          [230, 103, 100, 96, 93, 91, 90, 90, 90, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 89, 89, 89, 89, 89, 89, 89, 89, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72], 
          [240, 104, 99, 94, 91, 88, 87, 87, 87, 87, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 85, 85, 85, 86, 84, 84, 84, 84, 84, 84, 84, 84, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66], 
          [250, 104, 98, 93, 90, 87, 84, 84, 84, 84, 83, 83, 83, 83, 83, 83, 83, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 79, 79, 79, 79, 79, 79, 79, 79, 79, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61], 
          [260, 105, 99, 93, 90, 87, 84, 82, 82, 82, 82, 82, 82, 81, 81, 81, 81, 81, 81, 81, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 79, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60], 
          [270, 105, 99, 93, 90, 87, 84, 82, 81, 80, 80, 80, 80, 80, 80, 80, 80, 80, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59], 
          [280, 105, 99, 94, 89, 87, 84, 82, 80, 79, 79, 79, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59], 
          [290, 106, 100, 94, 89, 86, 83, 82, 80, 79, 77, 77, 77, 77, 77, 77, 77, 77, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 74, 74, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [300, 106, 100, 94, 89, 86, 83, 82, 80, 79, 77, 76, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [310, 107, 101, 94, 89, 86, 83, 82, 80, 79, 77, 75, 75, 75, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 73, 73, 73, 73, 73, 73, 73, 73, 72, 72, 72, 72, 72, 72, 72, 72, 72, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [320, 107, 101, 95, 89, 86, 83, 81, 80, 78, 77, 75, 75, 74, 74, 74, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [330, 107, 101, 95, 90, 86, 83, 81, 80, 78, 77, 75, 74, 74, 73, 73, 73, 73, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [340, 108, 101, 95, 90, 86, 83, 81, 80, 78, 77, 75, 74, 74, 73, 72, 72, 72, 72, 72, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [350, 108, 102, 96, 90, 86, 83, 81, 80, 78, 77, 75, 74, 73, 73, 72, 71, 71, 71, 71, 71, 71, 71, 71, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [360, 108, 102, 96, 90, 86, 82, 81, 80, 78, 77, 75, 74, 73, 73, 72, 71, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [370, 108, 102, 96, 90, 86, 82, 81, 79, 78, 76, 75, 74, 73, 72, 72, 71, 70, 70, 70, 70, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [380, 109, 102, 96, 90, 86, 82, 81, 79, 78, 76, 75, 74, 73, 72, 72, 71, 70, 70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [390, 109, 103, 97, 90, 86, 82, 81, 79, 78, 76, 75, 74, 73, 72, 71, 71, 70, 70, 69, 69, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [400, 109, 103, 97, 91, 86, 82, 80, 79, 78, 76, 75, 74, 73, 72, 71, 71, 70, 70, 69, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [410, 109, 103, 97, 91, 86, 82, 80, 79, 78, 76, 75, 74, 73, 72, 71, 71, 70, 69, 69, 68, 68, 68, 68, 68, 68, 68, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [420, 109, 103, 97, 91, 86, 82, 80, 79, 77, 76, 75, 74, 73, 72, 71, 71, 70, 69, 69, 68, 68, 68, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], 
          [430, 109, 103, 97, 91, 86, 82, 80, 79, 77, 76, 75, 74, 73, 72, 71, 70, 70, 69, 69, 68, 68, 68, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [440, 110, 103, 97, 91, 86, 82, 80, 79, 77, 76, 75, 74, 73, 72, 71, 70, 70, 69, 69, 68, 68, 68, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [450, 110, 104, 97, 91, 86, 82, 80, 79, 77, 76, 75, 74, 73, 72, 71, 70, 70, 69, 69, 68, 68, 68, 67, 67, 67, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [460, 110, 104, 98, 91, 86, 81, 80, 79, 77, 76, 74, 74, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [470, 110, 104, 98, 92, 86, 81, 80, 79, 77, 76, 74, 74, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [480, 110, 104, 98, 92, 86, 81, 80, 79, 77, 76, 74, 74, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [490, 110, 104, 98, 92, 86, 81, 80, 79, 77, 76, 74, 74, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [500, 110, 104, 98, 92, 86, 81, 80, 78, 77, 76, 74, 74, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [510, 110, 104, 97, 91, 86, 81, 80, 78, 77, 76, 74, 74, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [520, 109, 103, 97, 91, 86, 81, 80, 78, 77, 76, 74, 74, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [530, 109, 103, 97, 91, 86, 81, 80, 78, 77, 76, 74, 73, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [540, 109, 103, 97, 91, 86, 81, 80, 78, 77, 76, 74, 73, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [550, 109, 103, 97, 91, 86, 81, 80, 78, 77, 76, 74, 73, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [560, 109, 103, 97, 91, 86, 81, 80, 78, 77, 76, 74, 73, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [570, 110, 103, 97, 91, 86, 81, 80, 78, 77, 76, 74, 73, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [580, 110, 104, 97, 91, 85, 80, 79, 78, 77, 75, 74, 73, 72, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 66, 66, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [590, 110, 104, 98, 91, 85, 80, 79, 78, 76, 75, 74, 73, 72, 71, 71, 70, 69, 69, 68, 68, 67, 67, 67, 67, 66, 66, 58, 58, 58, 58, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [600, 110, 104, 98, 92, 85, 80, 78, 77, 76, 75, 73, 73, 72, 71, 70, 70, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 58, 58, 58, 59, 59, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [610, 110, 104, 98, 92, 86, 79, 78, 77, 76, 74, 73, 72, 72, 71, 70, 69, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [620, 104, 99, 94, 89, 84, 79, 78, 77, 76, 74, 73, 72, 72, 71, 70, 69, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [630, 104, 99, 94, 89, 84, 79, 78, 77, 76, 74, 73, 72, 72, 71, 70, 69, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [640, 104, 99, 94, 89, 84, 79, 78, 77, 76, 74, 73, 72, 72, 71, 70, 69, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [650, 104, 99, 94, 89, 84, 79, 78, 77, 76, 74, 73, 72, 72, 71, 70, 69, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [660, 104, 99, 94, 89, 84, 79, 78, 77, 76, 74, 73, 72, 72, 71, 70, 69, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [670, 104, 99, 94, 89, 84, 79, 78, 77, 76, 74, 73, 72, 72, 71, 70, 69, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [680, 105, 100, 94, 89, 84, 79, 78, 77, 76, 74, 73, 72, 72, 71, 70, 69, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [690, 105, 100, 95, 89, 84, 79, 78, 77, 76, 74, 73, 72, 72, 71, 70, 69, 69, 69, 68, 68, 67, 67, 67, 66, 66, 66, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [700, 87, 82, 76, 71, 66, 60, 60, 59, 58, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [710, 87, 82, 77, 71, 66, 60, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [720, 88, 82, 77, 71, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [730, 88, 82, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [740, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [750, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [760, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [770, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [780, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [790, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [800, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [810, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [820, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [830, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [840, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [850, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [860, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [870, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [880, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [890, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58], 
          [900, 88, 83, 77, 72, 66, 61, 60, 59, 59, 58, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58]
      ];
      
      
      this.BALLAST_TABLE_ADD = [
          [0, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900], 
          [200, 14, 16, 19, 21, 24, 27, 28, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 42, 43, 44, 44, 45, 45, 46, 46, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 48, 48, 48, 49, 49, 49, 49, 50, 44, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46], 
          [210, 16, 18, 21, 23, 25, 28, 29, 31, 32, 34, 35, 36, 38, 39, 40, 41, 41, 42, 43, 43, 44, 45, 45, 46, 46, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 48, 48, 49, 49, 49, 49, 50, 50, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46], 
          [220, 19, 21, 23, 25, 27, 28, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 42, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 48, 49, 49, 49, 49, 50, 50, 50, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46], 
          [230, 21, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 39, 40, 41, 41, 42, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 49, 49, 49, 49, 50, 50, 50, 50, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47], 
          [240, 24, 25, 27, 28, 29, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 43, 44, 45, 45, 46, 46, 47, 47, 47, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 51, 49, 49, 50, 50, 50, 50, 50, 51, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47], 
          [250, 27, 28, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 42, 43, 44, 44, 45, 46, 46, 47, 47, 47, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 49, 50, 50, 50, 50, 50, 51, 51, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48], 
          [260, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 43, 44, 45, 45, 46, 46, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 50, 50, 50, 50, 50, 51, 51, 51, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48], 
          [270, 30, 31, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 41, 42, 43, 44, 44, 45, 46, 46, 47, 47, 47, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 50, 50, 50, 50, 51, 51, 51, 51, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48], 
          [280, 32, 32, 33, 34, 35, 35, 36, 37, 38, 38, 39, 40, 41, 42, 43, 43, 44, 45, 45, 46, 46, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 50, 50, 50, 51, 51, 51, 51, 51, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48], 
          [290, 33, 34, 35, 35, 36, 37, 37, 38, 38, 39, 40, 41, 41, 42, 43, 44, 44, 45, 45, 46, 47, 47, 47, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 50, 50, 51, 51, 51, 51, 51, 52, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49], 
          [300, 35, 35, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 42, 43, 43, 44, 45, 45, 46, 46, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 50, 51, 51, 51, 51, 51, 52, 52, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49], 
          [310, 36, 36, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 51, 51, 51, 51, 51, 52, 52, 52, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49], 
          [320, 37, 38, 38, 39, 39, 40, 40, 41, 41, 41, 42, 42, 43, 43, 44, 45, 45, 46, 46, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 51, 51, 51, 51, 51, 52, 52, 52, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49], 
          [330, 38, 39, 39, 40, 40, 41, 41, 41, 42, 42, 43, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 51, 51, 51, 51, 52, 52, 52, 52, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49], 
          [340, 39, 40, 40, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 51, 51, 51, 52, 52, 52, 52, 52, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50], 
          [350, 40, 41, 41, 41, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 51, 51, 52, 52, 52, 52, 52, 52, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50], 
          [360, 41, 41, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 51, 51, 52, 52, 52, 52, 52, 52, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50], 
          [370, 42, 42, 42, 43, 43, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 51, 52, 52, 52, 52, 52, 52, 53, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50], 
          [380, 42, 43, 43, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 51, 52, 52, 52, 52, 52, 53, 53, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50], 
          [390, 43, 43, 44, 44, 45, 45, 45, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 52, 52, 52, 52, 52, 52, 53, 53, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50], 
          [400, 44, 44, 44, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 52, 52, 52, 52, 52, 53, 53, 53, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50], 
          [410, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 49, 49, 49, 46, 46, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51], 
          [420, 45, 45, 45, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51], 
          [430, 45, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51], 
          [440, 46, 46, 46, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 47, 47, 48, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51], 
          [450, 46, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 48, 48, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51], 
          [460, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 48, 48, 48, 48, 49, 44, 44, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51], 
          [470, 47, 47, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 48, 48, 49, 49, 49, 44, 45, 45, 45, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51], 
          [480, 47, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 49, 49, 49, 49, 49, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [490, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 49, 49, 49, 49, 50, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [500, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 49, 49, 50, 50, 50, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [510, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 50, 50, 50, 50, 50, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [520, 48, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 50, 50, 50, 50, 50, 46, 46, 47, 47, 47, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [530, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 50, 50, 50, 51, 51, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [540, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 50, 51, 51, 51, 51, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [550, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 51, 51, 51, 51, 51, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [560, 49, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 51, 51, 51, 51, 51, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [570, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 51, 51, 51, 52, 52, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [580, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 51, 51, 52, 52, 52, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [590, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 51, 52, 52, 52, 52, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [600, 50, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 51, 52, 52, 52, 52, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [610, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52, 52, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [620, 48, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [630, 48, 48, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [640, 48, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [650, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [660, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [670, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [680, 49, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [690, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [700, 44, 45, 45, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [710, 45, 45, 45, 46, 46, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [720, 45, 45, 46, 46, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [730, 45, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [740, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [750, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [760, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [770, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [780, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [790, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [800, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [810, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [820, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [830, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [840, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [850, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [860, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [870, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [880, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [890, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52], 
          [900, 46, 46, 46, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52]
      ];

      this.ALTEZZA_RIQUADRI               = 0;
      this.FIRST_X_POSITION_ON_GRID       = 0;
      this.FIRST_Y_POSITION_ON_GRID       = 0;
      this.LAST_X_POSITION_ON_GRID        = 0;
      this.LAST_Y_POSITION_ON_GRID        = 0;
      this.LAST_ROW_ON_GRID               = 0;
      this.potenza                        = {};


      this.CalcolaPotenzeRichieste();

      this.generaGiunti();
      this.caricaComponentsFlag();
      //if(this.CalcolaZavorramento()==false) this.CalcolaZavorramentoMaxi();
      this.CalcolaZavorramento();

      this.caricaCoverZoneProfili();
      this.caricaCoverZoneNodi();

      this.Ricoprimento();
      this.caricaBOMnodi();
      this.caricaStaffeAntisollevamento();
      this.caricaMinigonne();
      this.caricaPiastre();

      this.sistemaProfiliInBOM();
      this.calcolaAltezzeMartinetti();
      //this.CaricaCOMPONENTFLAGS_PEDANA_fromBOM();

     // this.calcolaAltezzeMartinetti();
      this.ottimizzaSTRIP();
     // this.preparaListaSVG();  --->>> disabilitato per accellerare le generazione delle tabelle costi
      this.CaricaCOMPONENTFLAGS_PEDANA_fromBOM();
      this.ElaboraBOMperSMEUP();
  }



  //////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////// 
  // funzioni

  defCost(){
      return    { nodo_esterno: 23,
                  start_nodo_esterno: 4.82,
                  piastra_nodo: 21.2,
                  start_piastra_nodo: 4.45,
                  start_piastra_profilo: 18.9,
                  w_profilo_interno:13.5,
                  piastra_su_profilo_esterno: 18.9,

                  offsetPerLED: 10
                };
  }



ricodificaNodo(nodo_etk) {
switch (nodo_etk) {
  case 'P1': return 'A';
  case 'A1': return 'B';
  case 'A2': return 'C';
  case 'P2': return 'D';
  case 'EP1': return 'E';
  case 'EA1': return 'H';
  case 'EA2': return 'K';
  case 'EP2': return 'N';
  case 'P1a': return 'P';
  case 'P1d': return 'F';
  case 'A1d': return 'G';
  case 'A1c': return 'I';
  case 'A2c': return 'J';
  case 'A2b': return 'L';
  case 'P2b': return 'M';
  case 'P2a': return 'O';
  case 'AB_A1': return 'Q';
  case 'AB_A2': return 'R';
  case 'AB_A1-d': return 'q';
  case 'AB_A2-d': return 'r';
  case 'BC_A1': return 'S';
  case 'BC_A2': return 'T';
  case 'BC_A1-c': return 's';
  case 'BC_A2-c': return 't';
  case 'CD_A1': return 'V';
  case 'CD_A2': return 'U';
  case 'CD_A1-b': return 'v';
  case 'CD_A2-b': return 'u';
  case 'AD_A1': return 'Z';
  case 'AD_A2': return 'W';
  case 'AD_A1-a': return 'z';
  case 'AD_A2-a': return 'w';
  default:
    // Handle cases where no match is found, if necessary
    // For example, return null or a default value
    return null; 
}
}

creaGiunto(etk_nodo)
{
let codifica  = this.ricodificaNodo(etk_nodo);
let out       = {};
out.nodo      = this.cloneMyObj(this.getInfoNodo(etk_nodo).nodo);
out.svg       = this.svgGoToPos(out.nodo.posizione, out.nodo.etk, this.svgGiuntoMarker(out.nodo.etk));  



if(out.nodo.enabled==true && out.nodo.hidden.isHidden==true) // i nodi di accoppiamento del modulo a valle sono sempre enabled ma hiddedn
{
  this.lista_giunti.push(this.cloneMyObj(out));
  this.insert4BOM({name:'GIUNZIONE COVER', n: 1,   gruppo:etk_nodo, lunghezza:0, codifica:codifica});

  //console.log(this.cloneMyObj( this.lista_giunti));
}
else
{
  //console.log(this.cloneMyObj(out.nodo));
}

}


svgGiuntoMarker(etk){    
  let nodo  = this.cloneMyObj(this.getInfoNodo(etk).nodo); 
  let dim = {W:parseFloat(13), H:parseFloat(13)};

  let offset = {x:0, y:0};
  
  if(['P1a'].includes(etk)) offset.y += dim.H/2+this.cost.start_nodo_esterno/2;
  if(['A1c'].includes(etk)) offset.y -= dim.H/2+this.cost.start_nodo_esterno/2; 

  if(['P1d'].includes(etk)) offset.x += dim.W/2+this.cost.start_nodo_esterno/2;
  if(['P2b'].includes(etk)) offset.x -= dim.W/2+this.cost.start_nodo_esterno/2;
  
  let sDis = '';
  
  sDis = '<rect width="'+parseFloat(dim.W)+
        '" height="'+parseFloat(dim.H)+
        '" x="'+(-dim.W/2+offset.x)+'" y="'+(-dim.H/2+offset.y)+'" style="fill:red;stroke:black;stroke-width:0.22;fill-opacity:0.71;stroke-opacity:0.9" />';
  return sDis;
}


generaGiunti()
{

// giunti di accoppiamento: li metto sempre nel modulo a valle

// lato AB
if(this.checkTop('A',5)&&this.checkTop('B',6))
{
  this.creaGiunto('P1a');
  this.creaGiunto('A1c');
}

// lato AD
if(this.checkTop('A',7)&&this.checkTop('D',8))
{
  this.creaGiunto('P1d');
  this.creaGiunto('P2b');
}
  


}

USINGComponentsPEDANA(name, type, etk_in, lunghezza_in)
{


let found       = false;
let valore      = false;
let contatore   =  0;
let pallinatura = etk_in;
let funzione    = null;
let smeup       = '';
let lunghezza   = 0;
let opt         = '';
let etk         = etk_in;
lunghezza       = parseInt(lunghezza_in*10);
let peso_totale = 0;

let cambia_gruppo = false;
let nuovo_gruppo  = '';



if(type!==1 && type.split('-')[0]=='1')
{
  nuovo_gruppo =  type.split('-')[1];
  cambia_gruppo = true;  
  console.log(name);
}

//console.log(this.cloneMyObj(this.PEDANA_COMPONENTS_FLAG));

// cerco se l'elemento è già in lista - devono corrispondere nome, etichetta e lunghezza
let filterLISTA = (cambia_gruppo==false)?
                   this.PEDANA_COMPONENTS_FLAG.filter((el)=>{return el.name==name && el.etk==etk_in && el.lunghezza==lunghezza;}):
                   this.PEDANA_COMPONENTS_FLAG.filter((el)=>{return el.name==name && el.etk==etk_in && el.lunghezza==lunghezza && el.gruppo==nuovo_gruppo;});




if(filterLISTA.length>0)
{
  if(filterLISTA.length>1)
  {
    // ho sbagliato qualcosa, qui non dovrei mai arrivare
    console.log('Errore: ['+name+'] '+ etk_in + ' -> ' +filterLISTA.length);
  }
  else
  {
    // ho trovato una ricorrenza esatta, aumento il contatore
    
    let indice = (cambia_gruppo==false)?
                  this.PEDANA_COMPONENTS_FLAG.findIndex((el)=>{return el.name==name && el.etk==etk_in && el.lunghezza==lunghezza;}):
                  this.PEDANA_COMPONENTS_FLAG.findIndex((el)=>{return el.name==name && el.etk==etk_in && el.lunghezza==lunghezza && el.gruppo==nuovo_gruppo;});
     

        
    this.PEDANA_COMPONENTS_FLAG[indice].counter++;

    let peso = 0;
    if(this.PEDANA_COMPONENTS_FLAG[indice].smeup.substring(0,2)=='01')
    {
      peso = parseFloat(this.PEDANA_COMPONENTS_FLAG[indice].peso*this.PEDANA_COMPONENTS_FLAG[indice].lunghezza/100);
    }
    else
    {
      peso = parseFloat(this.PEDANA_COMPONENTS_FLAG[indice].peso);
    }

    this.PEDANA_COMPONENTS_FLAG[indice].peso_totale += peso;
    //console.log('found: ['+name+'] '+etk_in + ' incremento il contatore '+ this.PEDANA_COMPONENTS_FLAG[indice].counter);
  }
}
else // non ho trovato alcuna ricorrenzza esatta
{
  //console.log('')
  //console.log(name, type, etk_in, lunghezza_in);
  //console.log('nessuna corrispondenza su lista precisa');


 
  filterLISTA   = (cambia_gruppo==false)?
                   this.PEDANA_COMPONENTS_FLAG.filter((el)=>{return el.name==name && el.etk==etk_in;}):
                   this.PEDANA_COMPONENTS_FLAG.filter((el)=>{return el.name==name && el.etk==etk_in && el.gruppo==nuovo_gruppo;});
  if(filterLISTA.length>0) // ci sono elementi simili e con la stessa etichetta ma con lunghezza diversa
  {
    let clone  = JSON.parse(JSON.stringify(filterLISTA[0]));
    let clone2 = Object.assign({}, filterLISTA[0]);
    clone.counter       = 1;
    //clone.etk           = etk_in;
    clone.lunghezza     = parseInt(lunghezza*10)/10;
    //clone.pallinatura   = this.PEDANA_COMPONENTS_FLAG[indice].pallinatura.split('.')[0]+'.'+String.fromCharCode('a'.charCodeAt(0) + 1);
    clone.funzione      = clone2.funzione;
    //clone.acronimo      = name+'/'+etk_in;
    clone.riferimento   = etk_in+'-'+clone.gruppo; //+'-'+etk_in;
    //console.log('aggiungo nuovo elemento collegato '+ etk_in);
    //console.log(clone);

    let peso = 0;
    if(clone.smeup.substring(0,2)=='01')
    {
      peso = parseFloat(clone.peso*clone.lunghezza/100);
    }
    else
    {
      peso = parseFloat(clone.peso);
    }

    clone.peso_totale = peso;

    this.PEDANA_COMPONENTS_FLAG.push(clone);

    pallinatura         = clone.pallinatura;
    contatore           = clone.counter;
  }
  else  // nessuna corrispondenza esatta, cerco l'elemento base della lista
  {
      //console.log('---> nessuna corrispondenza con nome ed etichetta');
      
      filterLISTA   = this.PEDANA_COMPONENTS_FLAG.filter((el)=>{return el.name==name;});
      //console.log(filterLISTA.length, '---> corrispondenze con nome'); 

      if(filterLISTA.length>0)
      {
        //console.log(filterLISTA.length, '==> solo nome', name ,  etk_in);


        // faccio una copia del primo elemento trovato e lo modifico secondo il campione corrente
        let clone  = this.cloneMyObj(filterLISTA[0]);
        let clone2 = this.cloneMyObj(filterLISTA[0]);
        clone.counter       = 1;
        clone.etk           = etk_in;
        clone.lunghezza     = parseInt(lunghezza*10)/10;
       
        clone.funzione      = clone2.funzione;
        //clone.acronimo      = name+'/'+etk_in;
        //clone.riferimento   = clone.gruppo+'-'+etk_in;
        clone.riferimento   = etk_in+'-'+clone.gruppo; //+'-'+etk_in;
        //console.log('aggiungo nuovo elemento collegato '+ etk_in);
        //console.log(clone);

        let peso = 0;
        if(clone.smeup.substring(0,2)=='01')
        {
          peso = parseFloat(clone.peso*clone.lunghezza/100);
        }
        else
        {
          peso = parseFloat(clone.peso);
        }

        clone.peso_totale = peso;

        if(cambia_gruppo==true) 
          {
            clone.gruppo = nuovo_gruppo;
            clone.riferimento =  clone.riferimento.split('-')[0]+'-'+nuovo_gruppo;
          }

        if(clone.gruppo=="") 
          {
            clone.gruppo = "STAFFE";
            clone.riferimento =  clone.riferimento.split('-')[0];
          }  


        

        pallinatura         = clone.pallinatura;
        contatore           = clone.counter;
        this.PEDANA_COMPONENTS_FLAG.push(clone);

        //console.log(this.cloneMyObj(clone));
      }
      else
      {
        // ops qui non dovrei mai arrivare.....
        console.log('Codice senza riferimento in lista: '+ name);
      }
  }

}







//console.log(etk+' '+pallinatura);

let info = new Object();
info.found        = found;
info.valore       = valore&&found;
info.counter      = contatore;
info.pallinatura  = pallinatura;
info.funzione     = funzione;
info.smeup        = smeup;
info.lunghezza    = lunghezza;
info.opt          = opt;

return info;
}








 caricaMinigonne()
 {
    this.caricaMinigonna('AB', this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vA1);
    this.caricaMinigonna('BC', this.grafica.piano.vertici.vA1, this.grafica.piano.vertici.vA2);
    this.caricaMinigonna('CD', this.grafica.piano.vertici.vA2, this.grafica.piano.vertici.vP2);
    this.caricaMinigonna('AD', this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vP2);
 }

 caricaMinigonna(lato, estremo_1, estremo_2)
 {
   //console.log(estremo_1.z, estremo_2.z);
   let max        = Math.max(-estremo_1.z, -estremo_2.z);
   let lunghezza  = Math.sqrt(Math.pow(estremo_1.x-estremo_2.x, 2)+Math.pow(estremo_1.y-estremo_2.y,2));
   let pezzi      = Math.ceil(lunghezza/400);
   let rif        = 0;
   if(max>0)        rif = 10;
   if(max>7.4)      rif = 20;
   if(max>17.4)     rif = 30;
   if(max>27.4)     rif = 40;
   if(max>37.4)     rif = 0; // errore

   let rif_gruppo = estremo_1.etk+'-'+estremo_2.etk;
   let codifica   = this.ricodificaNodo(estremo_1.etk)+this.ricodificaNodo(estremo_2.etk);

   //console.log(rif);
   switch (rif) {
    case 10:
         this.altro.push(  this.insert4BOM({name:'PROLUNGA DISLIVELLI H10 cm L400 cm PEDANA',       n: pezzi,   gruppo:rif_gruppo, lunghezza:this.round(400), codifica: codifica}));
      break;
    case 20:
         this.altro.push(  this.insert4BOM({name:'PROLUNGA DISLIVELLI H20 cm L400 cm PEDANA',       n: pezzi,   gruppo:rif_gruppo, lunghezza:this.round(400), codifica: codifica}));
      break;  
    case 30:
         this.altro.push(  this.insert4BOM({name:'PROLUNGA DISLIVELLI H30 cm L400 cm PEDANA',       n: pezzi,   gruppo:rif_gruppo, lunghezza:this.round(400), codifica: codifica}));
      break;
    case 40:
         this.altro.push(  this.insert4BOM({name:'PROLUNGA DISLIVELLI H40 cm L400 cm PEDANA',       n: pezzi,   gruppo:rif_gruppo, lunghezza:this.round(400), codifica: codifica}));
      break;   
   }
 }


 caricaStaffeAntisollevamento()
 {
   this.lista_staffe_antisollevamento = [];
   // le staffe di sollevamento si attivano solamente se non el previsto lo zavorramento

   if(this.smOBJ.optionals.pedana.ballast.TIPO_BALLAST.split('-')[0]!=='0') return 0;
   
   

   for(let i=0;i<this.lista_nodi.length;i++)
      {
        if(this.lista_nodi[i].enabled)
        {  
          let h     = -this.calcolaDislivello(this.lista_nodi[i].posizione);     
          let pezzi = 0;
          let pos   = {UP:0, DOWN:0, LEFT:0, RIGHT:0};

          switch(this.lista_nodi[i].tipo)
          {
                              
              case "nodo esterno":                   
                  
                     if(this.lista_nodi[i].etk=='EP1')
                     {
                        if(this.offset.a > 50) pos.DOWN   = 1;
                        if(this.offset.d > 50) pos.RIGHT  = 1;
                     }
                     if(this.lista_nodi[i].etk=='EP2')
                     {
                        if(this.offset.a > 50) pos.DOWN   = 1;
                        if(this.offset.b > 50) pos.LEFT   = 1;
                     }
                     if(this.lista_nodi[i].etk=='EA2')
                     {
                        if(this.offset.b > 50) pos.LEFT   = 1;
                        if(this.offset.c > 50) pos.UP     = 1;
                     }
                     if(this.lista_nodi[i].etk=='EA1')
                     {
                        if(this.offset.c > 50) pos.UP     = 1;
                        if(this.offset.d > 50) pos.RIGHT  = 1;
                     }
                     
                     /////////////////////////////////
                     if(this.lista_nodi[i].etk=='P1a')
                     {
                        pos.RIGHT  = 1;
                        if(this.offset.a > 50) pos.DOWN   = 1;                          
                     }
                     if(this.lista_nodi[i].etk=='P1d')
                     {
                        pos.DOWN   = 1;
                        if(this.offset.d > 50) pos.RIGHT  = 1;                          
                     }
                     if(this.lista_nodi[i].etk=='A1d')
                     {
                        pos.UP   = 1;
                        if(this.offset.d > 50) pos.RIGHT  = 1;                          
                     }
                     if(this.lista_nodi[i].etk=='A1c')
                     {
                        pos.RIGHT   = 1;
                        if(this.offset.c > 50) pos.UP     = 1;                          
                     }
                     if(this.lista_nodi[i].etk=='A2c')
                     {
                        pos.LEFT   = 1;
                        if(this.offset.c > 50) pos.UP     = 1;;                          
                     }
                     if(this.lista_nodi[i].etk=='A2b')
                     {
                        pos.UP   = 1;
                        if(this.offset.b > 50) pos.LEFT   = 1;                          
                     }
                     if(this.lista_nodi[i].etk=='P2b')
                     {
                        pos.DOWN   = 2;
                        if(this.offset.b > 50) pos.LEFT   = 1;                          
                     }
                     if(this.lista_nodi[i].etk=='P2a')
                     {
                        pos.LEFT   = 1;
                        if(this.offset.a > 50) pos.DOWN   = 1;                          
                     }

                     /////////////////////////////////
                     if(this.lista_nodi[i].etk=='P1')
                     {
                        pos = {UP:0, DOWN:1, LEFT:0, RIGHT:1};
                     }
                     if(this.lista_nodi[i].etk=='P2')
                     {
                        pos = {UP:0, DOWN:1, LEFT:1, RIGHT:0};
                     }
                     if(this.lista_nodi[i].etk=='A2')
                     {
                        pos = {UP:1, DOWN:0, LEFT:1, RIGHT:0};
                     }
                     if(this.lista_nodi[i].etk=='A1')
                     {
                        pos = {UP:1, DOWN:0, LEFT:0, RIGHT:1};
                     }
                  

              break;                

              case "nodo gamba":
                     if(this.lista_nodi[i].etk=='P1')
                     {
                        pos = {UP:0, DOWN:1, LEFT:0, RIGHT:1};
                     }
                     if(this.lista_nodi[i].etk=='P2')
                     {
                        pos = {UP:0, DOWN:1, LEFT:1, RIGHT:0};
                     }
                     if(this.lista_nodi[i].etk=='A2')
                     {
                        pos = {UP:1, DOWN:0, LEFT:1, RIGHT:0};
                     }
                     if(this.lista_nodi[i].etk=='A1')
                     {
                        pos = {UP:1, DOWN:0, LEFT:0, RIGHT:1};
                     }
                     ////////////////////////////////
                     if(this.lista_nodi[i].etk.split('_')[0]=='AB'||
                        this.lista_nodi[i].etk.split('_')[0]=='BC'||
                        this.lista_nodi[i].etk.split('_')[0]=='CD'||
                        this.lista_nodi[i].etk.split('_')[0]=='AD'
                       )
                     {
                         pos.UP     = (this.lista_nodi[i].vicini.UP   !==null)?1:0;
                         pos.DOWN   = (this.lista_nodi[i].vicini.DOWN !==null)?1:0;
                         pos.LEFT   = (this.lista_nodi[i].vicini.LEFT !==null)?1:0;
                         pos.RIGHT  = (this.lista_nodi[i].vicini.RIGHT!==null)?1:0;    
                     }
              break;    
          }
          
          //console.log('');
          //console.log(this.lista_nodi[i].etk, this.lista_nodi[i].posType, h, pezzi);
          //console.log(pos);
          
          pezzi = parseInt( pos.UP + pos.DOWN + pos.LEFT + pos.RIGHT);
          if(pezzi>2)
          {
            console.log('Attenzione: ', this.lista_nodi[i].etk, ', troppi pezzi: ', pezzi);
            pezzi = 2;
          }
          
          // carico in lista solamente se serve
          if(pezzi>0 && h>0)
          {          
            this.lista_staffe_antisollevamento.push(this.crea_staffa_antisollevamento(this.lista_nodi[i], pos, pezzi));
          }

        }  
      }
 }

 crea_staffa_antisollevamento(nodo, pos, pezzi)
 {
     let out = {};
     let h     = -this.calcolaDislivello(nodo.posizione);
     if(h<=20)
       {
          if(h<=10) 
            this.altro.push(  this.insert4BOM({name:'STAFFA ANTI SOLLEVAMENTO 0-12 CM',       n: pezzi,   gruppo:nodo.etk, lunghezza:this.round(0), codifica: this.ricodificaNodo(nodo.etk)}));
          else
            this.altro.push(  this.insert4BOM({name:'STAFFA ANTI SOLLEVAMENTO 8-20 CM',       n: pezzi,   gruppo:nodo.etk, lunghezza:this.round(0), codifica: this.ricodificaNodo(nodo.etk)}));
       }
     else
      {
        console.log('Attenzione: ', nodo.etk, ', altezza troppo elevata: ', h);
        return null;
      }

      let pos_rif = {x:0, y:0};
      let lh      = {x:0, y:0, enable:false};
      let lv      = {x:0, y:0, enable:false}; 

      let dim_piastra = this.cost.piastra_nodo;
      let dim_offset  = 5;
      let dim_pos     = 18;

      switch (nodo.posType) {

        case 'TL':
          pos_rif = {x:parseFloat(nodo.posizione.x+dim_pos), y:parseFloat(nodo.posizione.y+dim_pos)};
          if(pos.RIGHT>0) lh = {x:parseFloat(pos_rif.x+dim_offset), y:parseFloat(pos_rif.y), enable:true};
          if(pos.DOWN>0)  lv = {x:parseFloat(pos_rif.x), y:parseFloat(pos_rif.y+dim_offset), enable:true};            
          break;

        case 'TR':
          pos_rif = {x:parseFloat(nodo.posizione.x-dim_pos), y:parseFloat(nodo.posizione.y+dim_pos)};
          if(pos.LEFT>0)  lh = {x:parseFloat(pos_rif.x-dim_piastra-dim_offset), y:parseFloat(pos_rif.y), enable:true};
          if(pos.DOWN>0)  lv = {x:parseFloat(pos_rif.x), y:parseFloat(pos_rif.y+dim_offset), enable:true};
          break;
          
        case 'BL':
          pos_rif = {x:parseFloat(nodo.posizione.x+dim_pos), y:parseFloat(nodo.posizione.y-dim_pos)};
          if(pos.RIGHT>0) lh = {x:parseFloat(pos_rif.x+dim_offset), y:parseFloat(pos_rif.y), enable:true};
          if(pos.UP>0)    lv = {x:parseFloat(pos_rif.x), y:parseFloat(pos_rif.y-dim_piastra-dim_offset), enable:true};
          break;  
      
        case 'BR':
          pos_rif = {x:parseFloat(nodo.posizione.x-dim_pos), y:parseFloat(nodo.posizione.y-dim_pos)};
          if(pos.LEFT>0)  lh = {x:parseFloat(pos_rif.x-dim_piastra-dim_offset), y:parseFloat(pos_rif.y), enable:true};
          if(pos.UP>0)    lv = {x:parseFloat(pos_rif.x), y:parseFloat(pos_rif.y-dim_piastra-dim_offset), enable:true};
          break;

        default:
          break;
      }



   let colore = 'fill:none;stroke:purple;stroke-width:3';
   if(nodo.hidden.isHidden) colore = 'fill:none;stroke:none;stroke-width:0.51';
   let sDis = '';

   if(lh.enable) sDis += '<path d="M '+ lh.x + ' ' + lh.y +' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
   if(lv.enable) sDis += '<path d="M '+ lv.x + ' ' + lv.y +' v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
   
   
   out.lh  = this.cloneMyObj(lh);
   out.lv  = this.cloneMyObj(lv);
   out.svg = sDis;

   return out;
  
 }

 caricaBOMnodi()
 {
  for(let i=0;i<this.lista_nodi.length;i++)
      {
        if(this.lista_nodi[i].enabled && this.lista_nodi[i].hidden.isHidden==false)
        {  
          switch(this.lista_nodi[i].tipo)
          {
              case "nodo semplice":
                  if(!this.checkType('A',1)||
                     !this.checkType('B',1)||
                     !this.checkType('C',1)||
                     !this.checkType('D',1)
                    )                
                    this.altro.push(  this.insert4BOM({name:'KIT STAFFA TELESCOPICA PEDANA',               n: 1,   gruppo:this.lista_nodi[i].etk, lunghezza:this.round(0), codifica: this.ricodificaNodo(this.lista_nodi[i].etk)}));
                  else  
                    this.altro.push(  this.insert4BOM({name:'KIT COLLEGAMENTO PROFILI',               n: 1,   gruppo:this.lista_nodi[i].etk, lunghezza:this.round(0), codifica: this.ricodificaNodo(this.lista_nodi[i].etk)}));
              break;

              case "zavorramento":  
                  this.altro.push(  this.insert4BOM({name:'KIT COLLEGAMENTO PROFILI',               n: 1,   gruppo:this.lista_nodi[i].etk, lunghezza:this.round(0), codifica: this.ricodificaNodo(this.lista_nodi[i].etk)}));
              break;
              
              case "nodo esterno":
                  this.altro.push(  this.insert4BOM({name:'KIT COLLEGAMENTO PROFILI ESTERNI',       n: 1,   gruppo:this.lista_nodi[i].etk, lunghezza:this.round(0), codifica: this.ricodificaNodo(this.lista_nodi[i].etk)}));
              break;

              case "nodo esterno-muro":
                  this.altro.push(  this.insert4BOM({name:'KIT STAFFA FISSAGGIO A MURO PEDANA',       n: 1,   gruppo:this.lista_nodi[i].etk, lunghezza:this.round(0), codifica: this.ricodificaNodo(this.lista_nodi[i].etk)}));
              break;

              case "nodo gamba":
                  this.altro.push(  this.insert4BOM({name:'KIT GIUNZIONE STRUTTURALE ANGOLO',       n: 1,   gruppo:this.lista_nodi[i].etk, lunghezza:this.round(0), codifica: this.ricodificaNodo(this.lista_nodi[i].etk)}));
                  //console.log({name:'KIT GIUNZIONE STRUTTURALE ANGOLO',       n: 1,   gruppo:this.lista_nodi[i].etk, lunghezza:this.round(0)});
              break;    
          }
        }  
      }

 } 
  
 caricaComponentsFlag(){
  this.COMPONENTS_FLAG = [];
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '271792', name: 'Prolunga RGB 1m',                   pallinatura: '7a', active: false, compliant: false, counter:0, funzione: this.render_PROLUNGA_RGB, lunghezza: 1});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272091', name: 'Prolunga RGB 3m',                   pallinatura: '7b', active: false, compliant: false, counter:0, funzione: this.render_PROLUNGA_RGB, lunghezza: 3});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '271282', name: 'Prolunga RGB 5m',                   pallinatura: '7c', active: false, compliant: false, counter:0, funzione: this.render_PROLUNGA_RGB, lunghezza: 5});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272070', name: 'Prolunga RGB 7m',                   pallinatura: '7d', active: false, compliant: false, counter:0, funzione: this.render_PROLUNGA_RGB, lunghezza: 7});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '250358', name: 'Prolunga Std 1m',                   pallinatura: '5a', active: false, compliant: false, counter:0, funzione:this.render_ProlungaStd, lunghezza: 1});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272092', name: 'Prolunga Std 3m',                   pallinatura: '5b', active: false, compliant: false, counter:0, funzione:this.render_ProlungaStd, lunghezza: 3});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '250369', name: 'Prolunga Std 5m',                   pallinatura: '5c', active: false, compliant: false, counter:0, funzione:this.render_ProlungaStd, lunghezza: 5});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272090', name: 'Prolunga Std 7m',                   pallinatura: '5d', active: false, compliant: false, counter:0, funzione:this.render_ProlungaStd, lunghezza: 7});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272088', name: 'CAVO 4 TESTE RGB TVALL',            pallinatura: '15a', active: false, compliant: false, counter:0, funzione: this.render_4TESTERGBTVALL});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272087', name: 'CAVO 4 TESTE WHITE TVALL',          pallinatura: '15b', active: false, compliant: false, counter:0, funzione: this.render_4TESTEWHITETVALL});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '250528', name: 'C.U. RGB MASTER',                   pallinatura: '14d', active: false, compliant: false, counter:0, funzione: this.render_CENTRALINAGENERICA});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '250529', name: 'C.U. RGB SLAVE',                    pallinatura: '14e', active: false, compliant: false, counter:0, funzione: this.render_CENTRALINAGENERICA});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '250560', name: 'NEXTA LED',                         pallinatura: '51', active: false, compliant: false, counter:0, funzione: this.render_nexta_solo_LED}); //
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '271993', name: 'CU RGB IO 240W',                    pallinatura: '13a', active: false, compliant: false, counter:0, funzione: this.render_CENTRALINAGENERICA});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '271990', name: 'CU RGB RTS 240W',                   pallinatura: '13b', active: false, compliant: false, counter:0, funzione: this.render_CENTRALINAGENERICA});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '271989', name: 'CU RGB RX 240W',                    pallinatura: '13c', active: false, compliant: false, counter:0, funzione: this.render_CENTRALINAGENERICA});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '271991', name: 'CU WHITE IO 240W',                  pallinatura: '14a', active: false, compliant: false, counter:0, funzione: this.render_CENTRALINAGENERICA});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '271987', name: 'CU WHITE RTS 240W',                 pallinatura: '14b', active: false, compliant: false, counter:0, funzione: this.render_CENTRALINAGENERICA});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '271995', name: 'CU WHITE RX 240W',                  pallinatura: '14c', active: false, compliant: false, counter:0, funzione: this.render_CENTRALINAGENERICA});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '210192', name: 'Cavo 230Vac',                       pallinatura: '18a', active: false, compliant: false, counter:0, funzione:this.render_cavo230Vac, lunghezza: 1});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '210182', name: 'Scatola Derivazione D40',           pallinatura: '20', active: false, compliant: false, counter:0, funzione:this.render_scatolaDerivazioneD40});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '250306', name: 'Connettore WATERPROOF',             pallinatura: '19', active: false, compliant: false, counter:0, funzione:this.render_connettoreWATERPROOF});


  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272068', name: 'NOS RGB 5m',                        pallinatura: '6a', active: false, compliant: false, counter:0, funzione: this.render_NOS_WHITE, lunghezza: 5, opt:'RGB'});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272069', name: 'NOS RGB 7m',                        pallinatura: '6b', active: false, compliant: false, counter:0, funzione: this.render_NOS_WHITE, lunghezza: 7, opt:'RGB'});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272188', name: 'NOS 4000K 3m',                      pallinatura: '8a', active: false, compliant: false, counter:0, funzione: this.render_NOS_WHITE, lunghezza: 3, opt:'4000K'});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272071', name: 'NOS 4000K 5m',                      pallinatura: '8b', active: false, compliant: false, counter:0, funzione: this.render_NOS_WHITE, lunghezza: 5, opt:'4000K'});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272072', name: 'NOS 4000K 7m',                      pallinatura: '8a', active: false, compliant: false, counter:0, funzione: this.render_NOS_WHITE, lunghezza: 7, opt:'4000K'});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272187', name: 'NOS 3000K 3m',                      pallinatura: '9a', active: false, compliant: false, counter:0, funzione: this.render_NOS_WHITE, lunghezza: 3, opt:'3000K'});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272066', name: 'NOS 3000K 5m',                      pallinatura: '9b', active: false, compliant: false, counter:0, funzione: this.render_NOS_WHITE, lunghezza: 5, opt:'3000K'});
  this.COMPONENTS_FLAG.push({acronimo:'',smeup: '272067', name: 'NOS 3000K 7m',                      pallinatura: '9a', active: false, compliant: false, counter:0, funzione: this.render_NOS_WHITE, lunghezza: 7, opt:'3000K'});



}




caricaVETRATE()
{
let lista_vetrate = [];
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ab.CH_A1)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ab.CH_A2)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ab.CH_A3)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ab.CH_S1)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ab.CH_S2)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ab.CH_YA1)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ab.CH_YP1)));

lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ad.CH_A1)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ad.CH_A2)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ad.CH_A3)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ad.CH_S1)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ad.CH_S2)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ad.CH_XP1)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_ad.CH_XP2)));

lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_bc.CH_A1)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_bc.CH_A2)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_bc.CH_A3)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_bc.CH_S1)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_bc.CH_S2)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_bc.CH_XA1)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_bc.CH_XA2)));

lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_cd.CH_A1)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_cd.CH_A2)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_cd.CH_A3)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_cd.CH_S1)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_cd.CH_S2)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_cd.CH_YP2)));
lista_vetrate.push( JSON.parse(JSON.stringify(this.smOBJ.vetrate.glass_cd.CH_YA2)));


let forbidden =['AY', 'BY', 'DY', 'CY', 'AX', 'DX', 'BX', 'CX'];
if(this.checkTop('D',5) && this.checkTop('C',6)) forbidden.push('Y2','Y4','Y6');
if(this.checkTop('A',5) && this.checkTop('B',6)) forbidden.push('Y1','Y3','Y5');
if(this.checkTop('A',7) && this.checkTop('D',8)) forbidden.push('X2','X4','X6');
if(this.checkTop('B',7) && this.checkTop('C',8)) forbidden.push('X1','X3','X5');

if(this.checkPost('A') && this.checkPost('D')) forbidden.push('X2','X4','X6');
if(this.checkPost('A') && this.checkPost('B')) forbidden.push('Y1','Y3','Y5');
if(this.checkPost('B') && this.checkPost('C')) forbidden.push('X1','X3','X5');
if(this.checkPost('D') && this.checkPost('C')) forbidden.push('Y2','Y4','Y6');

//console.log(lista_vetrate);

for(let i=0; i<lista_vetrate.length;i++)
{


  let test1 = (forbidden.includes(lista_vetrate[i].name)==false);
  let test2 = lista_vetrate[i].luce>0;
  let test  = (test1==true)&&(test2==true);
  lista_vetrate[i].n_threads = 0;
  lista_vetrate[i].active   = false;
  
  if(lista_vetrate[i].threads!==0 && lista_vetrate[i].threads.split('-').length>1 &&test)
  {
     
    lista_vetrate[i].n_threads = parseInt(lista_vetrate[i].threads.split('-')[1].split(' ')[0]);
    lista_vetrate[i].active   = true;
  }

}
//console.log(lista_vetrate);
lista_vetrate = this.cloneMyObj(lista_vetrate.filter((el)=>{return el.active==true;}));
//console.log(lista_vetrate);
this.lista_vetrate = [];
this.lista_vetrate = this.cloneMyObj(lista_vetrate);
//console.log(JSON.stringify(this.smOBJ.lista_vetrate));
}


////////////////////////////////////////////////////////////////////////////////////////////////////
caricaVetrate()
{
this.lista_glass = [];

// lato AB
let filteredSide = this.lista_POST.filter((el)=> {return el.etk.split('_')[0]=='AB'&&el.enabled}).sort(this.comparePosY);
if(filteredSide.length>0)
{
  let counter_etk = 0;
  let etk_post_ini = 'A';
  for(let i=0;i<filteredSide.length;i++)
  {
    let etk = '';
    if(filteredSide[i].etk.split('_')[1]!=='S1')
    {
      etk = 'Y'+parseInt(2*counter_etk+1);
      counter_etk++;
    }
    else
    {
      etk = 'AY';
    }

    this.creaGLASS('AB', etk_post_ini, etk);
    etk_post_ini = filteredSide[i].etk;

    if(i==parseInt(filteredSide.length-1))
    {
      etk = (filteredSide[i].etk.split('_')[1]!=='S2')?'Y'+parseInt(2*counter_etk+1):'BY';
      this.creaGLASS('AB', etk_post_ini, etk);
    }
  }
}
else
{ // nessuna gamba intermedia
  this.creaGLASS('AB', 'A', 'Y1');
}



////////////////////////////////////////////////////////////////////////////////
// vetrate su lato AB, per addossamento su AD
if(
   !this.checkType('A',1)&&!this.checkType('D',1)&&this.checkIFglass('YP1')
  )
   {
     this.creaGLASS('AB', 'Ay0', 'YP1');
   }

// vetrate su lato CD, per addossamento su AD
 if(
    !this.checkType('A',1)&&!this.checkType('D',1)&&this.checkIFglass('YP2')
   )
    {
      this.creaGLASS('CD', 'Dy0', 'YP2');
    }




// vetrate su lato AD, per addossamento su CD
if(
   !this.checkType('C',1)&&!this.checkType('D',1)&&this.checkIFglass('XP2')
  )
   {
     this.creaGLASS('AD', 'Dx0', 'XP2');
   }

// vetrate su lato AB, per addossamento su CD
 if(
     !this.checkType('C',1)&&!this.checkType('D',1)&&this.checkIFglass('XA2')
   )
    {
      this.creaGLASS('BC', 'Cx0', 'XA2');
    }



// vetrate su lato CD, per addossamento su BC
if(
   !this.checkType('B',1)&&!this.checkType('C',1)&&this.checkIFglass('YA2')
  )
   {
     this.creaGLASS('CD', 'Cy0', 'YA2');
   }

// vetrate su lato AB, per addossamento su BC
 if(
    !this.checkType('B',1)&&!this.checkType('C',1)&&this.checkIFglass('YA1')
   )
    {
      this.creaGLASS('AB', 'By0', 'YA1');
    }



// vetrate su lato AD, per addossamento su AB
if(
   !this.checkType('A',1)&&!this.checkType('B',1)&&this.checkIFglass('XP!')
  )
   {
     this.creaGLASS('AD', 'Ax0', 'XP1');
   }

// vetrate su lato BC, per addossamento su AB
 if(
    !this.checkType('A',1)&&!this.checkType('B',1)&&this.checkIFglass('XA1')
   )
    {
      this.creaGLASS('BC', 'Bx0', 'XA1');
    }
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////



// lato BC
filteredSide = this.lista_POST.filter((el)=> {return el.etk.split('_')[0]=='BC'&&el.enabled}).sort(this.comparePosX);
if(filteredSide.length>0)
{
  let counter_etk = 0;
  let etk_post_ini = 'B';
  for(let i=0;i<filteredSide.length;i++)
  {
    let etk = '';
    if(filteredSide[i].etk.split('_')[1]!=='S1')
    {
      etk = 'X'+parseInt(2*counter_etk+1);
      counter_etk++;
    }
    else
    {
      etk = 'BX';
    }

    this.creaGLASS('BC', etk_post_ini, etk);
    etk_post_ini = filteredSide[i].etk;

    if(i==parseInt(filteredSide.length-1))
    {
      etk = (filteredSide[i].etk.split('_')[1]!=='S2')?'X'+parseInt(2*counter_etk+1):'CX';
      this.creaGLASS('BC', etk_post_ini, etk);
    }
  }
}
else
{ // nessuna gamba intermedia
  this.creaGLASS('BC', 'B', 'X1');
}



// lato CD
filteredSide = this.lista_POST.filter((el)=> {return el.etk.split('_')[0]=='CD'&&el.enabled}).sort(this.comparePosY);
if(filteredSide.length>0)
{
  let counter_etk = 0;
  let etk_post_ini = 'D';
  for(let i=0;i<filteredSide.length;i++)
  {
    let etk = '';
    if(filteredSide[i].etk.split('_')[1]!=='S1')
    {
      etk = 'Y'+parseInt(2*(counter_etk+1));
      counter_etk++;
    }
    else
    {
      etk = 'DY';
    }

    this.creaGLASS('CD', etk_post_ini, etk);
    etk_post_ini = filteredSide[i].etk;

    if(i==parseInt(filteredSide.length-1))
    {
      etk = (filteredSide[i].etk.split('_')[1]!=='S2')?'Y'+parseInt(2*(counter_etk+1)):'CY';
      this.creaGLASS('CD', etk_post_ini, etk);
    }
  }
}
else
{ // nessuna gamba intermedia
  this.creaGLASS('CD', 'D', 'Y2');
}

// lato AD
filteredSide = this.lista_POST.filter((el)=> {return el.etk.split('_')[0]=='AD'&&el.enabled}).sort(this.comparePosX);
if(filteredSide.length>0)
{
  let counter_etk = 0;
  let etk_post_ini = 'A';
  for(let i=0;i<filteredSide.length;i++)
  {
    let etk = '';
    if(filteredSide[i].etk.split('_')[1]!=='S1')
    {
      etk = 'X'+parseInt(2*(counter_etk+1));
      counter_etk++;
    }
    else
    {
      etk = 'AX';
    }

    this.creaGLASS('AD', etk_post_ini, etk);
    etk_post_ini = filteredSide[i].etk;

    if(i==parseInt(filteredSide.length-1))
    {
      etk = (filteredSide[i].etk.split('_')[1]!=='S2')?'X'+parseInt(2*(counter_etk+1)):'DX';
      this.creaGLASS('AD', etk_post_ini, etk);
    }
  }
}
else
{ // nessuna gamba intermedia
  this.creaGLASS('AD', 'A', 'X2');
}


////////////////////////////

}




checkIFglass(str)
{
let forbidden =['AY', 'BY', 'DY', 'CY', 'AX', 'DX', 'BX', 'CX'];
if(this.checkTop('D',5) && this.checkTop('C',6)) forbidden.push('Y2','Y4','Y6');
if(this.checkTop('A',5) && this.checkTop('B',6)) forbidden.push('Y1','Y3','Y5');
if(this.checkTop('A',7) && this.checkTop('D',8)) forbidden.push('X2','X4','X6');
if(this.checkTop('B',7) && this.checkTop('C',8)) forbidden.push('X1','X3','X5');

if(this.checkPost('A') && this.checkPost('D')) forbidden.push('X2','X4','X6');
if(this.checkPost('A') && this.checkPost('B')) forbidden.push('Y1','Y3','Y5');
if(this.checkPost('B') && this.checkPost('C')) forbidden.push('X1','X3','X5');
if(this.checkPost('D') && this.checkPost('C')) forbidden.push('Y2','Y4','Y6');

let test = (forbidden.includes(str)==false);
return this.lista_vetrate.filter((el)=>{return el.name==str&&el.active==true}).length>0 && test;
}
getPostINFO(strPost)
{
let out = {};

let post = this.lista_POST.filter((el)=>{return el.etk==strPost;});
if(post.length>0)
{
  out.info         = Object.assign({}, post[0]);
  out.enabled      = post[0].enabled;
  out.pos          = Object.assign({}, post[0].posizione.assoluta);
}
else
{
  out.info         = {};
  out.enabled      = false;
  out.pos          = {};
}
return out;
}

getLarghezzaGuidaVetrata(etk_luce)
{
let larghezza_guida = 10.4;
let info = this.lista_vetrate.filter((el)=>{return el.name==etk_luce});
if(info.length==0) return 0;

switch (info[0].n_threads) {
  case 2:
    larghezza_guida = 4.4;
    break;
  case 3:
    larghezza_guida = 6.4;
  break;
  case 4:
    larghezza_guida = 8.4;
  break;
  case 5:
    larghezza_guida = 10.4;
  break;
  default:
    larghezza_guida = 10.4;
}

return larghezza_guida;
}

getDisplacements(str)
{
let filter = this.lista_vetrate.filter((el)=>{return el.name==str;});
if(filter.length>0)
{
  return filter[0].luce;
}
return 0;
}

creaGLASS(lato, etk_post_ini, etk_luce)
{
let dim_gamba         = this.smOBJ.dimensioni.nominali.gamba;

let p_quote           = {x:0, y:0};
let p_screen          = {x:0, y:0};
//console.log('');
//console.log(lato, etk_post_ini, etk_luce);


let larghezza_guida = this.getLarghezzaGuidaVetrata(etk_luce);

switch(lato)
{
 case 'AB':
   p_quote.x   = -larghezza_guida;
   p_quote.y   = this.getPostINFO(etk_post_ini).enabled?dim_gamba:0;
   p_screen.x  = dim_gamba-larghezza_guida;
   p_screen.y  = this.getPostINFO(etk_post_ini).enabled?dim_gamba:0;
   if(etk_post_ini=='A'&&this.getPostINFO('A').enabled==false)
   {
     p_quote.y   = dim_gamba;
     p_screen.y  = dim_gamba;
   }

   if(etk_post_ini=='Ay0')
   {
     //console.log('dim_gamba: '+dim_gamba);
     etk_post_ini = 'A';
     //p_quote.x   =  dim_gamba+5;
     p_quote.y   = -this.smOBJ.optionals.pedana.a;
     //p_screen.x  = dim_gamba-larghezza_guida;
     p_screen.y  = -this.smOBJ.optionals.pedana.a;
   }

   if(etk_post_ini=='By0')
   {
     //console.log('dim_gamba: '+dim_gamba);
     etk_post_ini = 'B';
     //p_quote.x   =  -(0*dim_gamba+5);
     p_quote.y   = dim_gamba + this.smOBJ.optionals.pedana.c-parseFloat(this.getDisplacements(etk_luce, true));
     //p_screen.x  = dim_gamba - larghezza_guida;
     p_screen.y  = dim_gamba + this.smOBJ.optionals.pedana.c-parseFloat(this.getDisplacements(etk_luce, true));
   }

 break;

 case 'BC':
   p_quote.y   = larghezza_guida+dim_gamba;
   p_quote.x   = this.getPostINFO(etk_post_ini).enabled?dim_gamba:0;
   p_screen.y  = larghezza_guida;
   p_screen.x  = this.getPostINFO(etk_post_ini).enabled?dim_gamba:0;
   if(etk_post_ini=='B'&&this.getPostINFO('B').enabled==false)
   {
     p_quote.x   = dim_gamba;
     p_screen.x  = dim_gamba;
   }

   if(etk_post_ini=='Cx0')
   {
     //console.log('dim_gamba: '+dim_gamba);
     etk_post_ini = 'C';
     //p_quote.y   = dim_gamba;//+5;
     p_quote.x   = dim_gamba+this.smOBJ.optionals.pedana.b-parseFloat(this.getDisplacements(etk_luce, true));
     //p_screen.y  = larghezza_guida;
     p_screen.x  = dim_gamba+this.smOBJ.optionals.pedana.b-parseFloat(this.getDisplacements(etk_luce, true));
   }

   if(etk_post_ini=='Bx0')
   {
     //console.log('dim_gamba: '+dim_gamba);
     etk_post_ini = 'B';
     //p_quote.y   = dim_gamba;//+5;
     p_quote.x   = -this.smOBJ.optionals.pedana.d;
     //p_screen.y  = larghezza_guida;
     p_screen.x  = -this.smOBJ.optionals.pedana.d;
   }

 break;

 case 'CD':
   p_quote.x   = dim_gamba+larghezza_guida;;
   p_quote.y   = this.getPostINFO(etk_post_ini).enabled?dim_gamba:0;
   p_screen.x  = larghezza_guida;
   p_screen.y  = this.getPostINFO(etk_post_ini).enabled?dim_gamba:0;
   if(etk_post_ini=='D'&&this.getPostINFO('D').enabled==false)
   {
     p_quote.y   = dim_gamba;
     p_screen.y  = dim_gamba;
   }

   if(etk_post_ini=='Dy0')
   {
     //console.log('dim_gamba: '+dim_gamba);
     etk_post_ini = 'D';
     //p_quote.x   =  -(0*dim_gamba+5);
     p_quote.y   = -this.smOBJ.optionals.pedana.a;
     //p_screen.x  = larghezza_guida;
     p_screen.y  = -this.smOBJ.optionals.pedana.a;
   }

   if(etk_post_ini=='Cy0')
   {
     //console.log('dim_gamba: '+dim_gamba);
     etk_post_ini = 'C';
     //p_quote.x   =  -(0*dim_gamba+5);
     p_quote.y   = dim_gamba + this.smOBJ.optionals.pedana.c-parseFloat(this.getDisplacements(etk_luce, true));
     //p_screen.x  = larghezza_guida;
     p_screen.y  = dim_gamba + this.smOBJ.optionals.pedana.c-parseFloat(this.getDisplacements(etk_luce, true));
   }

 break;

 case 'AD':
   p_quote.y   = parseFloat(dim_gamba-larghezza_guida-dim_gamba);
   p_quote.x   = this.getPostINFO(etk_post_ini).enabled?dim_gamba:0;
   p_screen.y  = parseFloat(dim_gamba-larghezza_guida);
   p_screen.x  = this.getPostINFO(etk_post_ini).enabled?dim_gamba:0;
   if(etk_post_ini=='A'&&this.getPostINFO('A').enabled==false)
   {
     p_quote.x   = dim_gamba;
     p_screen.x  = dim_gamba;
   }

   if(etk_post_ini=='Dx0')
   {
     //console.log('dim_gamba: '+dim_gamba);
     etk_post_ini = 'D';
     //p_quote.y   =  dim_gamba+5;
     p_quote.x   = dim_gamba+this.smOBJ.optionals.pedana.b-parseFloat(this.getDisplacements(etk_luce, true));
     //p_screen.y  = dim_gamba-larghezza_guida;
     p_screen.x  = dim_gamba+this.smOBJ.optionals.pedana.b-parseFloat(this.getDisplacements(etk_luce, true));
   }

   if(etk_post_ini=='Ax0')
   {
     //console.log('dim_gamba: '+dim_gamba);
     etk_post_ini = 'A';
     //p_quote.y   =  dim_gamba+5;
     p_quote.x   = -this.smOBJ.optionals.pedana.d;
     //p_screen.y  = dim_gamba-larghezza_guida;
     p_screen.x  = -this.smOBJ.optionals.pedana.d;
   }

 break;

}




if(this.checkIFglass(etk_luce)==true)
{
 


 this.lista_glass.push(          {lato:lato,
                                  pos:{y:parseFloat((this.getPostINFO(etk_post_ini).pos.y+p_screen.y)),
                                       x:parseFloat((this.getPostINFO(etk_post_ini).pos.x+p_screen.x))},
                                  disp: parseFloat(this.getDisplacements(etk_luce, true)),
                                  font: 0,
                                  etk: etk_luce});
}



}

disegna_vetrate_2D()
{
let sDis = '';
for(let i=0;i<this.lista_glass.length;i++)
{
  sDis += this.disegnaGLASSsemplice(this.lista_glass[i].lato,
                                    this.lista_glass[i].pos,
                                    this.lista_glass[i].disp ,
                                    0,
                                    this.lista_glass[i].etk).sDis;     
}
return sDis;
}

disegna_vetrate_3D(offset, rotazione, draw=false)
{
let sDis = '';
this.lista_pannelli_vetro = [];
for(let i=0;i<this.lista_glass.length;i++)
{
  if(this.checkIFglass(this.lista_glass[i].etk)==true)
  this.caricaPannelliper3D(this.lista_glass[i].lato,
                           this.lista_glass[i].pos,
                           this.lista_glass[i].disp ,
                           0,
                           this.lista_glass[i].etk);     
}
if(draw)
for(let i=0;i<this.lista_pannelli_vetro.length;i++)
{
  sDis += this.disegnaPannelloVetro3D(this.lista_pannelli_vetro[i], rotazione);
}

return sDis;
}

disegna_vetrate_3D_lato(lato, offset, rotazione)
{
let sDis = '';
let lista_lato = [];
let array_lato_a    = ['X2','X4','X6','XP1','XP2'];
let array_lato_b    = ['Y2','Y4','Y6','YP2','YA2'];
let array_lato_c    = ['X1','X3','X5','XA1','XA2'];
let array_lato_d    = ['Y1','Y3','Y4','YP1','YA1'];

switch (lato) {
  case 'AD':
    lista_lato = this.cloneMyObj(array_lato_a);
    break;
  case 'AB':
    lista_lato = this.cloneMyObj(array_lato_d);
    break;
  case 'BC':
    lista_lato = this.cloneMyObj(array_lato_c);
    break;
  case 'CD':
    lista_lato = this.cloneMyObj(array_lato_b);
    break;  

}
//console.log(lista_lato);

let lista = this.lista_pannelli_vetro.filter((el)=>{return lista_lato.includes(el.etk);});
for(let i=0;i<lista.length;i++)
{
   sDis += this.disegnaPannelloVetro3D(lista[i], rotazione);
}
return sDis;
}


disegnaGLASSsemplice(lato, pos, lunghezzaX, incrementoFont, etk_luce)
{
let lunghezza = parseFloat(lunghezzaX-0.2);

let fontSize = parseFloat(3+1*incrementoFont);
let offsetY  = parseFloat(3*fontSize);
let spessore = parseFloat(0.35);

//offsetY = (lato=='BC'||lato=='AB')?-1.51*offsetY:offsetY;
if(lato=='AD') offsetY  = -parseFloat(fontSize);
if(lato=='CD') offsetY  = -parseFloat(fontSize);
if(lato=='BC') offsetY  = +parseFloat(fontSize);
if(lato=='AB') offsetY  = +parseFloat(fontSize);


let sDis = '';
let gradi = 0;
if(lato=='AB') gradi = 90;
if(lato=='CD') gradi = 90;
sDis += '<g>';
//sDis += this.ScriviLabel(info.pos, etk, obj);
sDis += '<g transform="translate('+parseFloat(pos.x)+' '+parseFloat(pos.y)+')" ><g transform="scale('+1+')" ><g transform="rotate('+gradi+' 0 0)" > ';


let lunghezza_scalata = parseFloat(lunghezza);


if(this.checkIFglass(etk_luce)==true)
{
  // screen
  sDis += this.disegnaGLASS_HOR({x:0, y:0}, lunghezza_scalata, spessore, lato, etk_luce);

  // testo
  sDis += '<text font-family="'+FONT_FAMILY+'" x="'+parseFloat(lunghezza_scalata/2)+
          '" y="'+parseFloat(offsetY)+'"  alignment-baseline="middle"  text-anchor="middle" style="fill:SteelBlue; stroke:none;  font-size: '+
          fontSize+'px;"> '+etk_luce+' </text>';
}

sDis += '</g></g></g>';
sDis += '</g>';


let out = {};
out.sDis = sDis;
return out;
}

caricaPannelliper3D(lato, pos, lunghezza, incrementoFont, etk_luce)
{
 if(this.checkIFglass(etk_luce)==true)
 {
    let pannello = {};

    let ruota = false;
    if(lato=='AB' || lato=='CD') ruota = true;
    let info = this.lista_vetrate.filter((el)=>{return el.name==etk_luce})[0]
    let larghezza_guida = this.getLarghezzaGuidaVetrata(etk_luce);

    // vetri
    let apertura_cent   = false;
    let sovrapposizione = 2;
    let n_vetri         = info.n_threads;
    let larghezza_vetri = parseFloat(lunghezza)/n_vetri;
    let ini_thread      = parseFloat(larghezza_guida/(info.n_threads+1))/2;

    if(larghezza_vetri>120)
    {
      apertura_cent   = true;
      n_vetri         = 2*info.n_threads;
      larghezza_vetri = parseFloat(lunghezza)/n_vetri;
    }

    let ini_vetri   = 0;

    for(let i=0;i<info.n_threads; i++)
    {
      //let vetro = (i==0)?(larghezza_vetri+0*1):larghezza_vetri;
      let vetro = larghezza_vetri+sovrapposizione/2;
      if(i>0 && i<info.n_threads-1) vetro += sovrapposizione/2;

      pannello.pos = {};
      pannello.pos.rif = this.cloneMyObj(pos);
      if(ruota==false)
      {
        pannello.pos.ini = {x:parseFloat(pos.x+ini_vetri),        y:parseFloat(pos.y+ini_thread+2*i*ini_thread)};
        pannello.pos.end = {x:parseFloat(pos.x+ini_vetri+vetro),  y:parseFloat(pos.y+ini_thread+2*i*ini_thread)};
      }
      else
      {
        pannello.pos.ini = {y:parseFloat(pos.y+ini_vetri),        x:parseFloat(pos.x+ini_thread+2*i*ini_thread)};
        pannello.pos.end = {y:parseFloat(pos.y+ini_vetri+vetro),  x:parseFloat(pos.x+ini_thread+2*i*ini_thread)};
      }
      pannello.etk = etk_luce;
      this.lista_pannelli_vetro.push(this.cloneMyObj(pannello));

     
      ini_vetri    += vetro-sovrapposizione;
    }

    if(apertura_cent==true)
    {
      ini_vetri   = 0;
      for(let i=0;i<info.n_threads; i++)
      {
        let vetro = larghezza_vetri+sovrapposizione/2;
        if(i>0 && i<info.n_threads-1) vetro += sovrapposizione/2;

        pannello.pos = {};
        pannello.pos.rif = this.cloneMyObj(pos);

        if(ruota==false)
        {
          pannello.pos.ini = {x:parseFloat(pos.x+lunghezza-ini_vetri),        y:parseFloat(pos.y+ini_thread+2*i*ini_thread)};
          pannello.pos.end = {x:parseFloat(pos.x+lunghezza-ini_vetri-vetro),  y:parseFloat(pos.y+ini_thread+2*i*ini_thread)};
        }
        else
        {
          pannello.pos.ini = {y:parseFloat(pos.y+lunghezza-ini_vetri),        x:parseFloat(pos.x+ini_thread+2*i*ini_thread)};
          pannello.pos.end = {y:parseFloat(pos.y+lunghezza-ini_vetri-vetro),  x:parseFloat(pos.x+ini_thread+2*i*ini_thread)};
        }
        pannello.etk = etk_luce;
        this.lista_pannelli_vetro.push(this.cloneMyObj(pannello));  
        ini_vetri    += vetro-sovrapposizione;
      }
    }

 }
}

disegnaGLASS_HOR(pos, lunghezza, spessore, lato, etk_luce)
{
  spessore = 1.2;
  let info = this.lista_vetrate.filter((el)=>{return el.name==etk_luce})[0]
  let larghezza_guida = this.getLarghezzaGuidaVetrata(etk_luce);

  let offsetY = (lato=='BC'||lato=='AB')?-larghezza_guida:0;

  let sDis = '';
  sDis += '<g transform="translate('+parseFloat(pos.x)+' '+parseFloat(pos.y+offsetY)+')" >';

  let coloreGuida   = "white"; //"SteelBlue"; //(lato=='AB'||lato=='BC')?"green":"red";

  // linee threads
  let ini_thread = parseFloat(larghezza_guida/(info.n_threads+1))/2;

  for(let i=0;i<info.n_threads; i++)
     sDis += '<line x1="'+0+'" y1="'+parseFloat(ini_thread+2*i*ini_thread)+
                 '" x2="'+parseFloat(lunghezza)+'" y2="'+parseFloat(ini_thread+2*i*ini_thread)+
                 '" style="stroke:white;stroke-width:'+1*spessore+'" />';
  // vetri
  let apertura_cent   = false;
  let sovrapposizione = 2;
  let n_vetri         = info.n_threads;
  let larghezza_vetri = parseFloat(lunghezza)/n_vetri;

  if(larghezza_vetri>120)
  {
    apertura_cent   = true;
    n_vetri         = 2*info.n_threads;
    larghezza_vetri = parseFloat(lunghezza)/n_vetri;
  }

  let ini_vetri   = 0;

  for(let i=0;i<info.n_threads; i++)
  {
    //let vetro = (i==0)?(larghezza_vetri+0*1):larghezza_vetri;
    let vetro = larghezza_vetri+sovrapposizione/2;
    if(i>0 && i<info.n_threads-1) vetro += sovrapposizione/2;


    sDis += '<line x1="'+parseFloat(ini_vetri)+'" y1="'+parseFloat(ini_thread+2*i*ini_thread)+
                '" x2="'+parseFloat(ini_vetri+vetro)+'" y2="'+parseFloat(ini_thread+2*i*ini_thread)+
                '" style="stroke:blue;stroke-width:'+2*spessore+'" />';
    ini_vetri    += vetro-sovrapposizione;
  }

  if(apertura_cent==true)
  {
    ini_vetri   = 0;
    for(let i=0;i<info.n_threads; i++)
    {
      let vetro = larghezza_vetri+sovrapposizione/2;
      if(i>0 && i<info.n_threads-1) vetro += sovrapposizione/2;
      sDis += '<line x1="'+parseFloat(lunghezza-ini_vetri)+'" y1="'+parseFloat(ini_thread+2*i*ini_thread)+
                  '" x2="'+parseFloat(lunghezza-ini_vetri-vetro)+'" y2="'+parseFloat(ini_thread+2*i*ini_thread)+
                  '" style="stroke:blue;stroke-width:'+2*spessore+'" />';
      ini_vetri    += vetro-sovrapposizione;
    }
  }




//sDis += '<rect width="'+parseFloat(lunghezza)+'" height="'+parseFloat(larghezza_guida)+'" x="0" y="0" rx="1" ry="1" fill="blue" />';

let array_posizioni = ['X1', 'X3', 'X5', 'XA1', 'XA2',
                       'Y1', 'Y3', 'Y5', 'YA1', 'YP1'];


let array_lato_a    = ['X2','X4','X6','XP1','XP2'];
let array_lato_b    = ['Y2','Y4','Y6','YP2','YA2'];
let array_lato_c    = ['X1','X3','X5','XA1','XA2'];
let array_lato_d    = ['Y1','Y3','Y4','YP1','YA1'];

let lato_sp         = 1.6;
let tipo_vaschetta  = 'VASCHETTA TIPO 2';

if(array_lato_a.includes(etk_luce) && this.smOBJ.optionals.pedana.a==0||
   array_lato_b.includes(etk_luce) && this.smOBJ.optionals.pedana.b==0||
   array_lato_c.includes(etk_luce) && this.smOBJ.optionals.pedana.c==0||
   array_lato_d.includes(etk_luce) && this.smOBJ.optionals.pedana.d==0
 )
 {
   lato_sp         = 1.1;
   tipo_vaschetta  = 'VASCHETTA TIPO 1';
 }



    sDis += '<rect x="0" y="0" width="'+parseFloat(lunghezza)+'" height="'+parseFloat(larghezza_guida)+
            '" fill="'+coloreGuida+'" stroke="none" stroke-width="'+spessore+'"  fill-opacity="0.2" />';

    if(array_posizioni.includes(etk_luce))
    {
      sDis += '<rect x="0" y="'+parseFloat(-1.6)+'" width="'+parseFloat(lunghezza)+'" height="'+parseFloat(1.6)+
              '" fill="'+coloreGuida+'" stroke="none" stroke-width="'+spessore+'"  fill-opacity="0.2" />';

      sDis += '<rect x="0" y="'+parseFloat(larghezza_guida)+'" width="'+parseFloat(lunghezza)+'" height="'+parseFloat(lato_sp)+
              '" fill="'+coloreGuida+'" stroke="none" stroke-width="'+spessore+'"  fill-opacity="0.2" />';
    }
    else
    {
      sDis += '<rect x="0" y="'+parseFloat(-lato_sp)+'" width="'+parseFloat(lunghezza)+'" height="'+parseFloat(lato_sp)+
              '" fill="'+coloreGuida+'" stroke="none" stroke-width="'+spessore+'"  fill-opacity="0.2" />';

      sDis += '<rect x="0" y="'+parseFloat(larghezza_guida)+'" width="'+parseFloat(lunghezza)+'" height="'+parseFloat(1.6)+
              '" fill="'+coloreGuida+'" stroke="none" stroke-width="'+spessore+'"  fill-opacity="0.2" />';
    }

this.lista_vaschette.push({name: tipo_vaschetta, etk: etk_luce, lunghezza:lunghezza, n_threads:info.n_threads});    

sDis += '</g>';;
return sDis;
}

DisegnaLattoneria(obj)
{

//console.log(obj);
let H_pavimento = parseFloat(this.smOBJ.optionals.pedana.floor.T);
if(H_pavimento>2.5) H_pavimento = 2.5;
if(H_pavimento<2.0) H_pavimento = 2.0;

let out         = {sDis:'', H:100, W:200};

let vasca       = parseFloat(0.4+2*obj.n_threads);
let becco       = {x:1.1, y:1.2};
let coda        = 1.6;

let spessore_lamiera = 0.12;




//console.log(obj);

let dp          = {s: spessore_lamiera,
                   ri: 0.1,
                   v: parseFloat(H_pavimento+0.2+spessore_lamiera),
                   vn:parseFloat(H_pavimento+0.2),

                   h: vasca,
                   re:function(){return this.ri+this.s},
                   v1:function(){return parseFloat(becco.y-this.re());},
                   h1:function(){return (obj.name=='VASCHETTA TIPO 2')?parseFloat(coda-this.re()):parseFloat(becco.x-2*this.re());},

                   v2:function(){return (obj.name!=='VASCHETTA TIPO 2')?parseFloat(this.vn-this.re()-this.ri-this.s):parseFloat(this.v-this.re()-this.ri-this.s);},

                   h2:function(){return parseFloat(this.h-2*this.ri);},

                   v3:function(){return (obj.name!=='VASCHETTA TIPO 2')?parseFloat(this.v2()+this.s):parseFloat(this.v2());},
                   h3:function(){return parseFloat(coda-this.re());},
                   h4:function(){return parseFloat(this.h3()+this.re()-this.ri-this.s);},
                   v4:function(){return parseFloat(this.v3());},
                   h5:function(){return parseFloat(this.h2());},
                   v5:function(){return (obj.name!=='VASCHETTA TIPO 2')?parseFloat(this.v4()-this.s):parseFloat(this.v4());},
                   h6:function(){return parseFloat(this.h1());},
                   v6:function(){return parseFloat(this.v1()+this.re()-this.s-this.ri);},

                 }

out.H = dp.v;

if(obj.name=='VASCHETTA TIPO 2')
{
  out.W = parseFloat(dp.h1()+dp.re()+dp.ri+dp.h2()+dp.ri+dp.re()+dp.h3());
  out.sDis += ' <path d="M0 -'+parseFloat(dp.v);
}
else
{
  out.W = parseFloat(dp.re()+dp.h1()+dp.re()+dp.ri+dp.h2()+dp.ri+dp.re()+dp.h3());
  out.sDis += ' <path d="M0 -'+parseFloat(dp.vn-dp.v1()-dp.re());
  out.sDis += 'v0 '+parseFloat(-dp.v1()) + ' ';
  out.sDis += 'a'+ parseFloat(dp.re())+ ' ' + parseFloat(dp.re()) + ', 0, 0, 1, '+ parseFloat(dp.re())+ ' ' + parseFloat(-dp.re());
}







out.sDis += 'l'+ parseFloat(dp.h1())+ ' ' + parseFloat(0);
out.sDis += 'a'+ parseFloat(dp.re())+ ' ' + parseFloat(dp.re()) + ', 0, 0, 1, '+ parseFloat(dp.re())+ ' ' + parseFloat(dp.re());
out.sDis += 'v'+ parseFloat(0)+ ' ' + parseFloat(dp.v2());
out.sDis += 'a'+ parseFloat(dp.ri)+ ' ' + parseFloat(dp.ri) + ', 0, 0, 0, '+ parseFloat(dp.ri)+ ' ' + parseFloat(dp.ri);

out.sDis += 'l'+ parseFloat(dp.h2())+ ' ' + parseFloat(0);
out.sDis += 'a'+ parseFloat(dp.ri)+ ' ' + parseFloat(dp.ri) + ', 0, 0, 0, '+ parseFloat(dp.ri)+ ' ' + parseFloat(-dp.ri);

out.sDis += 'v'+ parseFloat(0)+ ' ' + parseFloat(-dp.v3());
out.sDis += 'a'+ parseFloat(dp.re())+ ' ' + parseFloat(dp.re()) + ', 0, 0, 1, '+ parseFloat(dp.re())+ ' ' + parseFloat(-dp.re());
out.sDis += 'l'+ parseFloat(dp.h3())+ ' ' + parseFloat(0);
out.sDis += 'v'+ parseFloat(0)+ ' ' + parseFloat(dp.s);
out.sDis += 'l'+ parseFloat(-dp.h4())+ ' ' + parseFloat(0);
out.sDis += 'a'+ parseFloat(dp.ri)+ ' ' + parseFloat(dp.ri) + ', 0, 0, 0, '+ parseFloat(-dp.ri)+ ' ' + parseFloat(dp.ri);
out.sDis += 'v'+ parseFloat(0)+ ' ' + parseFloat(dp.v4());

out.sDis += 'a'+ parseFloat(dp.re())+ ' ' + parseFloat(dp.re()) + ', 0, 0, 1, '+ parseFloat(-dp.re())+ ' ' + parseFloat(dp.re());

out.sDis += 'l'+ parseFloat(-dp.h5())+ ' ' + parseFloat(0);

out.sDis += 'a'+ parseFloat(dp.re())+ ' ' + parseFloat(dp.re()) + ', 0, 0, 1, '+ parseFloat(-dp.re())+ ' ' + parseFloat(-dp.re());
out.sDis += 'v'+ parseFloat(0)+ ' ' + parseFloat(-dp.v5());
out.sDis += 'a'+ parseFloat(dp.ri)+ ' ' + parseFloat(dp.ri) + ', 0, 0, 0, '+ parseFloat(-dp.ri)+ ' ' + parseFloat(-dp.ri);
out.sDis += 'l'+ parseFloat(-dp.h6())+ ' ' + parseFloat(0);

if(obj.name!=='VASCHETTA TIPO 2')
{
  out.sDis += 'a'+ parseFloat(dp.ri)+ ' ' + parseFloat(dp.ri) + ', 0, 0, 0, '+ parseFloat(-dp.ri)+ ' ' + parseFloat(dp.ri);
  out.sDis += 'v'+ parseFloat(0)+ ' ' + parseFloat(dp.v6());
}



out.sDis += ' Z"';
out.sDis += ' style="fill:none;stroke:black;stroke-width:0.02" />';

// quote orizzontali superiori
let offset  = 0.51;
let quote   = {h_a:parseFloat(dp.v+offset), h_b:parseFloat(-offset)};

let tmp_lung    = (obj.name=='VASCHETTA TIPO 2')?parseFloat(dp.re()+dp.h1()):parseFloat(2*dp.re()+dp.h1());
let integratore = 0;
out.sDis        += this.disegna_quota_lattoneria({x:integratore, y:-quote.h_a}, 0, {scala:0.1, lunghezza:10*tmp_lung, testo_quota:''});
integratore     += tmp_lung;

tmp_lung        = parseFloat(dp.h);
out.sDis        += this.disegna_quota_lattoneria({x:integratore, y:-quote.h_a}, 0, {scala:0.1, lunghezza:10*tmp_lung, testo_quota:''});
integratore     += tmp_lung;

tmp_lung        = parseFloat(dp.h3()+dp.re());
out.sDis        += this.disegna_quota_lattoneria({x:integratore, y:-quote.h_a}, 0, {scala:0.1, lunghezza:10*tmp_lung, testo_quota:''});
integratore     += tmp_lung;


// quote orizzontali superiori
integratore     = 0;
if(obj.name!=='VASCHETTA TIPO 2')
{
  integratore   = dp.s;
  tmp_lung      = parseFloat(2*dp.ri+dp.h6());
}
else
{
  tmp_lung      = parseFloat(dp.ri+dp.h6());
}
out.sDis        += this.disegna_quota_lattoneria({x:integratore, y:-quote.h_b}, 0, {scala:0.1, lunghezza:10*tmp_lung, testo_quota:''});
integratore     += tmp_lung;

tmp_lung        = parseFloat(dp.h5()+2*dp.re());
out.sDis        += this.disegna_quota_lattoneria({x:integratore, y:-quote.h_b}, 0, {scala:0.1, lunghezza:10*tmp_lung, testo_quota:''});
integratore     += tmp_lung;

tmp_lung        = parseFloat(dp.h4()+dp.ri);
out.sDis        += this.disegna_quota_lattoneria({x:integratore, y:-quote.h_b}, 0, {scala:0.1, lunghezza:10*tmp_lung, testo_quota:''});
integratore     += tmp_lung;


// quote verticali a sinistra
if(obj.name!=='VASCHETTA TIPO 2')
{
  tmp_lung        = parseFloat(dp.v1()+dp.re());
  out.sDis        += this.disegna_quota_lattoneria({x:-offset, y:parseFloat(-dp.vn+tmp_lung)}, -90, {scala:0.1, lunghezza:10*tmp_lung, testo_quota:''});

  tmp_lung        = parseFloat(dp.vn);
  out.sDis        += this.disegna_quota_lattoneria({x:-2*offset, y:parseFloat(0)}, -90, {scala:0.1, lunghezza:10*tmp_lung, testo_quota:''});
}
else
{
  tmp_lung        = parseFloat(dp.v-dp.s);
  out.sDis        += this.disegna_quota_lattoneria({x:-offset, y:parseFloat(0)}, -90, {scala:0.1, lunghezza:10*tmp_lung, testo_quota:''});
}

tmp_lung        = parseFloat(dp.v-dp.s);
out.sDis        += this.disegna_quota_lattoneria({x:parseFloat(out.W+offset), y:parseFloat(0)}, -90, {scala:0.1, lunghezza:10*tmp_lung, testo_quota:''});



///////// proiezione
let pos_proiezione_y    = 9*offset;
let altezza_rettangolo  = 5*offset;



if(obj.name=='VASCHETTA TIPO 2')
{
  out.sDis     += '<rect x="0" y="'+parseFloat(pos_proiezione_y-altezza_rettangolo)+
                  '" width="'+parseFloat(dp.h1()+dp.re())+'" height="'+altezza_rettangolo+'"  style="fill:white;stroke-width:0.02;stroke:black" />';
  integratore  =  parseFloat(dp.h1()+dp.re());

}
else
{
  out.sDis     += '<rect x="0" y="'+parseFloat(pos_proiezione_y-altezza_rettangolo)+
                  '" width="'+parseFloat(dp.h1()+2*dp.re())+'" height="'+altezza_rettangolo+'"  style="fill:white;stroke-width:0.02;stroke:black" />';
  integratore  =  parseFloat(dp.h1()+2*dp.re());

  out.sDis     += '<line x1="'+parseFloat(dp.s)+'" y1="'+parseFloat(pos_proiezione_y-altezza_rettangolo)+
                      '" x2="'+parseFloat(dp.s)+'" y2="'+parseFloat(pos_proiezione_y)+
                      '" style="fill:white;stroke-width:0.02;stroke:black" stroke-dasharray="0.01 0.02 0.01" />';
}

out.sDis     += '<rect x="'+parseFloat(integratore)+'" y="'+parseFloat(pos_proiezione_y-altezza_rettangolo)+
                '" width="'+parseFloat(dp.h)+'" height="'+altezza_rettangolo+'"  style="fill:white;stroke-width:0.02;stroke:black" />';
out.sDis     += '<line x1="'+parseFloat(integratore-dp.s)+'" y1="'+parseFloat(pos_proiezione_y-altezza_rettangolo)+
                    '" x2="'+parseFloat(integratore-dp.s)+'" y2="'+parseFloat(pos_proiezione_y)+
                    '" style="fill:white;stroke-width:0.02;stroke:black" stroke-dasharray="0.01 0.02 0.01" />';


integratore  +=  parseFloat(dp.h);
out.sDis     += '<rect x="'+parseFloat(integratore)+'" y="'+parseFloat(pos_proiezione_y-altezza_rettangolo)+
                                '" width="'+parseFloat(dp.h3()+dp.re())+'" height="'+altezza_rettangolo+'"  style="fill:white;stroke-width:0.02;stroke:black" />';
out.sDis     += '<line x1="'+parseFloat(integratore+dp.s)+'" y1="'+parseFloat(pos_proiezione_y-altezza_rettangolo)+
                    '" x2="'+parseFloat(integratore+dp.s)+'" y2="'+parseFloat(pos_proiezione_y)+
                    '" style="fill:white;stroke-width:0.02;stroke:black" stroke-dasharray="0.01 0.02 0.01" />';


///
out.sDis     += '<rect x="'+parseFloat(-offset)+'" y="'+parseFloat(pos_proiezione_y-altezza_rettangolo/2-altezza_rettangolo/15)+
                '" width="'+parseFloat(out.W+2*offset)+'" height="'+parseFloat(2*altezza_rettangolo/15)+'"  style="fill:white;stroke-width:0.02;stroke:white" />';



tmp_lung        = parseFloat(altezza_rettangolo);
out.sDis        += this.disegna_quota_lattoneria({x:parseFloat(-offset), y:parseFloat(pos_proiezione_y)}, -90, {scala:0.1, lunghezza:10*tmp_lung, testo_quota:obj.lunghezza});

/////
pos_proiezione_y+= 4*offset;

out.sDis        += '<text alignment-baseline="middle"  text-anchor="middle" x="'+out.W/2+'" y="'+pos_proiezione_y+'" style="fill:black; stroke:none;  font-size:0.51" >lunghezza: '+obj.lunghezza+'mm</text>';
out.sDis        += '<text alignment-baseline="middle"  text-anchor="middle" x="'+out.W/2+'" y="'+parseFloat(pos_proiezione_y+1.51*offset)+'" style="fill:black; stroke:none;  font-size:0.51" >spessore: '+spessore_lamiera*10+'mm</text>';


return out;
}

disegnaLINEAperQUOTA_Lattoneria(pos, lunghezza, dimensioni, spessore)
{

let lato_freccia = {dx:parseFloat(0.2), dy:parseFloat(0.1)};



let sDis = '';
sDis += '<g transform="translate('+parseFloat(pos.x)+' '+parseFloat(pos.y)+')" >';

sDis += '<line x1="0" y1="0" x2="'+parseFloat(lato_freccia.dx)+'" y2="'+parseFloat(lato_freccia.dy)+'" style="stroke:blue;stroke-width:'+spessore+'" />';
sDis += '<line x1="0" y1="0" x2="'+parseFloat(lato_freccia.dx)+'" y2="'+parseFloat(-lato_freccia.dy)+'" style="stroke:blue;stroke-width:'+spessore+'" />';

sDis += '<line x1="'+parseFloat(lunghezza)+'" y1="0" x2="'+parseFloat(lunghezza-lato_freccia.dx)+'" y2="'+parseFloat(lato_freccia.dy)+'" style="stroke:blue;stroke-width:'+spessore+'" />';
sDis += '<line x1="'+parseFloat(lunghezza)+'" y1="0" x2="'+parseFloat(lunghezza-lato_freccia.dx)+'" y2="'+parseFloat(-lato_freccia.dy)+'" style="stroke:blue;stroke-width:'+spessore+'" />';

sDis += '<line x1="0" y1="0" x2="'+parseFloat(lunghezza)+'" y2="0" style="stroke:blue;stroke-width:'+spessore+'" />';

sDis += '</g>';
return sDis;
}


disegna_quota_lattoneria(pos, gradi, info)
{
let fontSize = parseFloat(0.2);
let offsetY  = parseFloat(0.51*fontSize);
let spessore = parseFloat(0.015);

let sDis = '';
sDis += '<g>';
//sDis += this.ScriviLabel(info.pos, etk, obj);
sDis += '<g transform="translate('+parseFloat(pos.x)+' '+parseFloat(pos.y)+')" ><g transform="scale('+1+')" ><g transform="rotate('+gradi+' 0 0)" > ';

info.lunghezza = parseInt(info.lunghezza*10)/10;
let lunghezza_scalata = parseFloat(info.lunghezza*info.scala);
// linea con frecce
sDis += this.disegnaLINEAperQUOTA_Lattoneria({x:0, y:0}, lunghezza_scalata, 0, spessore);

// testo quota
if(info.testo_quota=='')
  sDis += '<text font-family="'+FONT_FAMILY+'" x="'+parseFloat(lunghezza_scalata/2)+'" y="'+parseFloat(-offsetY)+'"  alignment-baseline="middle"  text-anchor="middle" style="fill:blue; stroke:none;  font-size: '+fontSize+'px;"> '+info.lunghezza+' </text>';
else
  sDis += '<text font-family="'+FONT_FAMILY+'" x="'+parseFloat(lunghezza_scalata/2)+'" y="'+parseFloat(-offsetY)+'"  alignment-baseline="middle"  text-anchor="middle" style="fill:blue; stroke:none;  font-size: '+fontSize+'px;"> '+info.testo_quota+' </text>';

// barre inizio e fine
sDis += '<line x1="0" y1="'+parseFloat(-5*offsetY)+'" x2="'+parseFloat(0)+'" y2="'+parseFloat(5*offsetY)+'" style="stroke:gray;stroke-width:'+parseFloat(spessore/2)+'" />';
sDis += '<line x1="'+parseFloat(lunghezza_scalata)+'" y1="'+parseFloat(-5*offsetY)+'" x2="'+parseFloat(lunghezza_scalata)+'" y2="'+parseFloat(5*offsetY)+'" style="stroke:gray;stroke-width:'+parseFloat(spessore/2)+'" />';

sDis += '</g></g></g>';
sDis += '</g>';

return sDis;
}






////////////////////////////////////////////////////////////////////////////////////////////////////
















  init_grafica(){
      let out = {};
      try {
     
      //let Hpergola = this.smOBJ.dimensioni.nominali.sporgenza+this.offset.a+this.offset.c;
      //let Lpergola = this.smOBJ.dimensioni.nominali.larghezza+this.offset.b+this.offset.d;

      let Hpergola = parseFloat(this.getInfoNodo('A1').nodo.posizione.y-this.getInfoNodo('P1').nodo.posizione.y+this.offset.a+this.offset.c);
      let Lpergola = parseFloat(this.getInfoNodo('P2').nodo.posizione.x-this.getInfoNodo('P1').nodo.posizione.x+this.offset.b+this.offset.d);


      let Lbox = 200;
      let Hbox   = Lbox*350.8/248; // proporzione per foglio A4
      const Hmax = parseFloat(0.55*Hbox); // limiti grafici pergola
      const Lmax = parseFloat(0.65*Lbox); // limiti grafici pergola
      let scala     = 1;
      let min_scala = 9;

      scala = (parseFloat(Hmax/Hpergola)<min_scala)?parseFloat(Hmax/Hpergola):min_scala; // provo a sistemare prima la parte verticale
      if(parseFloat(Lpergola*scala)>Lmax) scala *= parseFloat(Lmax/parseFloat(Lpergola*scala));

      let startPoint = {x:parseFloat((Lbox-Lpergola*scala)/2+this.offset.d*scala), 
                        y:parseFloat((Hbox-Hpergola*scala)/2+this.offset.a*scala)};

      
      out.scala       = scala;
      out.startPoint  = startPoint;
      out.dimMAX      = {h:Hpergola, w:Lpergola};

      let offset      = {dx: 0, dy:0, x:0, y:0};
      // accoppiamento tipo 1
      if(this.checkTop('A', 5)&& this.checkTop('B', 6)) 
      {
          offset.dx   = parseFloat(0);
          offset.x    = parseFloat(this.getInfoNodo('P1').nodo.posizione.x);
      }

      if(this.checkTop('A', 7)&& this.checkTop('D', 8)) 
      {
          offset.dx   = parseFloat(0);
          offset.x    = parseFloat(0);
      }



      out.rettangolo_interno = {  point: {x:parseFloat(0+offset.x), 
                                          y:parseFloat(0+offset.y)},
                                  w:     parseFloat(this.getInfoNodo('P2').nodo.posizione.x-this.getInfoNodo('P1').nodo.posizione.x+offset.dx),
                                  h:     parseFloat(this.getInfoNodo('A1').nodo.posizione.y-this.getInfoNodo('P1').nodo.posizione.y+offset.dy)   
                               };
      
      out.rettangolo_esterno = {  point: {x:parseFloat(-this.offset.d+offset.x), 
                                          y:parseFloat(-this.offset.a+offset.y)},
                                  w:     parseFloat(this.getInfoNodo('P2').nodo.posizione.x-this.getInfoNodo('P1').nodo.posizione.x+this.offset.b+this.offset.d+offset.dx),
                                  h:     parseFloat(this.getInfoNodo('A1').nodo.posizione.y-this.getInfoNodo('P1').nodo.posizione.y+this.offset.a+this.offset.c+offset.dy)   
                               };
                               
                               
      out.piano              = {}
      out.piano.vertici      = {vP1:{x:parseFloat(-this.offset.d+offset.x), 
                                   y:parseFloat(-this.offset.a+offset.y),
                                   z:-parseFloat(this.smOBJ.optionals.pedana.dislivelli.zP1)
                                  },
                                vA1:{x:parseFloat(-this.offset.d+offset.x), 
                                   y:parseFloat(this.getInfoNodo('A1').nodo.posizione.y+this.offset.c+offset.dy),
                                   z:-parseFloat(this.smOBJ.optionals.pedana.dislivelli.zA1)},
                                vA2:{x:parseFloat(this.getInfoNodo('A2').nodo.posizione.x+this.offset.b+offset.dx), 
                                   y:parseFloat(this.getInfoNodo('A1').nodo.posizione.y+this.offset.c+offset.dy),
                                   z:-parseFloat(this.smOBJ.optionals.pedana.dislivelli.zA2)},
                                vP2:{x:parseFloat(this.getInfoNodo('P2').nodo.posizione.x+this.offset.b+offset.dx), 
                                   y:parseFloat(this.getInfoNodo('P1').nodo.posizione.y-this.offset.a+offset.dy),
                                   z:-parseFloat(this.smOBJ.optionals.pedana.dislivelli.zP2)}                      
                              }

      out.piano.vertici.vP1.etk = this.lista_nodi.filter((el)=>{return el.posizione.x==out.piano.vertici.vP1.x && el.posizione.y==out.piano.vertici.vP1.y;})[0].etk;
      out.piano.vertici.vP2.etk = this.lista_nodi.filter((el)=>{return el.posizione.x==out.piano.vertici.vP2.x && el.posizione.y==out.piano.vertici.vP2.y;})[0].etk;
      out.piano.vertici.vA1.etk = this.lista_nodi.filter((el)=>{return el.posizione.x==out.piano.vertici.vA1.x && el.posizione.y==out.piano.vertici.vA1.y;})[0].etk;
      out.piano.vertici.vA2.etk = this.lista_nodi.filter((el)=>{return el.posizione.x==out.piano.vertici.vA2.x && el.posizione.y==out.piano.vertici.vA2.y;})[0].etk;                        


      ///////////////////////////////////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////////////////////////////////                         
      // per quote iniziali
      let step = {righe: 10/scala, colonne: 10/scala};

      let quote = [];
      ////////// hor
      quote.push(this.creaQuoteEsterne('totale hor', 
                   {x:parseFloat(this.getInfoNodo('EP1').nodo.posizione.x+offset.x), y:parseFloat(this.getInfoNodo('EP1').nodo.posizione.y+offset.y)},
                   {x:parseFloat(this.getInfoNodo('EP2').nodo.posizione.x+offset.dx), y:parseFloat(this.getInfoNodo('EP2').nodo.posizione.y+offset.y)},
                   {x: 0, y: -1*step.righe}
                  ));     
                  
      quote.push(this.creaQuoteEsterne('sub d hor', 
              {x:parseFloat(this.getInfoNodo('EA1').nodo.posizione.x+offset.x), y:parseFloat(this.getInfoNodo('EA1').nodo.posizione.y+offset.y)},
              {x:parseFloat(this.getInfoNodo('A1c').nodo.posizione.x+offset.dx), y:parseFloat(this.getInfoNodo('A1c').nodo.posizione.y+offset.y)},
              {x: 0, y: 1*step.righe}
          ));  
          
      quote.push(this.creaQuoteEsterne('sub W hor', 
              {x:parseFloat(this.getInfoNodo('A1c').nodo.posizione.x+offset.x), y:parseFloat(this.getInfoNodo('A1c').nodo.posizione.y+offset.y)},
              {x:parseFloat(this.getInfoNodo('A2c').nodo.posizione.x+offset.dx), y:parseFloat(this.getInfoNodo('A2c').nodo.posizione.y+offset.y)},
              {x: 0, y: 1*step.righe}
          )); 
          
      quote.push(this.creaQuoteEsterne('sub b hor', 
              {x:parseFloat(this.getInfoNodo('A2c').nodo.posizione.x+offset.x), y:parseFloat(this.getInfoNodo('A2c').nodo.posizione.y+offset.y)},
              {x:parseFloat(this.getInfoNodo('EA2').nodo.posizione.x+offset.dx), y:parseFloat(this.getInfoNodo('EA2').nodo.posizione.y+offset.y)},
              {x: 0, y: 1*step.righe}
          )); 
          
      ////////// ver
      quote.push(this.creaQuoteEsterne('totale ver', 
                   {x:parseFloat(this.getInfoNodo('EP2').nodo.posizione.x+offset.x), y:parseFloat(this.getInfoNodo('EP2').nodo.posizione.y+offset.y)},
                   {x:parseFloat(this.getInfoNodo('EA2').nodo.posizione.x+offset.dx), y:parseFloat(this.getInfoNodo('EA2').nodo.posizione.y+offset.y)},
                   {x:1*step.colonne, y:0}
                  ));  
                  
      quote.push(this.creaQuoteEsterne('sub a ver', 
              {x:parseFloat(this.getInfoNodo('EP1').nodo.posizione.x+offset.x), 
                  y:parseFloat(this.getInfoNodo('EP1').nodo.posizione.y+offset.y)},
              {x:parseFloat(this.getInfoNodo('P1d').nodo.posizione.x+offset.dx), 
                  y:parseFloat(this.getInfoNodo('P1d').nodo.posizione.y+offset.y)},
              {x: -1*step.righe, y:0}
          ));  
          
      quote.push(this.creaQuoteEsterne('sub H ver', 
              {x:parseFloat(this.getInfoNodo('P1d').nodo.posizione.x+offset.x), 
                  y:parseFloat(this.getInfoNodo('P1d').nodo.posizione.y+offset.y)},
              {x:parseFloat(this.getInfoNodo('A1d').nodo.posizione.x+offset.dx), 
                  y:parseFloat(this.getInfoNodo('A1d').nodo.posizione.y+offset.y)},
              {x: -1*step.righe, y: 0}
          )); 
          
      quote.push(this.creaQuoteEsterne('sub c ver', 
              {x:parseFloat(this.getInfoNodo('A1d').nodo.posizione.x+offset.x), 
                  y:parseFloat(this.getInfoNodo('A1d').nodo.posizione.y+offset.y)},
              {x:parseFloat(this.getInfoNodo('EA1').nodo.posizione.x+offset.dx), 
                  y:parseFloat(this.getInfoNodo('EA1').nodo.posizione.y+offset.y)},
              {x: -1*step.righe, y: 0}
          )); 

      
     

      out.lista_SVG  = [];
      

      out.viewVector = { x: -1000, y: -1000, z: 100 };
      out.quote = this.cloneMyObj(quote);
      } catch (error) {
        console.log(error);
      }
      return out;
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  getPlaneEquationFromThreePoints_old(p1, p2, p3) {
    let out   = {};
    out.plane     = {};
    out.v         = {}; 
    out.dist_max  = 0;

    // sono sempre vertici di un quadrato, cerco il vertice tra due lati in comune
    let v = {};
    if(p1.x==p2.x&&p1.y==p3.y) v = p1;
    if(p1.x==p3.x&&p1.y==p2.y) v = p1;
        
    if(p2.x==p3.x&&p2.y==p1.y) v = p2;
    if(p2.x==p1.x&&p2.y==p3.y) v = p2;

    if(p3.x==p1.x&&p3.y==p2.y) v = p3; 
    if(p3.x==p2.x&&p3.y==p1.y) v = p3; 
    
    // distanza massima concessa
    let vertici = {};
    if(JSON.stringify(v)==JSON.stringify(p1)) vertici = {v1:this.cloneMyObj(p2), v2:this.cloneMyObj(p3)};
    if(JSON.stringify(v)==JSON.stringify(p2)) vertici = {v1:this.cloneMyObj(p1), v2:this.cloneMyObj(p3)};
    if(JSON.stringify(v)==JSON.stringify(p3)) vertici = {v1:this.cloneMyObj(p1), v2:this.cloneMyObj(p2)};

    let l1 = Math.sqrt(Math.pow(v.x-vertici.v1.x,2)+Math.pow(v.y-vertici.v1.y,2));
    let l2 = Math.sqrt(Math.pow(v.x-vertici.v2.x,2)+Math.pow(v.y-vertici.v2.y,2));

    let dist_max = 0;
    if(l1*l1+l2*l2>0) dist_max = parseFloat(l1*l2/(Math.sqrt(l1*l1+l2*l2)));
    


    // Calcola i vettori P1P2 e P1P3
    const v1x = p2.x - p1.x;
    const v1y = p2.y - p1.y;
    const v1z = p2.z - p1.z;

    const v2x = p3.x - p1.x;
    const v2y = p3.y - p1.y;
    const v2z = p3.z - p1.z;

    // Calcola il vettore normale (prodotto vettoriale di v1 e v2)

    const a = v1y * v2z - v1z * v2y;
    const b = v1z * v2x - v1x * v2z;
    const c = v1x * v2y - v1y * v2x;

    // Se a, b, c sono tutti zero, i punti sono allineati o coincidenti
    if (a === 0 && b === 0 && c === 0) {
        return null; // I punti sono allineati e non definiscono un piano unico
    }

    // Calcola d usando uno dei punti (es. p1): ax1 + by1 + cz1 + d = 0 => d = -(ax1 + by1 + cz1)
    const d = -(a * p1.x + b * p1.y + c * p1.z);

    out.plane     = { a, b, c, d };
    out.v         = v;
    out.dist_max  = dist_max;

    return out;
  }

  getPlaneEquationFromThreePoints(p1, p2, p3) {
    
    // Calcola i vettori P1P2 e P1P3
    const v1x = p2.x - p1.x;
    const v1y = p2.y - p1.y;
    const v1z = p2.z - p1.z;

    const v2x = p3.x - p1.x;
    const v2y = p3.y - p1.y;
    const v2z = p3.z - p1.z;

    // Calcola il vettore normale (prodotto vettoriale di v1 e v2)

    const a = v1y * v2z - v1z * v2y;
    const b = v1z * v2x - v1x * v2z;
    const c = v1x * v2y - v1y * v2x;

    // Se a, b, c sono tutti zero, i punti sono allineati o coincidenti
    if (a === 0 && b === 0 && c === 0) {
        return null; // I punti sono allineati e non definiscono un piano unico
    }

    // Calcola d usando uno dei punti (es. p1): ax1 + by1 + cz1 + d = 0 => d = -(ax1 + by1 + cz1)
    const d = -(a * p1.x + b * p1.y + c * p1.z);

    return { a, b, c, d };
  }


  calculateCentroidOfFourPoints(p1, p2, p3, p4) 
  {
  const sumX = p1.x + p2.x + p3.x + p4.x;
  const sumY = p1.y + p2.y + p3.y + p4.y;

  const centroidX = sumX / 4;
  const centroidY = sumY / 4;

  return { x: centroidX, y: centroidY };
  }
  
  sign(p1, p2, p3) {
  return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);
  }

  isPointInTriangle(p, v1, v2, v3) {
  /*
   * Calcola i segni (orientamenti) del punto p rispetto a ciascun lato del triangolo.
   * I vertici del triangolo devono essere forniti in un ordine consistente (es. orario o antiorario)
   * affinché i segni abbiano la stessa interpretazione.
   * Se i vertici non sono ordinati, questo metodo potrebbe richiedere una normalizzazione.
   * Tuttavia, in pratica, per un triangolo dato, se p è interno, i segni saranno tutti uguali.
   */
  const s1 = this.sign(v1, v2, p); // Segno rispetto al lato v1-v2
  const s2 = this.sign(v2, v3, p); // Segno rispetto al lato v2-v3
  const s3 = this.sign(v3, v1, p); // Segno rispetto al lato v3-v1

  /*
   * Per un punto all'interno (o sul bordo), tutti i segni devono avere lo stesso orientamento
   * (tutti non negativi o tutti non positivi).
   * Se un segno è zero, significa che il punto è sul lato corrispondente.
   */
  const has_neg = (s1 < 0) || (s2 < 0) || (s3 < 0);
  const has_pos = (s1 > 0) || (s2 > 0) || (s3 > 0);

  // Se ci sono sia segni negativi che positivi, il punto è fuori.
  // Se tutti i segni sono zero, i punti sono collineari (non un triangolo valido o punto sul vertice).
  // Se tutti i segni sono positivi o tutti negativi (o zero), il punto è dentro o sul bordo.
  return !(has_neg && has_pos);
  }

  proiezionePuntoSuPiano_old(point, p)
  {
    let out = {};
    out.distance = 0;

    if(p.plane.c==0) 
      out.distance = 0;
    else
      out.distance = parseFloat((-p.plane.d-p.plane.a*point.x-p.plane.b*point.y)/(p.plane.c));

    out.v_distance  = Math.sqrt(Math.pow(point.x-p.v.x,2)+Math.pow(point.y-p.v.y,2)); 
    out.plane       = this.cloneMyObj(p);

    if(p.dist_max>0)
      out.degree    = (out.v_distance==0)?1:(out.v_distance>p.dist_max)?0:parseFloat(1-out.v_distance/p.dist_max);
    else
      out.degree    = 0;
    return out;
  }

  proiezionePuntoSuPiano(point, plane)
  {
    if(plane.c==0) 
      return 0;
    else
      return parseFloat((-plane.d-plane.a*point.x-plane.b*point.y)/(plane.c));
  }


  calcolaDislivello(point){      
    // con quattro punti distinti, posso infividuare fino a 4 piani diversi.
    
    // individuo un punto centrale tra i 4 vertici
    let centroid = this.calculateCentroidOfFourPoints(this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vA1, this.grafica.piano.vertici.vA2, this.grafica.piano.vertici.vP2);
    
    // genero i 4 piani iniziali (generati dalle terne dei 4 vertici, senza quindi punto centrale)
    let piano1 = this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vP2, this.grafica.piano.vertici.vA2);
    let piano2 = this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vA1, this.grafica.piano.vertici.vA2);
    let piano3 = this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vP2, this.grafica.piano.vertici.vA1, this.grafica.piano.vertici.vA2);
    let piano4 = this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vP2, this.grafica.piano.vertici.vA1);

    // proietto valuto la proiezione del punto centrale come media delle 4 proiezioni
    let h_centroid = parseFloat(( this.proiezionePuntoSuPiano(centroid, piano1)+
                                  this.proiezionePuntoSuPiano(centroid, piano2)+
                                  this.proiezionePuntoSuPiano(centroid, piano3)+
                                  this.proiezionePuntoSuPiano(centroid, piano4))/4);
  
    let vCentro = {x: centroid.x, y:centroid.y, z:h_centroid};
    //console.log(vCentro);

    // genero i nuovi piani
    let piano1n = this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vA1, vCentro);
    let piano2n = this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vA1, this.grafica.piano.vertici.vA2, vCentro);
    let piano3n = this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vA2, this.grafica.piano.vertici.vP2, vCentro);
    let piano4n = this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vP2, this.grafica.piano.vertici.vP1, vCentro);
    
    if(JSON.stringify(point)==JSON.stringify(centroid)) return h_centroid;

    if(this.isPointInTriangle(point, this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vA1, vCentro))
    {
      return this.proiezionePuntoSuPiano(point, piano1n); 
    }
    else
    {
      if(this.isPointInTriangle(point, this.grafica.piano.vertici.vA1, this.grafica.piano.vertici.vA2, vCentro))
      {
        return this.proiezionePuntoSuPiano(point, piano2n); 
      }
      else
      {
        if(this.isPointInTriangle(point, this.grafica.piano.vertici.vA2, this.grafica.piano.vertici.vP2, vCentro))
        {
          return this.proiezionePuntoSuPiano(point, piano3n); 
        }
        else
        {
         if(this.isPointInTriangle(point, this.grafica.piano.vertici.vP2, this.grafica.piano.vertici.vP1, vCentro))
          {
            return this.proiezionePuntoSuPiano(point, piano4n); 
          }
          else
          {
            console.log('Impossibile proiettare il punto ', point);
          } 
        }
      }
    }

    return 0;
  }


  rettaDiagonale(point1, point2)
  {
    let m = parseFloat((point2.y-point1.y)/(point2.x-point1.x));
    let q = parseFloat(point2.y-m*point2.x);
    return {m, q};
  }

  isInTheLOWHalfPlane(point, diagonale){
    return parseFloat(point.y-diagonale.m*point.x-diagonale.q)<0;
  }


  calcolaDislivello_old(point){      
    // con quattro punti distinti, posso infividuare fino a 4 piani diversi.
    // considero 4 triangoli, per ogni terna di punti 
    // il punto potrebbe appartenere a ciascuno dei piani, devo fare una media pesata, in base al grado di apparteneza, tipo Fuzzy
    let info = [];
    info.push(this.proiezionePuntoSuPiano(point, this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vP2, this.grafica.piano.vertici.vA2)));
    info.push(this.proiezionePuntoSuPiano(point, this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vA1, this.grafica.piano.vertici.vA2)));
    info.push(this.proiezionePuntoSuPiano(point, this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vP2, this.grafica.piano.vertici.vA1, this.grafica.piano.vertici.vA2)));
    info.push(this.proiezionePuntoSuPiano(point, this.getPlaneEquationFromThreePoints(this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vP2, this.grafica.piano.vertici.vA1)));
    
    // ordino i piani in base alla distanza del punto in esame dal vertice del triangolo riferito al piano
    info.sort((a, b) => a.v_distance - b.v_distance);

    // se la distanza dal vertice è nulla, vuol dire che il punto in esame coincide con un vertice, non serve quindi fare troppi conti
    if(info[0].v_distance==0) 
      return info[0].distance;
    else
    {
      // considero solo i piani non troppo distanti
      let tmp = info.filter((el)=>{return el.degree>0});
      let peso_tot = 0;
      for(let i=0;i<tmp.length;i++)
      {
        peso_tot += info[i].degree;
      }
      

      let valore = 0;
      for(let i=0;i<tmp.length;i++)
      {
        valore += info[i].distance*info[i].degree/peso_tot;
      }
      return valore;

    }

    
  }


  ////////////////////////////////////////////////////////////////////////////////////////////////////////



  creaQuoteEsterne(etk, p1, p2, d){
      let out = {};
      out.etk = etk;
      
      out.p1  = this.cloneMyObj(p1);
      out.p2  = this.cloneMyObj(p2);
      out.len = this.getNodeDistance(p1, p2);

      out.start   = {x:parseFloat(out.p1.x+d.x), y:parseFloat(out.p1.y+d.y)};
      out.stop    = {x:parseFloat(out.p2.x+d.x), y:parseFloat(out.p2.y+d.y)};
      
      return this.cloneMyObj(out);
  }

  CaricaCOMPONENTFLAGS_PEDANA() {
      let PEDANA_COMPONENTS_FLAG = [];

      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '010601', name: 'PROFILO COVER ESTERNA',                  pallinatura: '9/1', active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'PERIM', etk:'', peso:0.7});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '010625', name: 'PROFILO L ANGOLO',                       pallinatura: '9/2', active: false, compliant: false, counter:0, funzione:  null, lunghezza:0, opt:'', gruppo:'PERIM', etk:'', peso:0.25});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '010602', name: 'PROFILO CON CAVA',                        pallinatura: '8/1', active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'INT', etk:'', peso:0.6});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '010383', name: 'PROFILO A C',                             pallinatura: '8/2', active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'INT', etk:'', peso:0.16});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '146137', name: 'VITI PROFILO CON CAVA',                   pallinatura: '8/3', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'INT', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '010600', name: 'PROFILO STRUTTURALE INTERNO',             pallinatura: '7/1', active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'INT', etk:'', peso:4.5});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '020182', name: 'GUARNIZIONE A FUNGO INT',                 pallinatura: '7/2', active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'INT', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: 'ZZZVE2', name: 'VASCHETTA TIPO 2',                        pallinatura: '10/2', active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'GLASS', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '010599', name: 'PROFILO STRUTTURALE ESTERNO',             pallinatura: '6/1', active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'INT', etk:'', peso:5.2});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '020182', name: 'GUARNIZIONE A FUNGO EXT',                 pallinatura: '6/2', active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'INT', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '030218', name: 'PROFILO A L',                             pallinatura: '6/3', active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'INT', etk:'', peso:0.15});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111445', name: 'CLIPS',                                   pallinatura: '6/4', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'INT', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '146159', name: 'VITI CLIPS',                              pallinatura: '6/5', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'INT', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: 'ZZZVE1', name: 'VASCHETTA TIPO 1',                        pallinatura: '10/1', active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'GLASS', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '131370', name: 'GIUNZIONE PROFILI',                      pallinatura: '10/1', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:1.3});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '122199', name: 'GIUNZIONE COVER',                        pallinatura: '10/2', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0.007});
      
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: 'XXX000', name: 'MARTINETTI TIPO 1',                      pallinatura: '9/3', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: 'XXX001', name: 'MARTINETTI TIPO 2',                      pallinatura: '9/4', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: 'XXX003', name: 'MARTINETTI TIPO 3',                      pallinatura: '9/5', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: 'XXX004', name: 'MARTINETTI TIPO 4',                      pallinatura: '9/6', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: 'XXY000', name: 'MAGATELLO X',                            pallinatura: '9/10', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '131365', name: 'PORTA ZAVORRE',                          pallinatura: '12/1',active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'DECK012', etk:'', peso:0});
      
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '010600', name: 'PROFILO STRUTTURALE INTERNO ZAVORRE',    pallinatura: '12/2',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'DECK012', etk:'', peso:4.5});
      // nuovi kit
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '272386', name: 'KIT GIUNZIONE STRUTTURALE ANGOLO',         pallinatura: '0/1',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '272387', name: 'KIT COLLEGAMENTO PROFILI',                 pallinatura: '0/2',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '272388', name: 'KIT PIASTRINO COMPENSAZIONE ANGOLO',       pallinatura: '0/3',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '272389', name: 'KIT COLLEGAMENTO PROFILI ESTERNI',         pallinatura: '0/4',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '272390', name: 'KIT STAFFA FISSAGGIO A MURO PEDANA',       pallinatura: '0/5',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '272391', name: 'KIT STAFFA TELESCOPICA PEDANA',            pallinatura: '0/6',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});

      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '122250', name: 'STAFFA ANTI SOLLEVAMENTO 0-12 CM',            pallinatura: '0/6',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '122251', name: 'STAFFA ANTI SOLLEVAMENTO 8-20 CM',            pallinatura: '0/6',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '122275', name: 'STAFFA ANTI SOLLEVAMENTO 18-35 CM',            pallinatura: '0/6',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});

      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '170039', name: 'PROLUNGA DISLIVELLI H10 cm L400 cm PEDANA',            pallinatura: '0/6',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '170040', name: 'PROLUNGA DISLIVELLI H20 cm L400 cm PEDANA',            pallinatura: '0/6',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '170041', name: 'PROLUNGA DISLIVELLI H30 cm L400 cm PEDANA',            pallinatura: '0/6',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '170042', name: 'PROLUNGA DISLIVELLI H40 cm L400 cm PEDANA',            pallinatura: '0/6',active: false, compliant: false, counter:0, funzione: null, lunghezza:'', opt:'', gruppo:'', etk:'', peso:0});

      
      //martinetti basi e prolunghe
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111487', name: 'T0', pallinatura: '10/0', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});  
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111483', name: 'T1', pallinatura: '10/0', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});  
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111482', name: 'T2', pallinatura: '10/0', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});  


      //PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111482', name: 'T0', pallinatura: '10/0', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111478', name: 'B1', pallinatura: '10/0', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111479', name: 'B2', pallinatura: '10/0', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111480', name: 'B3', pallinatura: '10/0', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111484', name: 'P0', pallinatura: '10/1', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111485', name: 'P1', pallinatura: '10/1', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111486', name: 'P2', pallinatura: '10/1', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});

      // premium
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111501', name: 'S1', pallinatura: '10/0', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111495', name: 'S2', pallinatura: '10/0', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111496', name: 'S3', pallinatura: '10/0', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111497', name: 'S4', pallinatura: '10/0', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});
      
      PEDANA_COMPONENTS_FLAG.push({acronimo:'', smeup: '111500', name: 'X0', pallinatura: '10/1', active: false, compliant: false, counter:0, funzione: null, lunghezza:0, opt:'', gruppo:'', etk:'', peso:0});

      return this.cloneMyObj(PEDANA_COMPONENTS_FLAG);
  }
  resetALLPEDANACOMPONENTSFLAG() {
      for (let i = 0; i < this.PEDANA_COMPONENTS_FLAG.length; i++) {
          //SetGetFLAG(COMPONENTS_FLAG[i].name, 1, false);
          this.PEDANA_COMPONENTS_FLAG[i].active     = false;
          this.PEDANA_COMPONENTS_FLAG[i].compliant  = false;
          this.PEDANA_COMPONENTS_FLAG[i].counter    = 0;
          this.PEDANA_COMPONENTS_FLAG[i].lunghezza  = '';
      }
  }
  checkTop(etkAngle, top){
      return this.smOBJ.angoli.filter((el) =>{return el.etk==etkAngle;})[0].top==top;
  }
  checkType(etkAngle, type){
      return this.smOBJ.angoli.filter((el) =>{return el.etk==etkAngle;})[0].type==type;
  }
  checkPost(etkAngle){
      return this.smOBJ.angoli.filter(el => el.etk==etkAngle)[0].type!==1;
  }

  comparePosX(obj1, obj2)
  {
      if (obj1.posizione.assoluta.x < obj2.posizione.assoluta.x) return -1;
      if (obj1.posizione.assoluta.x > obj2.posizione.assoluta.x) return 1;
      return 0;
  }

  comparePosY(obj1, obj2)
  {
      if (obj1.posizione.assoluta.y < obj2.posizione.assoluta.y) return -1;
      if (obj1.posizione.assoluta.y > obj2.posizione.assoluta.y) return 1;
      return 0;
  }

  CalcolaLuci() {
      let gambe = this.cloneMyObj(this.lista_POST);
      let iniziaAmisurare   = 0;
      let finisciDImisurare = 0;
      let spostaQuota       = 1;

      let lista_luce   = [];
      let counterXeY   = 0;

      // lato AD
      let filteredSide = gambe.filter((el)=> {return el.etk.split('_')[0]=='AD'});
      if(filteredSide.length>0)
      {
          const filteredSideX = filteredSide.sort(this.comparePosX);

          let filter = this.smOBJ.angoli.filter((el)=>{return el.etk=='A'});
          if(filter.length>0) {if((filter[0].type==1 || filter[0].type==4) && (filter[0].opt !=3)) iniziaAmisurare = 0; else iniziaAmisurare = -this.smOBJ.dimensioni.nominali.gamba;}
          filter     = this.smOBJ.angoli.filter((el)=>{return el.etk=='D'});
          if(filter.length>0){if((filter[0].type==1 || filter[0].type==4) && (filter[0].opt !=3)) finisciDImisurare = 0; else finisciDImisurare = this.smOBJ.dimensioni.nominali.gamba;}


          let pos_x_Ini = parseFloat(this.smOBJ.dimensioni.nominali.gamba+iniziaAmisurare);
          for(let i=0;i<filteredSideX.length;i++)
          {
              let distanza_gambe = parseFloat(filteredSideX[i].posizione.assoluta.x-pos_x_Ini);
              if(iniziaAmisurare!=0 && i==0) spostaQuota = 0; else spostaQuota=1;

              let compensazione = 0;

              if(filteredSideX[i].etk.split('_')[1]=='S1')
              {
                  lista_luce.push({etk:'AX', l:parseFloat(distanza_gambe)});
              }
              else
              {
                  counterXeY += 2;
                  lista_luce.push({etk:'X'+counterXeY, l:parseFloat(distanza_gambe+compensazione)});
              }

              pos_x_Ini = parseFloat((filteredSideX[i].posizione.assoluta.x+this.smOBJ.dimensioni.nominali.gamba));
              if(i==parseInt(filteredSideX.length-1))
              {
                  if(finisciDImisurare!=0) spostaQuota = 0; else spostaQuota=1;
                  distanza_gambe = parseFloat(this.smOBJ.dimensioni.nominali.larghezza-filteredSideX[i].posizione.assoluta.x-2*this.smOBJ.dimensioni.nominali.gamba+finisciDImisurare);
                  let compensazione = 0;

                  if(filteredSideX[i].etk.split('_')[1]=='S2')
                  {
                      lista_luce.push({etk:'DX', l:parseFloat(distanza_gambe)});
                  }
                  else
                  {
                      counterXeY += 2;
                      lista_luce.push({etk:'X'+counterXeY, l:parseFloat(distanza_gambe+compensazione)});
                  }
              }
          }
      }
      else
      {
          counterXeY += 2;
          let compensazione = 0;
          lista_luce.push({etk:'X'+counterXeY, l:parseFloat(this.smOBJ.dimensioni.nominali.larghezza-2*this.smOBJ.dimensioni.nominali.gamba+compensazione)});
      }



      counterXeY   = -1;
      // lato BC
      filteredSide = this.lista_POST.filter((el)=> {return el.etk.split('_')[0]=='BC'});
      if(filteredSide.length>0)
      {
          const filteredSideX = filteredSide.sort(this.comparePosX);

          let filter = this.smOBJ.angoli.filter((el)=>{return el.etk=='B'});
          if(filter.length>0) {if((filter[0].type==1 || filter[0].type==4) && (filter[0].opt !=3)) iniziaAmisurare = 0; else iniziaAmisurare = -this.smOBJ.dimensioni.nominali.gamba;}
          filter     = this.smOBJ.angoli.filter((el)=>{return el.etk=='C'});
          if(filter.length>0){if((filter[0].type==1 || filter[0].type==4) && (filter[0].opt !=3)) finisciDImisurare = 0; else finisciDImisurare = this.smOBJ.dimensioni.nominali.gamba;}
          let pos_x_Ini = parseFloat(this.smOBJ.dimensioni.nominali.gamba+iniziaAmisurare);
          for(let i=0;i<filteredSideX.length;i++)
          {
              let distanza_gambe = parseFloat(filteredSideX[i].posizione.assoluta.x-pos_x_Ini);
              let compensazione = 0;
              if(iniziaAmisurare!=0 && i==0) spostaQuota = 0; else spostaQuota=1;
              if(filteredSideX[i].etk.split('_')[1]=='S1')
              {
                  lista_luce.push({etk:'BX', l:parseFloat(distanza_gambe)});
              }
              else
              {
                  counterXeY += 2;
                  lista_luce.push({etk:'X'+counterXeY, l:parseFloat(distanza_gambe+compensazione)});
              }
              pos_x_Ini = parseFloat((filteredSideX[i].posizione.assoluta.x+this.smOBJ.dimensioni.nominali.gamba));
              if(i==parseInt(filteredSideX.length-1))
              {
                  if(finisciDImisurare!=0) spostaQuota = 0; else spostaQuota=1;
                  distanza_gambe = parseFloat(this.smOBJ.dimensioni.nominali.larghezza-filteredSideX[i].posizione.assoluta.x-2*this.smOBJ.dimensioni.nominali.gamba+finisciDImisurare);
                  let compensazione = 0;
                  if(filteredSideX[i].etk.split('_')[1]=='S2')
                  {
                      lista_luce.push({etk:'CX', l:parseFloat(distanza_gambe)});
                  }
                  else
                  {
                      counterXeY += 2;
                      lista_luce.push({etk:'X'+counterXeY, l:parseFloat(distanza_gambe+compensazione)});
                  }
              }
          }
      }
      else
      {
          counterXeY += 2;
          let compensazione = 0;
          lista_luce.push({etk:'X'+counterXeY, l:parseFloat(this.smOBJ.dimensioni.nominali.larghezza-2*this.smOBJ.dimensioni.nominali.gamba+compensazione)});
      }

      counterXeY   = 0;
      // lato CD
      filteredSide = this.lista_POST.filter((el)=> {return el.etk.split('_')[0]=='CD'});
      if(filteredSide.length>0)
      {
          const filteredSideX = filteredSide.sort(this.comparePosY);
          let filter = this.smOBJ.angoli.filter((el)=>{return el.etk=='D'});
          if(filter.length>0) {if((filter[0].type==1 || filter[0].type==4) && (filter[0].opt !=3)) iniziaAmisurare = 0; else iniziaAmisurare = -this.smOBJ.dimensioni.nominali.gamba;}
          filter     = this.smOBJ.angoli.filter((el)=>{return el.etk=='C'});
          if(filter.length>0){if((filter[0].type==1 || filter[0].type==4) && (filter[0].opt !=3)) finisciDImisurare = 0; else finisciDImisurare = this.smOBJ.dimensioni.nominali.gamba;}
          let pos_y_Ini = parseFloat(this.smOBJ.dimensioni.nominali.gamba+iniziaAmisurare);
          for(let i=0;i<filteredSideX.length;i++)
          {
              let distanza_gambe = parseFloat(filteredSideX[i].posizione.assoluta.y-pos_y_Ini);
              if(iniziaAmisurare!=0 && i==0) spostaQuota = 0; else spostaQuota=1;
              let compensazione = 0;
              if(filteredSideX[i].etk.split('_')[1]=='S1')
              {
                  lista_luce.push({etk:'DY', l:parseFloat(distanza_gambe)});
              }
              else
              {
                  counterXeY += 2;
                  lista_luce.push({etk:'Y'+counterXeY, l:parseFloat(distanza_gambe+compensazione)});
              }
              pos_y_Ini = parseFloat((filteredSideX[i].posizione.assoluta.y+this.smOBJ.dimensioni.nominali.gamba));
              if(i==parseInt(filteredSideX.length-1))
              {
                  if(finisciDImisurare!=0) spostaQuota = 0; else spostaQuota=1;
                  distanza_gambe = parseFloat(this.smOBJ.dimensioni.nominali.sporgenza-filteredSideX[i].posizione.assoluta.y-2*this.smOBJ.dimensioni.nominali.gamba+finisciDImisurare);
                  let compensazione = 0;
                  if(filteredSideX[i].etk.split('_')[1]=='S2')
                  {
                      lista_luce.push({etk:'CY', l:parseFloat(distanza_gambe)});
                  }
                  else
                  {
                      counterXeY += 2;
                      lista_luce.push({etk:'Y'+counterXeY, l:parseFloat(distanza_gambe+compensazione)});
                  }
              }
          }
      }
      else
      {
          counterXeY += 2;
          let compensazione = 0;
          lista_luce.push({etk:'Y'+counterXeY, l:parseFloat(this.smOBJ.dimensioni.nominali.sporgenza-2*this.smOBJ.dimensioni.nominali.gamba+compensazione)});
      }

      counterXeY   = -1;
      // lato AB
      filteredSide = this.lista_POST.filter((el)=> {return el.etk.split('_')[0]=='AB'});
      if(filteredSide.length>0)
      {
          //console.log(filteredSide);            
          const filteredSideX = filteredSide.sort(this.comparePosY);
          //console.log(filteredSideX);

          let filter = this.smOBJ.angoli.filter((el)=>{return el.etk=='A'});
          if(filter.length>0) {if((filter[0].type==1 || filter[0].type==4) && (filter[0].opt !=3)) iniziaAmisurare = 0; else iniziaAmisurare = -this.smOBJ.dimensioni.nominali.gamba;}
          filter     = this.smOBJ.angoli.filter((el)=>{return el.etk=='B'});
          if(filter.length>0){if((filter[0].type==1 || filter[0].type==4) && (filter[0].opt !=3)) finisciDImisurare = 0; else finisciDImisurare = this.smOBJ.dimensioni.nominali.gamba;}
          let pos_y_Ini = parseFloat(this.smOBJ.dimensioni.nominali.gamba+iniziaAmisurare);

          // 
          

          for(let i=0;i<filteredSideX.length;i++)
          {
              let distanza_gambe = parseFloat(filteredSideX[i].posizione.assoluta.y-pos_y_Ini);
              if(iniziaAmisurare!=0 && i==0) spostaQuota = 0; else spostaQuota=1;
              let compensazione = 0;
              if(filteredSideX[i].etk.split('_')[1]=='S1')
              {
                  lista_luce.push({etk:'AY', l:parseFloat(distanza_gambe)});
              }
              else
              {
                  counterXeY += 2;
                  lista_luce.push({etk:'Y'+counterXeY, l:parseFloat(distanza_gambe+compensazione)});
              }
              pos_y_Ini = parseFloat((filteredSideX[i].posizione.assoluta.y+this.smOBJ.dimensioni.nominali.gamba));
              if(i==parseInt(filteredSideX.length-1))
              {
                  if(finisciDImisurare!=0) spostaQuota = 0; else spostaQuota=1;
                  distanza_gambe = parseFloat(this.smOBJ.dimensioni.nominali.sporgenza-filteredSideX[i].posizione.assoluta.y-2*this.smOBJ.dimensioni.nominali.gamba+finisciDImisurare);
                  let compensazione = 0;
                  if(filteredSideX[i].etk.split('_')[1]=='S2')
                  {
                      lista_luce.push({etk:'BY', l:parseFloat(distanza_gambe)});
                  }
                  else
                  {
                      counterXeY += 2;
                      lista_luce.push({etk:'Y'+counterXeY, l:parseFloat(distanza_gambe+compensazione)});
                  }
              }
          }
      }
      else
      {
          counterXeY += 2;
          let compensazione = 0;
          lista_luce.push({etk:'Y'+counterXeY, l:parseFloat(this.smOBJ.dimensioni.nominali.sporgenza-2*this.smOBJ.dimensioni.nominali.gamba+compensazione)});
      }

      let out  = {};
      return this.cloneMyObj(lista_luce);
  }
  CaricaCostanti(){
      let costanti    = {};
      costanti.L      = [];
      costanti.L[1]   = parseFloat(13.8); // lato lungo staffa esterna
      costanti.L[2]   = parseFloat(4.7);  // lato corto staffa esterna
      costanti.L[0]   = parseFloat(5.0);  // L2e, lato corto staffa esterna per posizionamento
      costanti.L[3]   = parseFloat(17.4); // larghezza profilo esterno
      costanti.L[4]   = parseFloat(21.2); // larghezza piastrone nodo
      costanti.L[5]   = parseFloat(13.5); // larhezza profilo interno
      costanti.L[6]   = parseFloat(18.5); // larghezza totale staffa a w
      costanti.L[7]   = parseFloat(3.89-0.051); // inizio staffa w su profilo grande
      costanti.L[8]   = parseFloat(0.57*0); // inizio profilo esterno rispetto a interno piastra nodo
      costanti.L[9]   = parseFloat(1.4);// 1.385 rientro copertina esterna
      costanti.L[10]  = parseFloat(0.75); // spessore per copertina
      costanti.L[11]  = parseFloat(0.6-0.1);  // spessore nodino
      costanti.L[12]  = parseFloat(3.25); // inizio profilo esterno rispetto a esterno piastra nodo
      costanti.L[13]  = parseFloat(0.18); // per compensazione offset nulli

      return this.cloneMyObj(costanti);
  }
  cloneMyObj(obj){
      return JSON.parse(JSON.stringify(obj));
  }

  getInfoGamba(etk){
      /* Attenzione: la posizione delle gambe della pergola (in lista_POST) si riferisce all'angolo in alto a sinistra, quindi dipende dal tipo di gamba.
         I nodi della pedana, invece, si riferiscono al vertice "spigoloso" della piastra del nodo e non dipendono dal tipo di gamba.
         Serve una compensazione:
         'A', 'AB_S1', 'AB_S2', 'AB_A1', 'AB_A2', 'AD_S1', 'AD_S2', 'AD_A1', 'AD_A2' => sono già ok perchè il vertice della gamba corrisponde già vertice spigoloso piastra
         'D', 'CD_S1', 'CD_S2', 'CD_A1', 'CD_A2' => devo aggiungere in x la dimensione della gamba
         'C' => devo aggiungere la dimensione della gamba sia in x che in y
          'B', 'BC_S1', 'BC_S2', 'BC_A1', 'BC_A2' => devo aggiungere la dimensione della gamba in y
      */

      let tmp = this.cloneMyObj(this.lista_POST.filter((el)=>{return el.etk==etk;}));
      if(tmp.length>0)
      {
         if(['C', 'D', 'CD_S1', 'CD_S2', 'CD_A1', 'CD_A2'].includes(etk)) tmp[0].posizione.assoluta.x += this.smOBJ.dimensioni.nominali.gamba;
         if( ['C','B', 'BC_S1', 'BC_S2', 'BC_A1', 'BC_A2'].includes(etk)) tmp[0].posizione.assoluta.y += this.smOBJ.dimensioni.nominali.gamba;

         return this.cloneMyObj(tmp[0]);
      }
      else
      {
          console.log('errore gamba!')
      }

  }

  getNodeDistance(p1, p2){        
      let  out = parseFloat(Math.sqrt(Math.pow(p1.x-p2.x,2)+Math.pow(p1.y-p2.y,2)));
      return out;
  }

  sistemaOffset(){
      let out = {a:this.smOBJ.optionals.pedana.a, 
                 b:this.smOBJ.optionals.pedana.b, 
                 c:this.smOBJ.optionals.pedana.c, 
                 d:this.smOBJ.optionals.pedana.d}; 

      // controllo addossamenti
      //if(!this.checkType('A', 1) && !this.checkType('D',1)) out.a = 0;
      //if(!this.checkType('A', 1) && !this.checkType('B',1)) out.d = 0;
      //if(!this.checkType('C', 1) && !this.checkType('D',1)) out.b = 0;
      //if(!this.checkType('C', 1) && !this.checkType('B',1)) out.c = 0;

      // controllo accoppiamenti
      if(this.checkTop('A', 5)) out.d = 0;
      if(this.checkTop('D', 5)) out.b = 0;
      if(this.checkTop('B', 6)) out.d = 0;
      if(this.checkTop('C', 6)) out.b = 0;

      if(this.checkTop('A', 7)) out.a = 0;
      if(this.checkTop('D', 8)) out.a = 0;
      if(this.checkTop('B', 7)) out.c = 0;
      if(this.checkTop('C', 8)) out.c = 0;


      return this.cloneMyObj(out);
  }

  linkNodi(etk1, etk2, direzione, indice, tipo_profilo=""){
      return {indice: indice, 
              dir:    direzione, 
              vertici:[etk1, etk2], 
              tipo:[this.getInfoNodo(etk1).nodo.isgamba, 
                    this.getInfoNodo(etk2).nodo.isgamba],
              tipo_profilo:tipo_profilo,
              codifica: this.ricodificaNodo(etk1)+this.ricodificaNodo(etk2)};
  }




  creaLinkTraNodi(){
      let lista_linkTraNodi = [];
      try {
          for(let i=0;i<this.lista_nodi.length;i++)
              {
                 if(this.lista_nodi[i].tipo.split('*').length<2)
                 {
                  //UP
                  if(this.lista_nodi[i].vicini.UP.etk!==null&&this.lista_nodi[i].vicini.UP.marker==false  )
                  {
                      this.lista_nodi[i].vicini.UP.marker = true;
                      this.lista_nodi[this.getInfoNodo(this.lista_nodi[i].vicini.UP.etk).index].vicini.DOWN.marker = true;
                      lista_linkTraNodi.push(this.linkNodi(this.lista_nodi[i].etk, this.lista_nodi[i].vicini.UP.etk, 'ver', lista_linkTraNodi.length));
                  }
                  //RIGHT
                  if(this.lista_nodi[i].vicini.RIGHT.etk!==null&&this.lista_nodi[i].vicini.RIGHT.marker==false )
                  {
                      this.lista_nodi[i].vicini.RIGHT.marker = true;
                      this.lista_nodi[this.getInfoNodo(this.lista_nodi[i].vicini.RIGHT.etk).index].vicini.LEFT.marker = true;
                      lista_linkTraNodi.push(this.linkNodi(this.lista_nodi[i].etk, this.lista_nodi[i].vicini.RIGHT.etk, 'hor', lista_linkTraNodi.length));
                  }
                  //DOWN
                  if(this.lista_nodi[i].vicini.DOWN.etk!==null&&this.lista_nodi[i].vicini.DOWN.marker==false  )
                  {
                      this.lista_nodi[i].vicini.DOWN.marker = true;
                      this.lista_nodi[this.getInfoNodo(this.lista_nodi[i].vicini.DOWN.etk).index].vicini.UP.marker = true;
                      lista_linkTraNodi.push(this.linkNodi(this.lista_nodi[i].etk, this.lista_nodi[i].vicini.DOWN.etk, 'ver', lista_linkTraNodi.length));
                  }
                  //LEFT
                  if(this.lista_nodi[i].vicini.LEFT.etk!==null&&this.lista_nodi[i].vicini.LEFT.marker==false )
                  {
                      this.lista_nodi[i].vicini.LEFT.marker = true;
                      this.lista_nodi[this.getInfoNodo(this.lista_nodi[i].vicini.LEFT.etk).index].vicini.RIGHT.marker = true;
                      lista_linkTraNodi.push(this.linkNodi(this.lista_nodi[i].etk, this.lista_nodi[i].vicini.LEFT.etk, 'hor', lista_linkTraNodi.length));
                  }
                }            
              } 
      } catch (error) {
          console.log(error);
      }

      
      // faccio un po' di pulizia
      let lista_controllati = [];
      let da_eliminare      = [];
      for(let i=0;i<lista_linkTraNodi.length;i++)
      {
          if(!lista_controllati.includes(i))
          {
              lista_controllati.push(i);
                
              let start   = lista_linkTraNodi[i].vertici[0];
              let end     = lista_linkTraNodi[i].vertici[1];
              let dir     = lista_linkTraNodi[i].dir;
              let new_end = end;
              
              let end_run = false;

              if(lista_linkTraNodi[i].tipo[1]===false) // se non è un nodo
              {
                  while(end_run==false)
                      {
                         let tmp =  lista_linkTraNodi.filter((el)=>{return    el.dir==dir&&
                                                                              el.vertici.includes(new_end)&&
                                                                              !lista_controllati.includes(el.indice)
                                                                              });
                          if(tmp.length>0)
                              {
                                  let pos_estremo = (tmp[0].vertici[0]==new_end)?1:0;                                    
                                  new_end  = tmp[0].vertici[pos_estremo];
                                  lista_controllati.push(tmp[0].indice);
                                  da_eliminare.push(tmp[0].indice);
                                  //console.log(tmp[0]);
                                  if(tmp[0].tipo[pos_estremo]==true) end_run = true;
                              }
                          else
                              end_run = true;                                                       
                      }
              }

              
              // ora ripeto all'indietro
              
              end     = new_end;
              end_run = false;
              let new_start = start;
              if(lista_linkTraNodi[i].tipo[0]===false) // se non è un nodo
              {
                  while(end_run==false)
                      {
                         let tmp =  lista_linkTraNodi.filter((el)=>{return    el.dir==dir&&
                                                                              el.vertici.includes(new_start)&&
                                                                              !lista_controllati.includes(el.indice)});
                          if(tmp.length>0)
                              {
                                  let pos_estremo = (tmp[0].vertici[0]==new_start)?1:0; 
                                  new_start  = tmp[0].vertici[pos_estremo];
                                  lista_controllati.push(tmp[0].indice);
                                  da_eliminare.push(tmp[0].indice);
                                  //console.log(tmp[0]);
                                  if(tmp[0].tipo[pos_estremo]==true) end_run = true;
                              }
                          else
                              end_run = true;                                                       
                      }
              }
              
             
              lista_linkTraNodi[i] = this.linkNodi(new_start, new_end, dir, lista_linkTraNodi[i].indice);

          }
      }
      //console.log(this.cloneMyObj(lista_linkTraNodi));

   

      lista_linkTraNodi = lista_linkTraNodi.filter((el)=>{return !da_eliminare.includes(el.indice);});
      //console.log(this.cloneMyObj(lista_linkTraNodi));

      // se entrambi i nodi sono "nodo semplice", spengo il link
      // CONTROLLARE!!!!!!!
      /*
      lista_linkTraNodi = lista_linkTraNodi.filter((el)=>{
          return !(this.getInfoNodo(el.vertici[0]).nodo.tipo=='nodo semplice' && 
                   this.getInfoNodo(el.vertici[1]).nodo.tipo=='nodo semplice') 
          });
      */    

      let lista_link_proibiti = [];
      
      // mettere controllo su accoppiamenti ed addossamenti
      
      if(this.offset.a>0) lista_link_proibiti.push(['P1d','P2b']);
      /*
      if(true) lista_link_proibiti.push(['A1d','A2b']);
      if(true) lista_link_proibiti.push(['P1a','A1c']);
      if(true) lista_link_proibiti.push(['P1d','P2b']);
      */ 

      for(let i=0;i<lista_link_proibiti.length;i++)
      {
        lista_linkTraNodi = lista_linkTraNodi.filter((el)=>{
          return !(this.getInfoNodo(el.vertici[0]).nodo.etk==lista_link_proibiti[i][0] && 
                   this.getInfoNodo(el.vertici[1]).nodo.etk==lista_link_proibiti[i][1]) 
          });
      }

      //console.log(this.cloneMyObj(lista_linkTraNodi));

      // se entrambi i nodi sono a parete, spengo il link
      lista_linkTraNodi = lista_linkTraNodi.filter((el)=>{          
          let str1 = this.getInfoNodo(el.vertici[0]).nodo.tipo;
          let str2 = this.getInfoNodo(el.vertici[1]).nodo.tipo;      
           return !(( str1.split('-').length>1 && str2.split('-').length>1) );                 
          ;});

      



      // qui definisco i tipi di link
      //console.log(this.cloneMyObj(this.lista_nodi));
      //console.log(this.cloneMyObj(lista_linkTraNodi));
      

      // disabilito i link tra nodi nascosti
      lista_linkTraNodi = lista_linkTraNodi.filter((el)=>{
         
              let str1 = this.getInfoNodo(el.vertici[0]).nodo.hidden.isHidden;
              let str2 = this.getInfoNodo(el.vertici[1]).nodo.hidden.isHidden;      
              return !(str1 && str2) ; 
          
          ;});

      for(let i=0;i<lista_linkTraNodi.length;i++) lista_linkTraNodi[i] = this.cloneMyObj(this.getMainProfiles(lista_linkTraNodi[i]));        
      //console.log(this.cloneMyObj(this.lista_nodi));
      //console.log(this.cloneMyObj(lista_linkTraNodi));




      
      
      // disabilito tutti i nodi non utilizzati dai link
      let nodi_attivi = [];
      for(let i=0;i<lista_linkTraNodi.length;i++)
          {
              let et1 = this.getInfoNodo(lista_linkTraNodi[i].vertici[0]).nodo.etk;
              let et2 = this.getInfoNodo(lista_linkTraNodi[i].vertici[1]).nodo.etk; 
              if(!nodi_attivi.includes(et1)) nodi_attivi.push(et1);
              if(!nodi_attivi.includes(et2)) nodi_attivi.push(et2);
          } 
          
      console.log(JSON.stringify(nodi_attivi));    
 
      for(let i=0;i<this.lista_nodi.length;i++)
      {
          if(!nodi_attivi.includes(this.lista_nodi[i].etk)) this.lista_nodi[i].enabled = false;
      }




      for(let i=0;i<lista_linkTraNodi.length;i++)
          {  
              //console.log(lista_linkTraNodi[i]);
              let colore =  (lista_linkTraNodi[i].tipo_profilo=="esterno")?'stroke:red;stroke-width:2':'stroke:gray;stroke-width:2';
              let sDis   = '<defs> <marker id="circle" markerWidth="8" markerHeight="8" refX="5" refY="5"> <circle cx="5" cy="5" r="3" fill="red" fill-opacity="0.51" /> </marker>   <marker id="arrow" markerWidth="8" markerHeight="8" refX="5" refY="5"> <circle cx="5" cy="5" r="2" fill="black" /> </marker></defs>';
              sDis      += '<line x1="'+this.getInfoNodo(lista_linkTraNodi[i].vertici[0]).nodo.posizione.x+
                                             '" y1="'+this.getInfoNodo(lista_linkTraNodi[i].vertici[0]).nodo.posizione.y+
                                             '" x2="'+this.getInfoNodo(lista_linkTraNodi[i].vertici[1]).nodo.posizione.x+
                                             '" y2="'+this.getInfoNodo(lista_linkTraNodi[i].vertici[1]).nodo.posizione.y+'" style="'+colore+'" marker-start="url(#circle)" marker-end="url(#arrow)"/>';
              lista_linkTraNodi[i].svg  = sDis;
          }
  
      





      lista_controllati       = [];
      da_eliminare            = [];
      let lista_linkPerCover  = this.cloneMyObj(lista_linkTraNodi.filter((el)=>{return el.tipo_profilo=="esterno";}));

      for(let i=0;i<lista_linkPerCover.length;i++)
      {
          //console.log(lista_linkPerCover[i]);
          //console.log(lista_linkPerCover[i].vertici[0], lista_linkPerCover[i].vertici[1], lista_linkPerCover[i].dir);
          if(!lista_controllati.includes(lista_linkPerCover[i].indice))
          {
              lista_controllati.push(lista_linkPerCover[i].indice);
                
              let start   = lista_linkPerCover[i].vertici[0];
              let end     = lista_linkPerCover[i].vertici[1];
              let dir     = lista_linkPerCover[i].dir;
              let new_end = end;
              
              let end_run = false;


              while(end_run==false)
                  {
                      let tmp =  lista_linkPerCover.filter((el)=>{return  el.dir==dir&&
                                                                          el.vertici.includes(new_end)&&
                                                                          !lista_controllati.includes(el.indice)
                                                                          });
                      if(tmp.length>0)
                          {
                              let pos_estremo = (tmp[0].vertici[0]==new_end)?1:0;    
                              //console.log(new_end);                                 
                              new_end  = tmp[0].vertici[pos_estremo];
                              lista_controllati.push(tmp[0].indice);
                              da_eliminare.push(tmp[0].indice);
                              //console.log(new_end);                                
                          }
                      else
                          end_run = true;                                                       
                  }
              

              
              // ora ripeto all'indietro
              
              end     = new_end;
              end_run = false;
              let new_start = start;
              
              while(end_run==false)
                  {
                      let tmp =  lista_linkPerCover.filter((el)=>{return  el.dir==dir&&
                                                                          el.vertici.includes(new_start)&&
                                                                          !lista_controllati.includes(el.indice)});
                      if(tmp.length>0)
                          {
                              let pos_estremo = (tmp[0].vertici[0]==new_start)?1:0; 
                              //console.log(new_start);
                              new_start  = tmp[0].vertici[pos_estremo];
                              lista_controllati.push(tmp[0].indice);
                              da_eliminare.push(tmp[0].indice);
                              //console.log(new_start);                                
                          }
                      else
                          end_run = true;                                                       
                  }

               lista_linkPerCover[i] = this.linkNodi(new_start, new_end, dir, lista_linkPerCover[i].indice, "esterno");       
          }
      }
      lista_linkPerCover         = lista_linkPerCover.filter((el)=>{return !da_eliminare.includes(el.indice);});
      for(let i=0;i<lista_linkPerCover.length;i++) lista_linkPerCover[i] = this.cloneMyObj(this.getCoverProfiles(lista_linkPerCover[i]));
      this.lista_linkPerCover    = this.cloneMyObj(lista_linkPerCover);

      let lista_angoliCover     = [];
      for(let i=0;i<lista_linkPerCover.length;i++)
      {
          for(let j=0;j<2;j++)
          {
              if(!lista_angoliCover.includes(lista_linkPerCover[i].vertici[j])) lista_angoliCover.push(lista_linkPerCover[i].vertici[j]);
          }
          
      }
      this.lista_angoliCover = this.cloneMyObj(lista_angoliCover);
      for(let i=0;i<lista_angoliCover.length;i++) 
          this.profili.push(this.insert4BOM({name:'PROFILO L ANGOLO', n: 1,   gruppo:lista_angoliCover[i], lunghezza:12.6, codifica:this.ricodificaNodo(lista_angoliCover[i])}));





      return this.cloneMyObj(lista_linkTraNodi);
  }

  creaStripLED(strip)
  {  /*
      nodi:{start:start, stop:stop},
                                                  dir: dir,
                                                  lunghezza: lunghezza,
                                                  tipo: tipo,
                                                  lato: lato  
                                                  })
     */
    const MAXLUNSTRIP = 740;

    let out_1         = this.cloneMyObj(strip);
    let out_2         = this.cloneMyObj(strip);
    let pezzi         = (strip.lunghezza<2*MAXLUNSTRIP)?((strip.lunghezza>MAXLUNSTRIP)?2:1):0;
    

    /*
    out.power_tot = parseFloat(6.8*strip.lunghezza/100);
    out.pezzi     = (strip.lunghezza<2*MAXLUNSTRIP)?((strip.lunghezza>MAXLUNSTRIP)?2:1):0;
    out.power     = (out.pezzi>0)?parseFloat(out.power_tot/out.pezzi):0;
    */

    // se ci sono due pezzi devo dividere le lunghezze ed aggiungere una strip
    if(pezzi>1)
    {
      out_1.lunghezza                     = strip.lunghezza/2;
      out_2.lunghezza                     = strip.lunghezza/2;

      out_1.nodi.stop.nodo.etk            = strip.nodi.stop.nodo.etk+'#';
      out_1.nodi.stop.nodo.posizione.x    = parseFloat((strip.nodi.start.nodo.posizione.x+strip.nodi.stop.nodo.posizione.x)/2);
      out_1.nodi.stop.nodo.posizione.y    = parseFloat((strip.nodi.start.nodo.posizione.y+strip.nodi.stop.nodo.posizione.y)/2);
      if(strip.nodi.start.nodo.posizione.y==strip.nodi.stop.nodo.posizione.y) out_1.nodi.start.nodo.posizione.x += this.cost.offsetPerLED;
      if(strip.nodi.start.nodo.posizione.x==strip.nodi.stop.nodo.posizione.x) out_1.nodi.start.nodo.posizione.y += this.cost.offsetPerLED;
      out_1.power                         = parseFloat(6.8*out_1.lunghezza/100);
      
      out_2.nodi.start.nodo.etk           = strip.nodi.stop.nodo.etk+'#';
      out_2.nodi.start.nodo.posizione.x   = out_1.nodi.stop.nodo.posizione.x;
      out_2.nodi.start.nodo.posizione.y   = out_1.nodi.stop.nodo.posizione.y;
      if(strip.nodi.start.nodo.posizione.y==strip.nodi.stop.nodo.posizione.y) out_2.nodi.stop.nodo.posizione.x -= this.cost.offsetPerLED;
      if(strip.nodi.start.nodo.posizione.x==strip.nodi.stop.nodo.posizione.x) out_2.nodi.stop.nodo.posizione.y -= this.cost.offsetPerLED;
      out_2.power                         = parseFloat(6.8*out_2.lunghezza/100);


      //

      this.lista_stripLED.push(this.cloneMyObj(out_1));
      this.lista_stripLED.push(this.cloneMyObj(out_2));



    }
    else
    {
      out_1.power = parseFloat(6.8*strip.lunghezza/100);
      if(strip.nodi.start.nodo.posizione.y==strip.nodi.stop.nodo.posizione.y) out_1.nodi.start.nodo.posizione.x += this.cost.offsetPerLED;
      if(strip.nodi.start.nodo.posizione.x==strip.nodi.stop.nodo.posizione.x) out_1.nodi.start.nodo.posizione.y += this.cost.offsetPerLED;
      if(strip.nodi.start.nodo.posizione.y==strip.nodi.stop.nodo.posizione.y) out_1.nodi.stop.nodo.posizione.x -= this.cost.offsetPerLED;
      if(strip.nodi.start.nodo.posizione.x==strip.nodi.stop.nodo.posizione.x) out_1.nodi.stop.nodo.posizione.y -= this.cost.offsetPerLED;
      this.lista_stripLED.push(this.cloneMyObj(out_1));
    }


    
  }

  ottimizzaSTRIP()
  {
    // ordino le strip secondo la lunghezza

    this.lista_stripLED.sort((a, b) => {
      return a.lunghezza - b.lunghezza;
    });

    // attenzione: le strip white avrebbero anche la lunghezza da 3m, ma non la considero per unificare la funzione tra RGB e WHITE

    let n_strip = this.lista_stripLED.length; // numero di elementi indipendenti  
   
    let lista_NOS = [];
    for(let i=0;i<n_strip;i++)
    {
      let posizionato = false;
      //console.log('');
      //console.log(i, this.lista_stripLED[i].lunghezza);

      let minimo = {scarto:1000, indice:0};
      for(let j=0;j<lista_NOS.length;j++)
      {
        if(lista_NOS[j].pezzi<2 && 
            lista_NOS[j].resto>=this.lista_stripLED[i].lunghezza &&
            minimo.scarto > parseFloat(lista_NOS[j].resto-this.lista_stripLED[i].lunghezza) 
            )
          {
            minimo.scarto = parseFloat(lista_NOS[j].resto-this.lista_stripLED[i].lunghezza);
            minimo.indice = j;
            posizionato = true;
            //console.log('trovato NOS', j, minimo.scarto);            
          }
      }

      if(!posizionato)
      {
        //console.log('non ho trovato alcun NOS presente: ne aggiungo');
        let lun_ini = 700;//(this.lista_stripLED[i].lunghezza>500)?700:500; 
        lista_NOS.push({lunghezza: lun_ini,
                        pezzi:1, 
                        resto:parseFloat(lun_ini-this.lista_stripLED[i].lunghezza),
                        indice:lista_NOS.length 
                        });
        //console.log(this.cloneMyObj(lista_NOS));                
      }
      else
      {
          //console.log('NOS trovato: ', minimo.indice);
          lista_NOS[minimo.indice].pezzi++;
          lista_NOS[minimo.indice].resto = lista_NOS[minimo.indice].resto-this.lista_stripLED[i].lunghezza;
          //console.log(this.cloneMyObj(lista_NOS[minimo.indice]));                
      } 
    }
    
    for(let i=0;i<lista_NOS.length;i++)
    {
      let str = "NOS ";
      if(this.smOBJ.electronics.side.ab==2||this.smOBJ.electronics.side.bc==2||this.smOBJ.electronics.side.cd==2||this.smOBJ.electronics.side.ad==2) 
        str += "RGB ";
      else
      {
         if(this.smOBJ.electronics.side.ab==3||this.smOBJ.electronics.side.bc==3||this.smOBJ.electronics.side.cd==3||this.smOBJ.electronics.side.ad==3) 
            str += "4000K ";
         else
         {
           if(this.smOBJ.electronics.side.ab==2||this.smOBJ.electronics.side.bc==2||this.smOBJ.electronics.side.cd==2||this.smOBJ.electronics.side.ad==2) 
            str += "3000K ";
         } 
      }
      if(lista_NOS[i].lunghezza==700 && lista_NOS[i].resto>=200) lista_NOS[i].lunghezza = 500;
      if(lista_NOS[i].lunghezza==700) 
        str += "7m";
      else
        str += "5m";
      
      this.USINGComponents(str, 1, true);     

    }
    

    //console.log(lista_NOS);


    
  }



  getCoverProfiles(link){
      let n0 = this.getInfoNodo(link.vertici[0]);
      let n1 = this.getInfoNodo(link.vertici[1]);
      let dir= link.dir;

      //console.log('');
      
      let start        = {};
      let stop         = {};
      let lunghezza    = 0;
      let compensazione= -0.2;
      if(dir=="hor")
      {
         if(n1.nodo.posizione.x>n0.nodo.posizione.x) 
           {
               start   = this.cloneMyObj(n0);
               stop    = this.cloneMyObj(n1);
           }
         else
           {
               start   = this.cloneMyObj(n1);
               stop    = this.cloneMyObj(n0);
           }

           lunghezza = parseFloat(stop.nodo.posizione.x-start.nodo.posizione.x); 
           if(this.smOBJ.electronics.side.ad!==1 && start.nodo.posizione.y<=0 ||
              this.smOBJ.electronics.side.bc!==1 && start.nodo.posizione.y>0)
              {
                  let lato = (this.smOBJ.electronics.side.bc!==1 && start.nodo.posizione.y>0)?'BC':'AD';
                  let tipo = (lato=='BC')?this.smOBJ.electronics.side.bc:this.smOBJ.electronics.side.ad;
                  
                  
                  this.creaStripLED({nodi:{start:start, stop:stop},
                                                  dir: dir,
                                                  lunghezza: lunghezza,
                                                  tipo: tipo,
                                                  lato: lato  
                                                  });
              }  
                  
      }
      else
      {
        if(n1.nodo.posizione.y>n0.nodo.posizione.y) 
           {
             start   = this.cloneMyObj(n0);
             stop    = this.cloneMyObj(n1);
           }
        else
           {
             start   = this.cloneMyObj(n1);
             stop    = this.cloneMyObj(n0);
           }

           lunghezza = parseFloat(stop.nodo.posizione.y-start.nodo.posizione.y);
           if(this.smOBJ.electronics.side.ab!==1 && start.nodo.posizione.x<=0 ||
              this.smOBJ.electronics.side.cd!==1 && start.nodo.posizione.x>0)
              {
                  let lato = (this.smOBJ.electronics.side.cd!==1 && start.nodo.posizione.x>0)?'CD':'AB';
                  let tipo = (lato=='CD')?this.smOBJ.electronics.side.cd:this.smOBJ.electronics.side.ab;
                  
                  
                  this.creaStripLED({nodi:{start:start, stop:stop},
                                                  dir: dir,
                                                  lunghezza: lunghezza,
                                                  tipo: tipo,
                                                  lato: lato  
                                                  });
              }
      }

      link.lunghezza = parseFloat(lunghezza);
      link.vertici_ordinati = {start: start.nodo.etk, stop:stop.nodo.etk};
      link.tipo_profilo = 'cover';

      

      let BOM_etk = start.nodo.etk+'-'+stop.nodo.etk;
      let codifica= this.ricodificaNodo(start.nodo.etk)+this.ricodificaNodo(stop.nodo.etk);
      this.profili.push(this.insert4BOM({name:'PROFILO COVER ESTERNA', n: 1,   gruppo:BOM_etk, lunghezza:this.round(lunghezza+compensazione), codifica:codifica}));
        

      return this.cloneMyObj(link);
  }


  getMainProfiles(link){
     let n0 = this.getInfoNodo(link.vertici[0]);
     let n1 = this.getInfoNodo(link.vertici[1]);
     let dir= link.dir;

     //console.log('');
     
     
     let start        = {};
     let stop         = {};
     let lunghezza    = 0;
     if(dir=="hor")
     {
        if(n1.nodo.posizione.x>n0.nodo.posizione.x) 
          {
              start   = this.cloneMyObj(n0);
              stop    = this.cloneMyObj(n1);
          }
        else
          {
              start   = this.cloneMyObj(n1);
              stop    = this.cloneMyObj(n0);
          }

          lunghezza = parseFloat(stop.nodo.posizione.x-start.nodo.posizione.x);
          lunghezza -= start.nodo.geometric[0].start_profiles[0];  // 0 -> da dx, 0->x, 1->y
          lunghezza +=  stop.nodo.geometric[2].start_profiles[0];  // 2 -> da sx
     }
     else
     {
       if(n1.nodo.posizione.y>n0.nodo.posizione.y) 
          {
            start   = this.cloneMyObj(n0);
            stop    = this.cloneMyObj(n1);
          }
       else
          {
            start   = this.cloneMyObj(n1);
            stop    = this.cloneMyObj(n0);
          }

          lunghezza = parseFloat(stop.nodo.posizione.y-start.nodo.posizione.y);
          lunghezza -= start.nodo.geometric[3].start_profiles[1];  // 3 -> da sotto, 0->x, 1->y
          lunghezza +=  stop.nodo.geometric[1].start_profiles[1];  // 1 -> da sopra
     }

     link.lunghezza = lunghezza;
     link.piastra_compensazione = {inizio:false, fine:false, dir: dir};

     // tipo di profilo
     link.tipo_profilo = 'interno';
     if(start.nodo.tipo.split('*')[0] == "nodo esterno" || stop.nodo.tipo.split('*')[0] == "nodo esterno" ) link.tipo_profilo = "esterno";

     if(this.offset.d==0 && dir == "ver" &&
        !(this.checkTop('A',5)&&this.checkTop('B',6))
     )
      {
          if(['P1','A1','AB_S1', 'AB_S2', 'AB_A1', 'AB_A2'].includes(this.extract(link.vertici[0]))||
             ['P1','A1','AB_S1', 'AB_S2', 'AB_A1', 'AB_A2'].includes(this.extract(link.vertici[1]))
          )  link.tipo_profilo = "esterno"; 
      }

    if(this.offset.d==0 && dir == "hor" && (this.checkTop('A',5)&&this.checkTop('B',6))
     )
      {
          if(['P1a', 'A1c'].includes(this.extract(link.vertici[0]))||
             ['P1a', 'A1c'].includes(this.extract(link.vertici[1]))
          )  link.tipo_profilo = "esterno"; 
      }  

      if(this.offset.a==0  && dir == "hor"&&
        !(this.checkTop('A',7)&&this.checkTop('D',8))
      )
      {
          if(['P1','P2','AD_S1', 'AD_S2', 'AD_A1', 'AD_A2'].includes(this.extract(link.vertici[0]))||
             ['P1','P2','AD_S1', 'AD_S2', 'AD_A1', 'AD_A2'].includes(this.extract(link.vertici[1]))
           )  link.tipo_profilo = "esterno"; 
      }

      if(this.offset.a==0 && dir == "ver" && (this.checkTop('A',7)&&this.checkTop('D',8))
      )
      {
          if(['P1d', 'P2b'].includes(this.extract(link.vertici[0]))||
             ['P1d', 'P2b'].includes(this.extract(link.vertici[1]))
          )  link.tipo_profilo = "esterno"; 
      }  





      if(this.offset.b==0  && dir == "ver"&&
        !(this.checkTop('D',5)&&this.checkTop('C',6)))
      {
          if(['P2','A2','CD_S1', 'CD_S2', 'CD_A1', 'CD_A2'].includes(this.extract(link.vertici[0]))||
             ['P2','A2','CD_S1', 'CD_S2', 'CD_A1', 'CD_A2'].includes(this.extract(link.vertici[1]))
          )  link.tipo_profilo = "esterno"; 
      }
      if(this.offset.c==0  && dir == "hor"&&
        !(this.checkTop('B',7)&&this.checkTop('C',8)))
      {
          if(['A1','A2','BC_S1', 'BC_S2', 'BC_A1', 'BC_A2'].includes(this.extract(link.vertici[0]))||
             ['A1','A2','BC_S1', 'BC_S2', 'BC_A1', 'BC_A2'].includes(this.extract(link.vertici[1]))
          )  link.tipo_profilo = "esterno"; 
      }






     //console.log(start.nodo.etk, stop.nodo.etk, parseInt(lunghezza*10)/10, link.tipo_profilo);    
     
     // costruzione della BOM
     let BOM_etk = start.nodo.etk+'-'+stop.nodo.etk;
     let codifica= this.ricodificaNodo(start.nodo.etk)+this.ricodificaNodo(stop.nodo.etk);

     let compensazione = {pr_esterno: 0, 
                          pr_interno: 0, 
                          pr_con_cava:0, 
                          pr_a_C:     0, 
                          pr_a_L:     0, 
                          guarnizione:0}

     switch (link.tipo_profilo) {
      case "esterno":      
          //console.log(start);
          if(start.nodo.tipo == "nodo esterno")
              {
                  compensazione.pr_con_cava  += 22.9;
                  compensazione.pr_a_C       += (22.9 - 1.6); 
              }
          if(stop.nodo.tipo == "nodo esterno")
              {
                  compensazione.pr_con_cava  += 22.9;
                  compensazione.pr_a_C       += (22.9 - 1.6);  
              }
          this.profili.push(this.insert4BOM({name:'PROFILO STRUTTURALE ESTERNO', n: 1,   gruppo:BOM_etk, lunghezza:this.round(lunghezza+1*compensazione.pr_esterno), codifica:codifica}));
          this.profili.push(this.insert4BOM({name:'PROFILO CON CAVA',            n: 1,   gruppo:BOM_etk, lunghezza:this.round(lunghezza+1*compensazione.pr_con_cava), codifica:codifica}));
          this.profili.push(this.insert4BOM({name:'PROFILO A C',                 n: 1,   gruppo:BOM_etk, lunghezza:this.round(lunghezza+1*compensazione.pr_a_C), codifica:codifica}));
          this.profili.push(this.insert4BOM({name:'GUARNIZIONE A FUNGO EXT',     n: 2,   gruppo:BOM_etk, lunghezza:this.round(lunghezza+1*compensazione.guarnizione), codifica:codifica}));                    
          this.profili.push(this.insert4BOM({name:'PROFILO A L',                 n: 1,   gruppo:BOM_etk, lunghezza:this.round(lunghezza+1*compensazione.pr_a_L), codifica:codifica}));

          this.altro.push(  this.insert4BOM({name:'CLIPS',                       n: this.calcolaClips(lunghezza),   gruppo:BOM_etk, lunghezza:this.round(0), codifica:codifica}));
          this.altro.push(  this.insert4BOM({name:'VITI CLIPS',                  n: this.calcolaClips(lunghezza),   gruppo:BOM_etk, lunghezza:this.round(0), codifica:codifica}));
          this.altro.push(  this.insert4BOM({name:'VITI PROFILO CON CAVA',       n: this.calcolaClips(lunghezza),   gruppo:BOM_etk, lunghezza:this.round(0), codifica:codifica}));
           
          break;
     
      case "interno":
          this.profili.push(this.insert4BOM({name:'PROFILO STRUTTURALE INTERNO', n: 1,   gruppo:BOM_etk, lunghezza:this.round(lunghezza+compensazione.pr_interno), codifica:codifica}));
          this.profili.push(this.insert4BOM({name:'GUARNIZIONE A FUNGO EXT',     n: 2,   gruppo:BOM_etk, lunghezza:this.round(lunghezza+compensazione.guarnizione), codifica:codifica}));                                
          break;

      default:
          break;
     }

     // check per staffa compensazione angolo
     //console.log('');
     //console.log(start.nodo.etk, stop.nodo.etk, dir);
     //console.log(start.nodo.posType, stop.nodo.posType, dir);

     if(dir=='ver')
      {
          if(['BR', 'BL'].includes(start.nodo.posType))  link.piastra_compensazione.inizio    = true;
          if(['TR', 'TL'].includes( stop.nodo.posType))  link.piastra_compensazione.fine     = true;
      }
      else
      {
          if(['TR', 'BR'].includes(start.nodo.posType))  link.piastra_compensazione.inizio    = true;
          if(['TL', 'BL'].includes( stop.nodo.posType))  link.piastra_compensazione.fine     = true;
      }  

     //console.log(link.piastra_compensazione.inizio, link.piastra_compensazione.fine, dir);

       
    
     link.hidden = false;

     if(start.nodo.hidden.isHidden && stop.nodo.hidden.isHidden && link.piastra_compensazione.inizio) {link.piastra_compensazione.inizio = false; link.hidden = true;}
     if(start.nodo.hidden.isHidden && stop.nodo.hidden.isHidden && link.piastra_compensazione.fine)   {link.piastra_compensazione.fine   = false; link.hidden = true;}

     link.vertici_ordinati = {start: start.nodo.etk, stop:stop.nodo.etk};  
     ///////////////////////////////////////////////////////////////
     link.svgPiastre = this.svgPiastreCompensazione(link);


     return this.cloneMyObj(link);
  }

  round(x, digit = 1){ 
      return parseFloat(x);//;parseInt(x*Math.pow(10, digit))/Math.pow(10, digit);
  }

  calcolaClips(lunghezza){
      let passo = 40; //cm
      let z_clips   = Math.floor(lunghezza/passo);
      return parseInt(z_clips+1);
  }

  convertNumberToLetters(number) {

    // L'alfabeto di 52 caratteri
      const alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
      const base = alphabet.length; // La nostra base è 52

      // Verifica se il numero è un intero non negativo
      if (!Number.isInteger(number) || number < 0) {
        return "Inserisci un numero intero non negativo.";
      }
      
      // Se il numero è 0, restituisci la prima lettera dell'alfabeto
      if (number === 0) {
        return alphabet[0];
      }

      let result = "";
      let tempNumber = number;

      // Finchè il numero è maggiore di 0, continua a dividere per la nostra base (52)
      while (tempNumber > 0) {
        let remainder = tempNumber % base;
        result = alphabet[remainder] + result;
        tempNumber = Math.floor(tempNumber / base);
      }

      return result;

 }


  insert4BOM(obj){
      let out = {};
      
      let code = this.PEDANA_COMPONENTS_FLAG.filter((el)=>{return el.name==obj.name;});
      if(code.length>0)
      {
          //console.log( obj.name ,  obj.lunghezza, obj.n)
          out.index       = this.BOM.length;
          out.name        = obj.name;
          out.smeup       = code[0].smeup;
          out.counter     = obj.n;
          out.ref         = obj.gruppo.toUpperCase();
          out.codifica    = obj.codifica;
          out.lunghezza   = obj.lunghezza;
          out.peso        = (['01', '02', '03'].includes(code[0].smeup.substring(0,2)))?parseFloat(code[0].peso*obj.n*obj.lunghezza/100):parseFloat(code[0].peso*obj.n);
          
          out.newcode     = out.codifica+this.convertNumberToLetters(parseInt(out.smeup));

          this.BOM.push(this.cloneMyObj(out));

         // for(let i=0;i<obj.n;i++) this.USINGComponentsPEDANA(obj.name, 'xx',  obj.gruppo,  obj.lunghezza);
      }
      else
      {
          console.log(obj.name,' not found!');            
      }
      return this.cloneMyObj(out);
  }


  CaricaCOMPONENTFLAGS_PEDANA_fromBOM()
  {
    // pulisco BOM
    this.BOM = this.cloneMyObj(this.BOM.filter((el)=>{return el.counter>0;}));

    for(let i=0;i<this.BOM.length;i++)
    {
      for(let j=0;j<this.BOM[i].counter;j++) this.USINGComponentsPEDANA(this.BOM[i].name, 'xx',  this.BOM[i].ref,  this.BOM[i].lunghezza);
    }
  }

  ElaboraBOMperSMEUP()
  {
    // lista codici da trasformare da lunghezza in pz (a causa di ml)
    let lista_ml = ['020182'];
    for(let i=0;i<lista_ml.length;i++)
    {
      let totale = 0;
      let tmp = this.BOM.filter((el)=>{return el.smeup==lista_ml[i];});
      if(tmp.length>0)
      {
        for(let j=0;j<tmp.length;j++)
          {
            totale += parseFloat(tmp[j].counter*tmp[j].lunghezza/100);
          }
        let clone = this.cloneMyObj(tmp[0]);
        clone.ref = 'ALL';
        clone.lunghezza = 0;
        clone.counter   = Math.ceil(totale*100)/100;
        this.BOM = this.cloneMyObj(this.BOM.filter((el)=>{return !(el.smeup==lista_ml[i]);}));
        this.BOM.push(this.cloneMyObj(clone));  
      }
    }
  }


  getInfoNodo(etk){
      if(etk==null)  return {index: null, nodo: {} };

      let index = this.lista_nodi.findIndex(el => {return el.etk === etk;});   
      //console.log(index+' '+etk);
      //console.log(this.cloneMyObj(this.lista_nodi[index]));
      return {index: index,
              nodo: this.cloneMyObj(this.lista_nodi[index])};
   }

   
  getPiastraGeometric(str){

   let piastre    = {};
   piastre.left   = {start: {x:0, y:0}, stop:{x:0, y:0}};
   piastre.top    = {start: {x:0, y:0}, stop:{x:0, y:0}};
   piastre.right  = {start: {x:0, y:0}, stop:{x:0, y:0}};
   piastre.bottom = {start: {x:0, y:0}, stop:{x:0, y:0}};

   switch (str) {
      case 'TL':
          piastre.top    = {start: {x:0, y:0}, stop:{x:21.2, y:0}};
          piastre.left  = {start: {x:0, y:0}, stop:{x:0, y:21.2}};
      break;

      case 'TR':
          piastre.right   = {start: {x:0, y:0}, stop:{x:0, y:21.2}};
          piastre.top    = {start: {x:0, y:0}, stop:{x:-21.2, y:0}};
      break;

      case 'BL':
          piastre.left  = {start: {x:0, y:0}, stop:{x:0, y:-21.2}};
          piastre.bottom = {start: {x:0, y:0}, stop:{x:21.2, y:0}};
      break;

      case 'BR':
          piastre.right   = {start: {x:0, y:0}, stop:{x:0, y:-21.2}};
          piastre.bottom = {start: {x:0, y:0}, stop:{x:-21.2, y:0}};
      break;
   
   }
   
   return this.cloneMyObj(piastre); 

   }

   changePiastraGeometric(nodoIn, str){
      let nodo = this.cloneMyObj(nodoIn);

      
      switch (nodo.posType) {
         case 'TL':
             if(str=='TR') nodo.posizione = {x:parseFloat(nodo.posizione.x+this.smOBJ.dimensioni.nominali.gamba), y:parseFloat(nodo.posizione.y)};
             if(str=='BL') nodo.posizione = {x:parseFloat(nodo.posizione.x), y:parseFloat(nodo.posizione.y+this.smOBJ.dimensioni.nominali.gamba)};
         break;
 
         case 'TR':
             if(str=='BR') nodo.posizione = {x:parseFloat(nodo.posizione.x), y:parseFloat(nodo.posizione.y+this.smOBJ.dimensioni.nominali.gamba)};
         break;
 
         case 'BL':
              if(str=='BR') nodo.posizione = {x:parseFloat(nodo.posizione.x+this.smOBJ.dimensioni.nominali.gamba), y:parseFloat(nodo.posizione.y)};                
         break;
 
         case 'BR':
             console.log('unmanaged!');
         break;
      
      }
        

      nodo.posType        = str;
      
      return this.cloneMyObj(nodo); 
 
  }

  initGeometric(nodoIn)
  {
      let nodo = this.cloneMyObj(nodoIn);
      let start_profiles  = [0, 0];
      nodo.piastre        = {};

      nodo.piastre.left   = {start: {x:0, y:0}, stop:{x:0, y:0}}
      nodo.piastre.top    = {start: {x:0, y:0}, stop:{x:0, y:0}}
      nodo.piastre.right  = {start: {x:0, y:0}, stop:{x:0, y:0}}
      nodo.piastre.bottom = {start: {x:0, y:0}, stop:{x:0, y:0}}

      nodo.rotation       = 0;

       
      nodo.geometric  = [];
      for(let i=0;i<4;i++) 
          {
              nodo.geometric[i]                = {};   
              nodo.geometric[i].start_profiles = this.cloneMyObj(start_profiles);
          }   
      return this.cloneMyObj(nodo);
  }

  paramNodo(nodoIn)
  {
      let nodo = this.cloneMyObj(nodoIn);

      nodo = this.cloneMyObj(this.initGeometric(nodo));

      let etk = this.extract(nodo.etk);
      let c   = {nodo_esterno: 23,
                 start_nodo_esterno: 4.82,
                 piastra_nodo: 21.2,
                 start_piastra_nodo: 4.45,
                 start_piastra_profilo: 18.9
      }
      let gain_a_muro = (nodo.tipo.split('-').length>0 && nodo.tipo.split('-')[1] == 'muro')?0:1;

      if(this.checkTop('A',5)&&this.checkTop('B',6))
          {
              if(['P1', 'P1a'].includes(etk))     nodo = this.cloneMyObj(this.changePiastraGeometric(nodo, 'TR'));
              if(['A1', 'A1c'].includes(etk))     nodo = this.cloneMyObj(this.changePiastraGeometric(nodo, 'BR'));
              if(etk.split('_')[0]=='AB')         nodo = this.cloneMyObj(this.changePiastraGeometric(nodo, 'TR'));    
          }

      if(this.checkTop('A',7)&&this.checkTop('D',8))
          {
              if(['P1', 'P1d'].includes(etk))     nodo = this.cloneMyObj(this.changePiastraGeometric(nodo, 'BL'));
              if(['P2', 'P2b'].includes(etk))     nodo = this.cloneMyObj(this.changePiastraGeometric(nodo, 'BR'));
              if(etk.split('_')[0]=='AD')         nodo = this.cloneMyObj(this.changePiastraGeometric(nodo, 'BL'));    
          } 

      switch(nodo.tipo)
      {
       
          case "nodo esterno":
          case "nodo esterno-muro":
              if(nodo.posType=='TL') 
                  {
                      nodo.geometric[0].start_profiles = [this.cost.nodo_esterno*gain_a_muro, this.cost.start_nodo_esterno];
                      nodo.geometric[1].start_profiles = [this.cost.start_nodo_esterno, 0];
                      nodo.geometric[2].start_profiles = [0, this.cost.start_nodo_esterno];
                      nodo.geometric[3].start_profiles = [this.cost.start_nodo_esterno, this.cost.nodo_esterno*gain_a_muro];

                      if(etk=='P1d') nodo.geometric[3].start_profiles = [0, this.cost.nodo_esterno*gain_a_muro];

                      nodo.rotation       = 0;
                  }
      
              if(nodo.posType=='TR') 
                  {
                      nodo.geometric[0].start_profiles = [0, this.cost.start_nodo_esterno];
                      nodo.geometric[1].start_profiles = [-this.cost.nodo_esterno+this.cost.start_nodo_esterno, 0];
                      nodo.geometric[2].start_profiles = [-this.cost.nodo_esterno*gain_a_muro, this.cost.start_nodo_esterno];
                      nodo.geometric[3].start_profiles = [-this.cost.nodo_esterno+this.cost.start_nodo_esterno, this.cost.nodo_esterno*gain_a_muro];
                      nodo.rotation       = 90;
                  } 
              
              if(nodo.posType=='BL') 
                  {
                      nodo.geometric[0].start_profiles = [this.cost.nodo_esterno*gain_a_muro, -this.cost.nodo_esterno+this.cost.start_nodo_esterno];
                      nodo.geometric[1].start_profiles = [this.cost.start_nodo_esterno, -this.cost.nodo_esterno*gain_a_muro];
                      nodo.geometric[2].start_profiles = [0, -this.cost.nodo_esterno+this.cost.start_nodo_esterno];
                      nodo.geometric[3].start_profiles = [this.cost.start_nodo_esterno, 0];
                      nodo.rotation       = 270;
                  }
              
              if(nodo.posType=='BR')  
                  {
                      nodo.geometric[0].start_profiles = [0, -this.cost.nodo_esterno+this.cost.start_nodo_esterno];
                      nodo.geometric[1].start_profiles = [-this.cost.nodo_esterno+this.cost.start_nodo_esterno, -this.cost.nodo_esterno*gain_a_muro];
                      nodo.geometric[2].start_profiles = [-this.cost.nodo_esterno*gain_a_muro, -this.cost.nodo_esterno+this.cost.start_nodo_esterno];
                      nodo.geometric[3].start_profiles = [-this.cost.nodo_esterno+this.cost.start_nodo_esterno, 0];
                      nodo.rotation       = 180;
                  } 
          break;

         
          case "nodo gamba":
              if(nodo.posType=='TL') 
              {
                  nodo.geometric[0].start_profiles = [this.cost.piastra_nodo, this.cost.start_piastra_nodo];
                  nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, 0];
                  nodo.geometric[2].start_profiles = [0, this.cost.start_piastra_nodo];
                  nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, this.cost.piastra_nodo];
                  nodo.rotation       = 0;
              }

              if(nodo.posType=='TR') 
              {
                  nodo.geometric[0].start_profiles = [0, this.cost.start_piastra_nodo];
                  nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                  nodo.geometric[2].start_profiles = [-this.cost.piastra_nodo, this.cost.start_piastra_nodo];
                  nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, this.cost.piastra_nodo];
                  nodo.rotation       = 90;
              }

              if(nodo.posType=='BL') 
              {
                  nodo.geometric[0].start_profiles = [this.cost.piastra_nodo, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                  nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, -this.cost.piastra_nodo];
                  nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                  nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, 0];
                  nodo.rotation       = 270;
              }
              
              if(nodo.posType=='BR') 
              {    
                  nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                  nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, -this.cost.piastra_nodo];
                  nodo.geometric[2].start_profiles = [-this.cost.piastra_nodo, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                  nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                  nodo.rotation       = 180;
              }

              
          break; 
          
          case "nodo semplice":
          case "nodo semplice-muro":

              if(nodo.posType=='TL') 
                  {
                      if(etk=='P1d' || etk.split('_')[0]=='AB')
                      {
                          nodo.geometric[0].start_profiles = [gain_a_muro*this.cost.start_piastra_profilo, this.cost.start_piastra_nodo];
                          nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, 0];
                          nodo.geometric[2].start_profiles = [0, this.cost.start_piastra_nodo];
                          nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, 0];
                      }

                      if(etk=='P1a' || etk.split('_')[0]=='AD')
                          {
                              nodo.geometric[0].start_profiles = [0, this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, 0];
                              nodo.geometric[2].start_profiles = [0, this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, gain_a_muro*this.cost.start_piastra_profilo];
                          }
                      
                  }

              if(nodo.posType=='TR') 
                  {
                      if(etk=='P2b' || etk.split('_')[0]=='CD')
                      {
                          nodo.geometric[0].start_profiles = [0, this.cost.start_piastra_nodo];
                          nodo.geometric[1].start_profiles = [-this.cost.nodo_esterno+this.cost.start_nodo_esterno, 0];
                          nodo.geometric[2].start_profiles = [-this.cost.start_piastra_profilo*gain_a_muro, this.cost.start_piastra_nodo];
                          nodo.geometric[3].start_profiles = [-this.cost.nodo_esterno+this.cost.start_nodo_esterno, 0];
                      }

                      if(etk=='P2a')
                          {
                              nodo.geometric[0].start_profiles = [0, this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                              nodo.geometric[2].start_profiles = [0, this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, gain_a_muro*this.cost.start_piastra_profilo];
                          }

                      // nel caso di accoppiamento 1, P1a passa da TL a TR
                      if(etk=='P1a')
                          {
                              nodo.geometric[0].start_profiles = [0, this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                              nodo.geometric[2].start_profiles = [0, this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, gain_a_muro*this.cost.start_piastra_profilo];
                          }    

                  }
                  
              if(nodo.posType=='BL') 
                  {
                      if(etk=='A1d')
                      {
                          nodo.geometric[0].start_profiles = [gain_a_muro*this.cost.start_piastra_profilo, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                          nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, 0];
                          nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                          nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, 0];
                      }

                      if(etk=='A1c' || etk.split('_')[0]=='BC')
                      {
                          nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                          nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, -this.cost.start_piastra_profilo*gain_a_muro];
                          nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                          nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, 0];
                      }

                      // nel caso di accoppiamento 2, P1d passa da TL a BL
                      if(etk=='P1d')
                          {
                              nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [0*this.cost.start_piastra_nodo, 0];
                              nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [0*this.cost.start_piastra_nodo, 0];
                          }  
                  } 
                  
              if(nodo.posType=='BR') 
                  {
                      if(etk=='A2c')
                      {
                          nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                          nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, -this.cost.start_piastra_profilo*gain_a_muro];
                          nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                          nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                      }

                      if(etk=='A2b')
                      {
                          nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                          nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                          nodo.geometric[2].start_profiles = [-this.cost.start_piastra_profilo*gain_a_muro, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                          nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                      }

                      // nel caso di accoppiamento 1, A1c passa da BL a BR
                      if(etk=='A1c')
                          {
                              nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, -this.cost.start_piastra_profilo*gain_a_muro];
                              nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                          }
                      
                      // nel caso di accoppiamento 2, P2b passa da TR a BR
                      if(etk=='P2b')
                          {
                              nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                              nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                          }  
                  }    
          break; 

          ////////////////////////////////////////////
          /// nodi virtuali
          case "nodo semplice*virtuale":
          case "nodo semplice-muro*virtuale":
          case "nodo gamba*virtuale":
          
  
                  if(nodo.posType=='TL') 
                      {
                          if(etk=='P1d' || etk.split('_')[0]=='AB')
                          {
                              nodo.geometric[0].start_profiles = [gain_a_muro*this.cost.start_piastra_profilo, this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, 0];
                              nodo.geometric[2].start_profiles = [this.cost.start_piastra_nodo, this.cost.start_piastra_nodo]; //[0, this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, 0];
                          }
  
                          if(etk=='P1a' || etk.split('_')[0]=='AD')
                              {
                                  nodo.geometric[0].start_profiles = [0, this.cost.start_piastra_nodo];
                                  nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, 0];
                                  nodo.geometric[2].start_profiles = [0, this.cost.start_piastra_nodo];
                                  nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, gain_a_muro*this.cost.start_piastra_profilo];
                              }
                          
                      }
  
                  if(nodo.posType=='TR') 
                      {
                          if(etk=='P2b' || etk.split('_')[0]=='CD')
                          {
                              nodo.geometric[0].start_profiles = [0, this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [-this.cost.nodo_esterno+this.cost.start_nodo_esterno, 0];
                              nodo.geometric[2].start_profiles = [-this.cost.start_piastra_profilo*gain_a_muro, this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [-this.cost.nodo_esterno+this.cost.start_nodo_esterno, 0];
                          }
  
                          if(etk=='P2a')
                              {
                                  nodo.geometric[0].start_profiles = [0, this.cost.start_piastra_nodo];
                                  nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                                  nodo.geometric[2].start_profiles = [0, this.cost.start_piastra_nodo];
                                  nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, gain_a_muro*this.cost.start_piastra_profilo];
                              }
  
                          // nel caso di accoppiamento 1, P1a passa da TL a TR
                          if(etk=='P1a')
                              {
                                  nodo.geometric[0].start_profiles = [0, this.cost.start_piastra_nodo];
                                  nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                                  nodo.geometric[2].start_profiles = [0, this.cost.start_piastra_nodo];
                                  nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, gain_a_muro*this.cost.start_piastra_profilo];
                              }    
  
                      }
                      
                  if(nodo.posType=='BL') 
                      {
                          if(etk=='A1d')
                          {
                              nodo.geometric[0].start_profiles = [gain_a_muro*this.cost.start_piastra_profilo, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, 0];
                              nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, 0];
                          }
  
                          if(etk=='A1c' || etk.split('_')[0]=='BC')
                          {
                              nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, -this.cost.start_piastra_profilo*gain_a_muro];
                              nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, 0];
                          }
  
                          // nel caso di accoppiamento 2, P1d passa da TL a BL
                          if(etk=='P1d')
                              {
                                  nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                                  nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, 0];
                                  nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                                  nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, 0];
                              }  
                      } 
                      
                  if(nodo.posType=='BR') 
                      {
                          if(etk=='A2c')
                          {
                              nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, -this.cost.start_piastra_profilo*gain_a_muro];
                              nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                          }
  
                          if(etk=='A2b')
                          {
                              nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                              nodo.geometric[2].start_profiles = [-this.cost.start_piastra_profilo*gain_a_muro, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                              nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                          }
  
                          // nel caso di accoppiamento 1, A1c passa da BL a BR
                          if(etk=='A1c')
                              {
                                  nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                                  nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, -this.cost.start_piastra_profilo*gain_a_muro];
                                  nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                                  nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                              }
                          
                          // nel caso di accoppiamento 2, P2b passa da TR a BR
                          if(etk=='P2b')
                              {
                                  nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                                  nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                                  nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                                  nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                              }  
                      }                        
              break; 

          ////////////////////////////////////////////
          /// nodi fissi

          case "nodo esterno+fissov":
              if(nodo.posType=='TL')
                {
                  nodo.geometric[0].start_profiles = [0, 0];
                  nodo.geometric[1].start_profiles = [0, 0];
                  nodo.geometric[2].start_profiles = [0, 0];
                  nodo.geometric[3].start_profiles = [0, 0];
                } 
              if(nodo.posType=='TR')
                {
                  nodo.geometric[0].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                  nodo.geometric[1].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                  nodo.geometric[2].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                  nodo.geometric[3].start_profiles = [-this.cost.piastra_nodo+this.cost.start_piastra_nodo, 0];
                }
          break;
          
          case "nodo esterno+fissoh":
              if(nodo.posType=='BL')
                {
                  nodo.geometric[0].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                  nodo.geometric[1].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                  nodo.geometric[2].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                  nodo.geometric[3].start_profiles = [0, -this.cost.piastra_nodo+this.cost.start_piastra_nodo];
                } 
              if(nodo.posType=='BR')
                {
                  nodo.geometric[0].start_profiles = [0, 0];
                  nodo.geometric[1].start_profiles = [0, 0];
                  nodo.geometric[2].start_profiles = [0, 0];
                  nodo.geometric[3].start_profiles = [0, 0];
                }
              if(nodo.posType=='TL')
                {
                  nodo.geometric[0].start_profiles = [0, this.cost.start_piastra_nodo];
                  nodo.geometric[1].start_profiles = [0, this.cost.start_piastra_nodo];
                  nodo.geometric[2].start_profiles = [0, this.cost.start_piastra_nodo];
                  nodo.geometric[3].start_profiles = [0, this.cost.start_piastra_nodo];
                }   
          break;  
          
          ////////////////////////////////////////////
          /// nodi per profili di zavorramento
          case 'zavorramento':
              if(nodo.posType=='TL') 
                  {                            
                          nodo.geometric[3].start_profiles = [this.cost.start_piastra_nodo, this.cost.piastra_su_profilo_esterno];
                  }               
                  
              if(nodo.posType=='BL') 
                  {                            
                          nodo.geometric[1].start_profiles = [this.cost.start_piastra_nodo, -this.cost.piastra_su_profilo_esterno];
                  }

              if(nodo.posType=='TR') 
                  {                            
                          nodo.geometric[0].start_profiles = [this.cost.piastra_su_profilo_esterno, this.cost.start_piastra_nodo];
                  }               
                  
              if(nodo.posType=='BR') 
                  {                            
                          nodo.geometric[2].start_profiles = [-this.cost.piastra_su_profilo_esterno, this.cost.start_piastra_nodo];
                  }      
                                  
          break;   

      }
      


      
      // imposto le piastre di compensazione sui nodi delle gamebe    
      if(nodo.tipo == 'nodo gamba')  nodo.piastre =  this.cloneMyObj(this.getPiastraGeometric(nodo.posType));    

      return this.cloneMyObj(nodo);
  }

  extract(str){
      return str.split('*')[0];
  }

  creaNodo(etk, etk_gamba_rif, offsetX, offsetY, isgamba, dependsOnPost, type = 'unset'){
      let nodo = {}
      nodo.etk        = etk;
      nodo.code       = this.ricodificaNodo(etk);
      nodo.gamba_rif  = etk_gamba_rif;
      nodo.offsetX    = offsetX;
      nodo.offsetY    = offsetY;
      nodo.isgamba    = isgamba;
      nodo.hidden     = {isHidden:false};
      nodo.posType    = type;   

      nodo.enabled   = true;
      if((offsetX!==null && Math.abs(offsetX)==0) || (offsetY!==null && Math.abs(offsetY)==0)) nodo.enabled = false;
      //if(etk=='P2') console.log(nodo.etk, offsetX, offsetY, nodo.enabled);


      if(offsetX == null) offsetX = 0;
      if(offsetY == null) offsetY = 0;

      

      // accoppiamenti tipo 1     
      if(this.checkTop('A',5)&&this.checkTop('B',6))
      {
          if(['P1', 'A1', 'AB_S1', 'AB_S2', 'AB_A1', 'AB_A2', 'P1a', 'A1c'].includes(etk)) 
              nodo.hidden.isHidden = true;            
      }

      // accoppiamenti tipo 2     
      if(this.checkTop('A',7)&&this.checkTop('D',8))
          {
              if(['P1', 'P2', 'AD_S1', 'AD_S2', 'AD_A1', 'AD_A2', 'P1d', 'P2b'].includes(etk)) 
                  nodo.hidden.isHidden = true;            
          }
      

      
      nodo.posizione = {x:parseFloat(this.getInfoGamba(etk_gamba_rif).posizione.assoluta.x+offsetX), 
                        y:parseFloat(this.getInfoGamba(etk_gamba_rif).posizione.assoluta.y+offsetY)};


      /// non capisco!                  
                        
      //if(dependsOnPost==true || isgamba==true)
      if(isgamba==true)
          {
            nodo.enabled = this.getInfoGamba(etk_gamba_rif).enabled; 
          }                  
      //console.log(nodo.etk, offsetX, offsetY, nodo.enabled);

      

      nodo.vicini    = {UP:{etk:null, marker:false}, LEFT:{etk:null, marker:false}, DOWN:{etk:null, marker:false}, RIGHT:{etk:null, marker:false}};  
      
      
      // identifico il tipo di nodo

      // condizioni per offset
                                                      nodo.tipo   = "nodo semplice";
      if(['EP1', 'EP2', 'EA1', 'EA2'].includes(etk))  nodo.tipo   = "nodo esterno";
      if(isgamba)                                     nodo.tipo   = "nodo gamba";

      if( this.extract(etk)  == 'A1d' &&  this.offset.c==0 && !(this.checkTop('B',7)&&this.checkTop('C',8)) )          nodo.tipo   = "nodo esterno";
      if( this.extract(etk)  == 'A2b' &&  this.offset.c==0 && !(this.checkTop('B',7)&&this.checkTop('C',8)) )          nodo.tipo   = "nodo esterno";                    
      if( this.extract(etk)  == 'P1d' &&  this.offset.a==0 && !(this.checkTop('A',7)&&this.checkTop('D',8)) )          nodo.tipo   = "nodo esterno";
      if( this.extract(etk)  == 'P2b' &&  this.offset.a==0 && !(this.checkTop('A',7)&&this.checkTop('D',8)) )          nodo.tipo   = "nodo esterno";
      if( this.extract(etk)  == 'P1a' &&  this.offset.d==0 && !(this.checkTop('A',5)&&this.checkTop('B',6)) )          nodo.tipo   = "nodo esterno";
      if( this.extract(etk)  == 'P2a' &&  this.offset.b==0 && !(this.checkTop('D',5)&&this.checkTop('C',6)) )          nodo.tipo   = "nodo esterno";
      if( this.extract(etk)  == 'A1c' &&  this.offset.d==0 && !(this.checkTop('A',5)&&this.checkTop('B',6)) )          nodo.tipo   = "nodo esterno";
      if( this.extract(etk)  == 'A2c' &&  this.offset.b==0 && !(this.checkTop('D',5)&&this.checkTop('C',6)) )          nodo.tipo   = "nodo esterno";

      // fissaggio a muro
      
      if(!this.checkType('A',1)&&!this.checkType('D',1) && this.smOBJ.optionals.pedana.add.AD!=='Profile')
      {
         if( ((['EP1', 'P1a', 'P2a', 'EP2'].includes(this.extract(nodo.etk)) || (this.extract(nodo.etk).split('-').length>1 && this.extract(nodo.etk).split('_')[0]=='AD') ) && this.smOBJ.optionals.pedana.a>0)||
             ((  ['P1d', 'P1', 'P2', 'P2b'].includes(this.extract(nodo.etk)) || (this.extract(nodo.etk).split('_')[0]=='AD') ) && this.smOBJ.optionals.pedana.a==0)
           ) 
         nodo.tipo += '-muro'; 
      }

      if(!this.checkType('B',1)&&!this.checkType('C',1) && this.smOBJ.optionals.pedana.add.BC!=='Profile')
      {
         if( ((['EA1', 'A1c', 'A2c', 'EA2'].includes(this.extract(nodo.etk)) || (this.extract(nodo.etk).split('-').length>1 && this.extract(nodo.etk).split('_')[0]=='BC') ) && this.smOBJ.optionals.pedana.c>0)||
             ((  ['A1d', 'A1', 'A2', 'A2b'].includes(this.extract(nodo.etk)) || (this.extract(nodo.etk).split('_')[0]=='BC') ) && this.smOBJ.optionals.pedana.c==0)
           ) 
         nodo.tipo += '-muro'; 
      }
       
      if(!this.checkType('A',1)&&!this.checkType('B',1) && this.smOBJ.optionals.pedana.add.AB!=='Profile')
      {
         if( ((['EP1', 'P1d', 'A1d', 'EA1'].includes(this.extract(nodo.etk)) || (this.extract(nodo.etk).split('-').length>1 && this.extract(nodo.etk).split('_')[0]=='AB') ) && this.smOBJ.optionals.pedana.d>0)||
             ((  ['P1a', 'P1', 'A1', 'A1c'].includes(this.extract(nodo.etk)) || (this.extract(nodo.etk).split('_')[0]=='AB') ) && this.smOBJ.optionals.pedana.d==0)
           ) 
         nodo.tipo += '-muro'; 
      }

      if(!this.checkType('D',1)&&!this.checkType('C',1) && this.smOBJ.optionals.pedana.add.CD!=='Profile')
      {
         if( ((['EP2', 'P2b', 'A2b', 'EA2'].includes(this.extract(nodo.etk)) || (this.extract(nodo.etk).split('-').length>1 && this.extract(nodo.etk).split('_')[0]=='CD') ) && this.smOBJ.optionals.pedana.b>0)||
             ((  ['P2a', 'P2', 'A2', 'A2c'].includes(this.extract(nodo.etk)) || (this.extract(nodo.etk).split('_')[0]=='CD') ) && this.smOBJ.optionals.pedana.b==0)
           ) 
         nodo.tipo += '-muro'; 
      }



      if(nodo.etk.split('*').length>1) nodo.tipo += '*virtuale';

      // creazione parametri 
      nodo = this.paramNodo(nodo); 
      //if(etk=='P2') console.log(this.cloneMyObj(nodo));
      return this.cloneMyObj(nodo);
  }


  gen_svgNodo(nodo)
  {
    let sDis = '';
    sDis += this.svgGoToPos(nodo.posizione, nodo.etk, this.svgNodoMarker(nodo.etk));

     
      switch (nodo.tipo) {
          case "nodo esterno":
              sDis += this.svgGoToPos(nodo.posizione, nodo.etk, this.svgNodoESTERNO(nodo));
              break;
          
          case "nodo gamba":
              sDis+= this.svgGoToPos(nodo.posizione, nodo.etk, this.svgNodoGAMBA(nodo));
              break;
              
          case "nodo semplice":
          case "nodo semplice-muro":
          case "nodo esterno-muro":
          case 'zavorramento':  
             sDis += this.svgGoToPos(nodo.posizione, nodo.etk, this.svgNodoSEMPLICE(nodo));    
          break;
          
          case "nodo gamba*virtuale": 
          case "nodo semplice*virtuale":
          case "nodo semplice-muro*virtuale":
          case "nodo esterno-muro*virtuale":
              sDis+= this.svgGoToPos(nodo.posizione, nodo.etk, this.svgNodoVIRTUALE(nodo)); 
          break;  

          case "nodo esterno+fissov":
          case "nodo esterno+fissoh":  
               sDis+= this.svgGoToPos(nodo.posizione, nodo.etk, this.svgNodoFISSO(nodo)); 
          break;  
      
          default:
              break;
      }
    return sDis;  
  }

  getRotation(vect2xy, rotdeg, abs){
      let cosd = Math.cos(rotdeg*Math.PI/180);
      let sind = Math.sin(rotdeg*Math.PI/180);
      let x    = vect2xy[0];
      let y    = vect2xy[1];
      if(abs)  return this.cloneMyObj([Math.abs(parseFloat(cosd*x-sind*y)), Math.abs(parseFloat(sind*x+cosd*y))]);
      else     return this.cloneMyObj([parseFloat(cosd*x-sind*y), parseFloat(sind*x+cosd*y)]);
  }



  cercaNodoAdiacente(etk, direzione, lista_nodi){
    let tmp       = lista_nodi.filter((el)=>{return el.etk==etk;})[0];
   

    let tmpRUN    = [];
    let etk_next  = null;


    if(etk.split('*').length<2)
    {
      switch(direzione)
      {
        case 'UP':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.x==tmp.posizione.x&&el.posizione.y<tmp.posizione.y&&el.enabled;});
        break;

        case 'LEFT':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.y==tmp.posizione.y&&el.posizione.x<tmp.posizione.x&&el.enabled;});
        break;

        case 'DOWN':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.x==tmp.posizione.x&&el.posizione.y>tmp.posizione.y&&el.enabled;});  
        break;

        case 'RIGHT':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.y==tmp.posizione.y&&el.posizione.x>tmp.posizione.x&&el.enabled;});
        break;
      }

      // devo eliminare come vicini i nodi intermedi che stanno su lati opposti LeiWLAN#2020
      if(tmpRUN.length>0 && etk.split('_').length>1)
      {  
         let toTest = etk.split('_')[0];
         tmpRUN = tmpRUN.filter((el)=>{return !(el.etk.split('_').length>1 && el.etk.split('_')[0]!==toTest);});
      }
      
      if(tmpRUN.length>0)
      {
        let minDistance = 10000;
        for(let i=0; i<tmpRUN.length;i++)
        {
            let distance = this.getNodeDistance(tmp.posizione, tmpRUN[i].posizione);
            if(distance<minDistance)
            {
                minDistance = distance;
                etk_next    = tmpRUN[i].etk;
            }
        }
      }
    } /////////////////////////////////////////////////////////////////////////////////////////
    else
    {
      switch(direzione)
      {
        case 'UP':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.x==tmp.posizione.x&&el.posizione.y<tmp.posizione.y&&el.etk.split('*').length>1;});
        break;

        case 'LEFT':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.y==tmp.posizione.y&&el.posizione.x<tmp.posizione.x&&el.etk.split('*').length>1;});
        break;

        case 'DOWN':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.x==tmp.posizione.x&&el.posizione.y>tmp.posizione.y&&el.etk.split('*').length>1;});  
        break;

        case 'RIGHT':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.y==tmp.posizione.y&&el.posizione.x>tmp.posizione.x&&el.etk.split('*').length>1;});
        break;
      }

      if(tmpRUN.length>0)
      {
          let minDistance = 10000;
          for(let i=0; i<tmpRUN.length;i++)
          {
              let distance = this.getNodeDistance(tmp.posizione, tmpRUN[i].posizione);
              if(distance<minDistance)
              {
                  minDistance = distance;
                  etk_next    = tmpRUN[i].etk;
              }
          }
      }
    }



    return etk_next;
  }
  
  cercaNodo(etk, direzione, lista_nodi){
    let tmp       = lista_nodi.filter((el)=>{return el.etk==etk;})[0];
   

    let tmpRUN    = [];
    let etk_next  = null;
    if(etk.split('*').length>1) return etk_next;

    if(etk.split('*').length<2)
    {
      switch(direzione)
      {
        case 'UP':
           tmpRUN = lista_nodi.filter((el)=>{return el.etk.split('*').length<2&&el.posizione.x==tmp.posizione.x&&el.posizione.y<tmp.posizione.y&&((el.offsetY==null||el.offsetY!==0)&&(el.offsetX==null||el.offsetX!==0));});
        break;

        case 'LEFT':
           tmpRUN = lista_nodi.filter((el)=>{return el.etk.split('*').length<2&&el.posizione.y==tmp.posizione.y&&el.posizione.x<tmp.posizione.x&&((el.offsetY==null||el.offsetY!==0)&&(el.offsetX==null||el.offsetX!==0));});
        break;

        case 'DOWN':
           tmpRUN = lista_nodi.filter((el)=>{return el.etk.split('*').length<2&&el.posizione.x==tmp.posizione.x&&el.posizione.y>tmp.posizione.y&&((el.offsetY==null||el.offsetY!==0)&&(el.offsetX==null||el.offsetX!==0));});  
        break;

        case 'RIGHT':
           tmpRUN = lista_nodi.filter((el)=>{return el.etk.split('*').length<2&&el.posizione.y==tmp.posizione.y&&el.posizione.x>tmp.posizione.x&&((el.offsetY==null||el.offsetY!==0)&&(el.offsetX==null||el.offsetX!==0));});
        break;
      }

      // devo eliminare come vicini i nodi intermedi che stanno su lati opposti LeiWLAN#2020
      if(tmpRUN.length>0 && etk.split('_').length>1)
      {  
         let toTest = etk.split('_')[0];
         tmpRUN = tmpRUN.filter((el)=>{return !(el.etk.split('_').length>1 && el.etk.split('_')[0]!==toTest);});
      }
      
      if(tmpRUN.length>0)
      {
        let minDistance = 10000;
        for(let i=0; i<tmpRUN.length;i++)
        {
            let distance = this.getNodeDistance(tmp.posizione, tmpRUN[i].posizione);
            if(distance<minDistance)
            {
                minDistance = distance;
                etk_next    = tmpRUN[i].etk;
            }
        }
      }
    } /////////////////////////////////////////////////////////////////////////////////////////
    else
    {
      switch(direzione)
      {
        case 'UP':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.x==tmp.posizione.x&&el.posizione.y<tmp.posizione.y&&el.etk.split('*').length>1;}); //1
        break;

        case 'LEFT':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.y==tmp.posizione.y&&el.posizione.x<tmp.posizione.x&&el.etk.split('*').length>1;});
        break;

        case 'DOWN':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.x==tmp.posizione.x&&el.posizione.y>tmp.posizione.y&&el.etk.split('*').length>1;});  
        break;

        case 'RIGHT':
           tmpRUN = lista_nodi.filter((el)=>{return el.posizione.y==tmp.posizione.y&&el.posizione.x>tmp.posizione.x&&el.etk.split('*').length>1;});
        break;
      }

      if(tmpRUN.length>0)
      {
          let minDistance = 10000;
          for(let i=0; i<tmpRUN.length;i++)
          {
              let distance = this.getNodeDistance(tmp.posizione, tmpRUN[i].posizione);
              if(distance<minDistance)
              {
                  minDistance = distance;
                  etk_next    = tmpRUN[i].etk;
              }
          }
      }
    }



    return etk_next;
  }


  getNumeroVicini(vicini)
  {
      
      let counter = [];
      if(vicini.DOWN.etk!==null   && vicini.DOWN.etk.length>0 )   counter.push(vicini.DOWN.etk);
      if(vicini.LEFT.etk!==null   && vicini.LEFT.etk.length>0 )   counter.push(vicini.LEFT.etk);
      if(vicini.RIGHT.etk!==null  && vicini.RIGHT.etk.length>0)   counter.push(vicini.RIGHT.etk);
      if(vicini.UP.etk!==null     && vicini.UP.etk.length>0   )   counter.push(vicini.UP.etk); 
      return this.cloneMyObj(counter);
  }

  getInfoVicini(vicini)
  {
      
      let counterHOR = [];
      let counterVER = [];

      if(vicini.DOWN.etk!==null   && vicini.DOWN.etk.length>0 )   counterVER.push(vicini.DOWN.etk);
      if(vicini.LEFT.etk!==null   && vicini.LEFT.etk.length>0 )   counterHOR.push(vicini.LEFT.etk);
      if(vicini.RIGHT.etk!==null  && vicini.RIGHT.etk.length>0)   counterHOR.push(vicini.RIGHT.etk);
      if(vicini.UP.etk!==null     && vicini.UP.etk.length>0   )   counterVER.push(vicini.UP.etk); 

      let out = {};
      out.ver = counterVER.length;
      out.hor = counterHOR.length;
      return out;
  }



  GeneraNodi(){
      let lista_nodi = [];
      lista_nodi.push(this.creaNodo('EP1', 'A', -this.offset.d,    -this.offset.a, false,  false, 'TL'));
      lista_nodi.push(this.creaNodo('P1a', 'A', null,              -this.offset.a, false,  true, 'TL'));
      lista_nodi.push(this.creaNodo('P2a', 'D', null,              -this.offset.a, false,  true, 'TR'));
      lista_nodi.push(this.creaNodo('EP2', 'D', +this.offset.b,    -this.offset.a, false,  false, 'TR'));

      lista_nodi.push(this.creaNodo('P1d', 'A', -this.offset.d,    null,           false,  true, 'TL'));
      lista_nodi.push(this.creaNodo('P1',  'A', null,              null,           true,   false, 'TL'));
      lista_nodi.push(this.creaNodo('P2',  'D', null,              null,           true,   false, 'TR'));
      lista_nodi.push(this.creaNodo('P2b', 'D', +this.offset.b,    null,           false,  true, 'TR'));

      lista_nodi.push(this.creaNodo('A1d', 'B', -this.offset.d,    null,           false,  true, 'BL'));
      lista_nodi.push(this.creaNodo('A1',  'B', null,              null,           true,   false, 'BL'));
      lista_nodi.push(this.creaNodo('A2',  'C', null,              null,           true,   false, 'BR'));
      lista_nodi.push(this.creaNodo('A2b', 'C', +this.offset.b,    null,           false,  true, 'BR'));

      lista_nodi.push(this.creaNodo('EA1', 'B', -this.offset.d,    +this.offset.c, false,  false, 'BL'));
      lista_nodi.push(this.creaNodo('A1c', 'B', null,              +this.offset.c, false,  true, 'BL'));
      lista_nodi.push(this.creaNodo('A2c', 'C', null,              +this.offset.c, false,  true, 'BR'));
      lista_nodi.push(this.creaNodo('EA2', 'C', +this.offset.b,    +this.offset.c, false,  false, 'BR'));

      //console.log(this.cloneMyObj(lista_nodi.filter((el)=>{return el.etk=='P2';})));





      // nodi per gambe intermedie lato AD
      let tmpAD = this.lista_POST.filter((el)=>{return el.etk.split('_')[0]=='AD';});
      for(let i=0;i<tmpAD.length;i++)
      {
          if(tmpAD[i].enabled) 
          {
              lista_nodi.push(this.creaNodo(tmpAD[i].etk,      tmpAD[i].etk, null,             null,            true,  false, 'TL'));            
              lista_nodi.push(this.creaNodo(tmpAD[i].etk+'-a', tmpAD[i].etk, null,             -this.offset.a,  false, false, 'TL'));
          }

          // nodi virtuali usati solo per lo zavorramento
          if(tmpAD[i].etk.split('_')[1]=='A1' && this.smOBJ.optionals.pedana.ballast.TIPO_BALLAST.split('-')[0]!=='0')
          {    
              lista_nodi.push(this.creaNodo(tmpAD[i].etk+'*',   tmpAD[i].etk, null,          null,            true,  false, 'TL'));            
              lista_nodi.push(this.creaNodo(tmpAD[i].etk+'-a*', tmpAD[i].etk, null,         -this.offset.a,   false, false, 'TL'));
          }
      }

      // nodi per gambe intermedie lato CD
      let tmpCD = this.lista_POST.filter((el)=>{return el.etk.split('_')[0]=='CD';});
      for(let i=0;i<tmpCD.length;i++)
      {
          if(tmpCD[i].enabled)
          {
              lista_nodi.push(this.creaNodo(tmpCD[i].etk,      tmpCD[i].etk, null,             null,            true,  false, 'TR'));
              lista_nodi.push(this.creaNodo(tmpCD[i].etk+'-b', tmpCD[i].etk, this.offset.b,    null,           false,  false, 'TR'));
          }

          // nodi virtuali usati solo per lo zavorramento
          if(tmpCD[i].etk.split('_')[1]=='A1' && this.smOBJ.optionals.pedana.ballast.TIPO_BALLAST.split('-')[0]!=='0')
          {
              lista_nodi.push(this.creaNodo(tmpCD[i].etk+'*',      tmpCD[i].etk, null,             null,            true,  false, 'TR'));
              lista_nodi.push(this.creaNodo(tmpCD[i].etk+'-b*', tmpCD[i].etk, this.offset.b,    null,           false,  false, 'TR'));
          }
      }
      
      // nodi per gambe intermedie lato BC
      let tmpBC = this.lista_POST.filter((el)=>{return el.etk.split('_')[0]=='BC';});
      for(let i=0;i<tmpBC.length;i++)
      {
          if(tmpBC[i].enabled)
          { 
              lista_nodi.push(this.creaNodo(tmpBC[i].etk,      tmpBC[i].etk, null,             null,            true,  false, 'BL'));
              lista_nodi.push(this.creaNodo(tmpBC[i].etk+'-c', tmpBC[i].etk, null,             this.offset.c,   false, false, 'BL'));
          }

          // nodi virtuali usati solo per lo zavorramento
          if(tmpBC[i].etk.split('_')[1]=='A1' && this.smOBJ.optionals.pedana.ballast.TIPO_BALLAST.split('-')[0]!=='0')
          {
              lista_nodi.push(this.creaNodo(tmpBC[i].etk+'*',      tmpBC[i].etk, null,             null,            true,  false, 'BL'));
              lista_nodi.push(this.creaNodo(tmpBC[i].etk+'-c*', tmpBC[i].etk, null,             this.offset.c,   false, false, 'BL'));
          }    
      }

      // nodi per gambe intermedie lato AB
      let tmpAB = this.lista_POST.filter((el)=>{return el.etk.split('_')[0]=='AB';});
      for(let i=0;i<tmpAB.length;i++)
      {
          if(tmpAB[i].enabled)
          { 
              lista_nodi.push(this.creaNodo(tmpAB[i].etk,      tmpAB[i].etk, null,             null,            true,  false, 'TL'));
              lista_nodi.push(this.creaNodo(tmpAB[i].etk+'-d', tmpAB[i].etk, -this.offset.d,   null,            false, false, 'TL'));
          }
          // nodi virtuali usati solo per lo zavorramento
          if(tmpAB[i].etk.split('_')[1]=='A1' && this.smOBJ.optionals.pedana.ballast.TIPO_BALLAST.split('-')[0]!=='0')
          {
              lista_nodi.push(this.creaNodo(tmpAB[i].etk+'*',      tmpAB[i].etk, null,             null,            true,  false, 'TL'));
              lista_nodi.push(this.creaNodo(tmpAB[i].etk+'-d*', tmpAB[i].etk, -this.offset.d,   null,            false, false, 'TL'));
          }    
      }


      //console.log("");
      //console.log(this.cloneMyObj(lista_nodi));
      // ora costruisco i vicini di ogni nodo        
      lista_nodi  = this.cloneMyObj(lista_nodi);
      let lista   = this.cloneMyObj(lista_nodi);  // clone temporaneo, solo per input

      for(let i=0;i<lista_nodi.length;i++)
      {
          if(lista_nodi[i].enabled)
          {
          let etkRUN = lista_nodi[i].etk;
          lista_nodi[i].vicini = {UP:     {etk: this.cercaNodoAdiacente(etkRUN,       'UP',      lista), marker:false}, 
                                  LEFT:   {etk: this.cercaNodoAdiacente(etkRUN,     'LEFT',      lista), marker:false}, 
                                  DOWN:   {etk: this.cercaNodoAdiacente(etkRUN,     'DOWN',      lista), marker:false}, 
                                  RIGHT:  {etk: this.cercaNodoAdiacente(etkRUN,    'RIGHT',      lista), marker:false}
                                 };   
          }                       
      }
      //console.log(this.cloneMyObj(lista_nodi));

      ////////////////////////////////////////////////////////////////////////////////// 


      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      
      let toBeRemoved = []; 
      for(let i=0;i<lista_nodi.length;i++)
      {
          // controllo se i "nodi gamba intermedia" hanno più di due nodi adiacenti: in caso positivo tolgo i nodi verso i profili esterni
          if(['AB', 'BC', 'CD', 'AD'].includes(lista_nodi[i].etk.split('_')[0]) && lista_nodi[i].isgamba && lista_nodi[i].etk.split('*').length<2)
          {
             let nome_nodo = lista_nodi[i].etk;
             console.log('-----');
             console.log(lista_nodi[i].etk)
             console.log(this.getNumeroVicini(lista_nodi[i].vicini));

             /// cerco il nodo semplice più distante
             let maxDistance = -1;
             let mostDistant = null;
             let numSemplici = 0;
             for(let k=0;k<this.getNumeroVicini(lista_nodi[i].vicini).length;k++)
             {
                  let tmpY = lista_nodi.filter((el)=>{return el.etk==this.getNumeroVicini(lista_nodi[i].vicini)[k];});
                  //console.log(tmpY);
                  if(tmpY.length>0 && tmpY[0].tipo.split('-')[0]=="nodo semplice")
                      {
                         numSemplici++; 
                         let dist = this.getNodeDistance(lista_nodi[i].posizione, tmpY[0].posizione);
                         if(dist>maxDistance)
                          {
                              maxDistance = dist;
                              mostDistant = tmpY[0].etk;
                          }
                      }
             }
             console.log(mostDistant, numSemplici, maxDistance);

             if(this.getNumeroVicini(lista_nodi[i].vicini).length>2 && numSemplici>0)
             { 
               if(maxDistance!==-1)
                  toBeRemoved.push(mostDistant);
               else
               {
                  let adiacente = lista_nodi.filter((el)=>{return el.etk.split('-')[0]==nome_nodo && el.etk.split('-').length>1;});
                  let tmp = lista_nodi.filter((el)=>{return el.etk==adiacente[0].etk});
                  toBeRemoved.push(adiacente[0].etk);
               }
               console.log(toBeRemoved);
             }
          }
          
          // controllo se i "nodi gamba" hanno più di due nodi semplici adiacenti: in caso positivo tolgo i nodi semplici più lontani
          if(['P1', 'P2', 'A1', 'A2'].includes(lista_nodi[i].etk))
          {
             let nome_nodo = lista_nodi[i].etk;

             /// cerco il nodo semplice più distante
             let maxDistance = -1;
             let mostDistant = null;
             let numSemplici = 0;
             for(let k=0;k<this.getNumeroVicini(lista_nodi[i].vicini).length;k++)
             {
                  let tmpY = lista_nodi.filter((el)=>{return el.etk==this.getNumeroVicini(lista_nodi[i].vicini)[k];});
                  //console.log(tmpY);
                  if(tmpY.length>0 && tmpY[0].tipo.split('-')[0]=="nodo semplice")
                  //if(tmpY.length>0)
                      {
                         numSemplici++; 
                         let dist = this.getNodeDistance(lista_nodi[i].posizione, tmpY[0].posizione);
                         if(dist>maxDistance)
                          {
                              maxDistance = dist;
                              mostDistant = tmpY[0].etk;
                          }
                      }
             }

             if(this.getNumeroVicini(lista_nodi[i].vicini).length>2 && numSemplici>2)
             { 
               if(maxDistance!==-1)
                  toBeRemoved.push(mostDistant);
               else
               {
                  let adiacente = lista_nodi.filter((el)=>{return el.etk.split('-')[0]==nome_nodo && el.etk.split('-').length>1;});
                  let tmp = lista_nodi.filter((el)=>{return el.etk==adiacente[0].etk});
                  toBeRemoved.push(adiacente[0].etk);
               }
               console.log(toBeRemoved);
             }
          }
          
          // controllo se i "nodi gamba" hanno nodi semplici adiacenti non necessari
          // sono concessi solamente i nodi semplici a ridosso del nodo gamba
          if(['P1', 'P2', 'A1', 'A2'].includes(lista_nodi[i].etk))
          {                
             for(let k=0;k<this.getNumeroVicini(lista_nodi[i].vicini).length;k++)
             {
                  let tmpY = lista_nodi.filter((el)=>{return el.etk==this.getNumeroVicini(lista_nodi[i].vicini)[k]&&
                                                             el.tipo.split('-')[0]=="nodo semplice"&&
                                                             el.gamba_rif!==this.reMapNode(lista_nodi[i].etk);});
                    
                  for(let j=0;j<tmpY.length;j++) toBeRemoved.push(tmpY[j].etk);
             }               

          }  

      }

      //console.log(toBeRemoved);

      for(let i=0;i<lista_nodi.length;i++)
          {
              lista_nodi[i].vicini    = {UP:{etk:null, marker:false}, LEFT:{etk:null, marker:false}, DOWN:{etk:null, marker:false}, RIGHT:{etk:null, marker:false}};  
              if(toBeRemoved.includes(lista_nodi[i].etk)) lista_nodi[i].enabled = false; 
          }

   
      lista   = this.cloneMyObj(lista_nodi);  // clone temporaneo, solo per input

      for(let i=0;i<lista_nodi.length;i++)
      {
          if(lista_nodi[i].enabled || lista_nodi[i].etk.split('*').length>1)
          {
              let etkRUN = lista_nodi[i].etk;
              lista_nodi[i].vicini = {UP:     {etk: this.cercaNodoAdiacente(etkRUN,       'UP',      lista), marker:false}, 
                                      LEFT:   {etk: this.cercaNodoAdiacente(etkRUN,     'LEFT',      lista), marker:false}, 
                                      DOWN:   {etk: this.cercaNodoAdiacente(etkRUN,     'DOWN',      lista), marker:false}, 
                                      RIGHT:  {etk: this.cercaNodoAdiacente(etkRUN,    'RIGHT',      lista), marker:false}
                                      };   
          }                       
      }

        


      // se un nodo ha un solo vicino, deve trasformarsi in staffa a muro (se non lo è già) e probabilmente anche ruotare. Quindi definisco un nuovo 
      // tipo di staffaggio
      
      for(let i=0;i<lista_nodi.length;i++)
      {
        if(lista_nodi[i].enabled&&
           lista_nodi[i].isgamba==true &&
           this.getNumeroVicini(lista_nodi[i].vicini).length<2 )
        {
          
          console.log(lista_nodi[i].etk);   
          console.log('vicini->', this.getNumeroVicini(lista_nodi[i].vicini), ' ==> devo agggiungere dei nodi attivi');
          let oldArray = this.cloneMyObj(lista_nodi).filter(el=>{return el.enabled==true;});
          lista_nodi = this.cloneMyObj(this.addNode(lista_nodi, i));
          let newArray = this.cloneMyObj(lista_nodi).filter(el=>{return el.enabled==true;});
          let added = [];
          for(let w=0;w<newArray.length;w++)
          {
            let found = false;
            for(let k=0;k<oldArray.length;k++)
            {
              if(oldArray[k].etk==newArray[w].etk)
                {
                  found = true;
                  break;
                } 
            }
            if(!found) added.push(newArray[w].etk);
          }
          console.log(added);
          console.log('');
          console.log('');

        }
      }
      
      
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

      return this.cloneMyObj(lista_nodi);
 }



reMapNode(etk)
{
if(etk=='P1') return 'A';
if(etk=='A1') return 'B';
if(etk=='A2') return 'C';
if(etk=='P2') return 'D';
return null;
}

addNode(lista, indice)
{
let lista_nodi  = this.cloneMyObj(lista);
let i           = indice;
console.log('adding node for ', lista_nodi[i].etk);
// se il nodo ha vicini nel lato orizzontale, devo creare un collegamento verticale

if(this.getInfoVicini(lista_nodi[i].vicini).hor>0)
{
    if(!this.checkType('A', 1)&&!this.checkType('D', 1)) // addossato su AD
    {
      let test = "";
      test = this.cercaNodo(lista_nodi[i].etk, 'UP', lista_nodi);
      let tmp = test;
      
      while(test!==null)
      {
        test = this.cercaNodo(tmp, 'UP', lista_nodi);
        if(test!==null) tmp = test; 
      }
        
      //console.log(lista_nodi[i].etk, tmp);
      lista_nodi[i].vicini.UP   = {etk:tmp, marker:false};

      let index = lista_nodi.findIndex((el)=>{return el.etk==tmp;});
      if(index>-1) 
        {
          lista_nodi[index].vicini.DOWN = {etk:lista_nodi[i].etk, marker:false};  
          
          lista_nodi[index].enabled = true;
          lista_nodi[index] = this.paramNodo(lista_nodi[index]);

          lista_nodi[index].vicini = {UP:     {etk: this.cercaNodoAdiacente(tmp,       'UP',      lista_nodi), marker:false}, 
                                      LEFT:   {etk: this.cercaNodoAdiacente(tmp,     'LEFT',      lista_nodi), marker:false}, 
                                      DOWN:   {etk: this.cercaNodoAdiacente(tmp,     'DOWN',      lista_nodi), marker:false}, 
                                      RIGHT:  {etk: this.cercaNodoAdiacente(tmp,    'RIGHT',      lista_nodi), marker:false}
                                     };  

          if((lista_nodi[index].vicini.RIGHT!==null||lista_nodi[index].vicini.LEFT!==null)&&
             this.smOBJ.optionals.pedana.add.AD!=='Wall'
            )
            {
               lista_nodi[index].tipo    = 'nodo esterno'; //'nodo esterno+fissov';
            } 
          else
            {
               lista_nodi[index].tipo    = 'nodo esterno-muro'; //'nodo esterno+fissov';
            }                            
        }     
    }

    if(!this.checkType('B', 1)&&!this.checkType('C', 1)) // addossato su BC
    {
      let test = "";
      test = this.cercaNodo(lista_nodi[i].etk, 'DOWN', lista_nodi);
      let tmp = test;
      
      while(test!==null)
      {
        test = this.cercaNodo(tmp, 'DOWN', lista_nodi);
        if(test!==null) tmp = test; 
      }
        
      //console.log(lista_nodi[i].etk, tmp);
      lista_nodi[i].vicini.DOWN   = {etk:tmp, marker:false};

      let index = lista_nodi.findIndex((el)=>{return el.etk==tmp;});
      if(index>-1) 
        {
          //lista_nodi[index].vicini.UP = {etk:lista_nodi[i].etk, marker:false};  
          lista_nodi[index].tipo    = 'nodo esterno-muro'; //'nodo esterno+fissov';
          lista_nodi[index].enabled = true;
          lista_nodi[index] = this.paramNodo(lista_nodi[index]);

          lista_nodi[index].vicini = {UP:     {etk: this.cercaNodoAdiacente(tmp,       'UP',      lista_nodi), marker:false}, 
                                      LEFT:   {etk: this.cercaNodoAdiacente(tmp,     'LEFT',      lista_nodi), marker:false}, 
                                      DOWN:   {etk: this.cercaNodoAdiacente(tmp,     'DOWN',      lista_nodi), marker:false}, 
                                      RIGHT:  {etk: this.cercaNodoAdiacente(tmp,    'RIGHT',      lista_nodi), marker:false}
                                     };
          if((lista_nodi[index].vicini.RIGHT!==null||lista_nodi[index].vicini.LEFT!==null)&&
             this.smOBJ.optionals.pedana.add.BC!=='Wall'
            )
            {
               lista_nodi[index].tipo    = 'nodo esterno'; //'nodo esterno+fissov';
            } 
          else
            {
               lista_nodi[index].tipo    = 'nodo esterno-muro'; //'nodo esterno+fissov';
            }                             
        }       
    }
}
else // collegamento orizzontale
{
  if(!this.checkType('A', 1)&&!this.checkType('B', 1)) // addossato su AB
    {
      let test = "";
      test = this.cercaNodo(lista_nodi[i].etk, 'LEFT', lista_nodi);
      let tmp = test;
      
      while(test!==null)
      {
        test = this.cercaNodo(tmp, 'LEFT', lista_nodi);
        if(test!==null) tmp = test; 
      }
        
      //console.log(lista_nodi[i].etk, tmp);
      lista_nodi[i].vicini.LEFT   = {etk:tmp, marker:false};

      let index = lista_nodi.findIndex((el)=>{return el.etk==tmp;});
      if(index>-1) 
        {
          lista_nodi[index].vicini.RIGHT = {etk:lista_nodi[i].etk, marker:false};  
          lista_nodi[index].tipo    = 'nodo esterno-muro'; //'nodo esterno+fissov';
          lista_nodi[index].enabled = true;
          lista_nodi[index] = this.paramNodo(lista_nodi[index]);

           lista_nodi[index].vicini = {UP:     {etk: this.cercaNodoAdiacente(tmp,       'UP',      lista_nodi), marker:false}, 
                                      LEFT:   {etk: this.cercaNodoAdiacente(tmp,     'LEFT',      lista_nodi), marker:false}, 
                                      DOWN:   {etk: this.cercaNodoAdiacente(tmp,     'DOWN',      lista_nodi), marker:false}, 
                                      RIGHT:  {etk: this.cercaNodoAdiacente(tmp,    'RIGHT',      lista_nodi), marker:false}
                                     };  

           if((lista_nodi[index].vicini.UP!==null||lista_nodi[index].vicini.DOWN!==null)&&
             this.smOBJ.optionals.pedana.add.AB!=='Wall'
            )
            {
               lista_nodi[index].tipo    = 'nodo esterno'; //'nodo esterno+fissov';
            } 
          else
            {
               lista_nodi[index].tipo    = 'nodo esterno-muro'; //'nodo esterno+fissov';
            }                          
        }     
    }

    if(!this.checkType('C', 1)&&!this.checkType('D', 1)) // addossato su CD
    {
      let test = "";
      test = this.cercaNodo(lista_nodi[i].etk, 'RIGHT', lista_nodi);
      let tmp = test;
      
      while(test!==null)
      {
        test = this.cercaNodo(tmp, 'RIGHT', lista_nodi);
        if(test!==null) tmp = test; 
      }
        
      //console.log(lista_nodi[i].etk, tmp);
      lista_nodi[i].vicini.RIGHT   = {etk:tmp, marker:false};

      let index = lista_nodi.findIndex((el)=>{return el.etk==tmp;});
      if(index>-1) 
        {
          lista_nodi[index].vicini.LEFT = {etk:lista_nodi[i].etk, marker:false};  
          lista_nodi[index].tipo    = 'nodo esterno-muro'; //'nodo esterno+fissov';
          lista_nodi[index].enabled = true;
          lista_nodi[index] = this.paramNodo(lista_nodi[index]);

           lista_nodi[index].vicini = {UP:     {etk: this.cercaNodoAdiacente(tmp,       'UP',      lista_nodi), marker:false}, 
                                      LEFT:   {etk: this.cercaNodoAdiacente(tmp,     'LEFT',      lista_nodi), marker:false}, 
                                      DOWN:   {etk: this.cercaNodoAdiacente(tmp,     'DOWN',      lista_nodi), marker:false}, 
                                      RIGHT:  {etk: this.cercaNodoAdiacente(tmp,    'RIGHT',      lista_nodi), marker:false}
                                     };  
          if((lista_nodi[index].vicini.UP!==null||lista_nodi[index].vicini.DOWN!==null)&&
             this.smOBJ.optionals.pedana.add.CD!=='Wall'
            )
            {
               lista_nodi[index].tipo    = 'nodo esterno'; //'nodo esterno+fissov';
            } 
          else
            {
               lista_nodi[index].tipo    = 'nodo esterno-muro'; //'nodo esterno+fissov';
            }                           

        }        

    }
}
return this.cloneMyObj(lista_nodi);
}   
  
setCompensazione(indice, topology, segno)
{
let compensazione = 0;
if(this.smOBJ.angoli[indice].top==topology) 
  compensazione = segno*this.smOBJ.dimensioni.nominali.gamba/2;
return compensazione;
}

svgGoToPos(position, etk, svg){
let sDis = '';
sDis = '<g id="'+etk+'" transform="translate('+position.x+' '+position.y+')">'+svg+'</g>';
return sDis;
}

svgGamba(etk, enabled){
  let font_size = parseFloat(9);
  let colore = 'fill:blue;stroke:black;stroke-width:1;fill-opacity:0.1;stroke-opacity:0.9';
  let sDis = '';
  sDis = '<rect width="'+this.smOBJ.dimensioni.nominali.gamba+
             '" height="'+this.smOBJ.dimensioni.nominali.gamba+
        '" x="0" y="0" style="'+colore+'" />';

  /*      
  sDis += '<text font-weight="bold" font-family="Verdana, sans-serif" text-anchor="middle" alignment-baseline="middle" font-size="'+
        parseFloat(font_size)+'px" x="'+parseFloat(this.smOBJ.dimensioni.nominali.gamba/2)+'" y="'+parseFloat(this.smOBJ.dimensioni.nominali.gamba/2)+
        '" fill="black">'+etk+'</text>';      
  */

  return (enabled)?sDis:'';
}

svgNodoMarker(etk){
  let sDis = '';
  let dim  = parseFloat(this.smOBJ.dimensioni.nominali.gamba/10);
  sDis = '<rect width="'+dim+
        '" height="'+dim+
        '" x="'+(-dim/2)+'" y="'+(-dim/2)+'" style="fill:red;stroke:black;stroke-width:1;fill-opacity:0.1;stroke-opacity:0.9" />';
  return sDis;
}

svgNodoESTERNO(nodo){

  let sDis = '';
  let colore = ['magenta','blue', 'green', 'orange'];
  let linea  = 1;//;1*this.grafica.scala;
  try {
      let dim  = parseFloat(this.smOBJ.dimensioni.nominali.gamba/10);
      for(let i=0;i<nodo.geometric.length;i++)
      {
          if(!(nodo.geometric[i].start_profiles[0]==0 && nodo.geometric[i].start_profiles[1]==0))
            {
              sDis += '<rect width="'+dim+
              '" height="'+dim+
              '" x="'+(nodo.geometric[i].start_profiles[0]-dim/2)+'" y="'+(nodo.geometric[i].start_profiles[1]-dim/2)+'" style="fill:none;stroke:'+colore[i]+';stroke-width:'+linea+';fill-opacity:0.1;stroke-opacity:0.9" />';
            }
      } 
      sDis += '<path d="M4.8 23 h13.5 v-4.7 h4.7 v-13.5" style="fill:none;stroke:red;stroke-width:2" transform="rotate('+nodo.rotation+')"/>';
  } catch (error) {
      console.log('');
      console.log(nodo.etk);
      console.log(nodo);
      console.log(nodo.geometric);
  }

  
 
  return sDis;
}

svgNodoGAMBA(nodo){
  let sDis = '';
  if(nodo.hidden.isHidden==false)
      sDis = '<path d="M0 0 v18.8 a 2.4 2.4 0 0 0 2.4 2.4 h16.4 a 2.4 2.4 0 0 0 2.4 -2.4 v-16.4 a 2.4 2.4 0 0 0 -2.4 -2.4 h-18.8" style="fill:darkgray;stroke:black;stroke-width:1;fill-opacity:0.51;" transform="rotate('+nodo.rotation+')"/>';
  else
      sDis = '<path d="M0 0 v18.8 a 2.4 2.4 0 0 0 2.4 2.4 h16.4 a 2.4 2.4 0 0 0 2.4 -2.4 v-16.4 a 2.4 2.4 0 0 0 -2.4 -2.4 h-18.8" style="fill:gray;stroke:gray;stroke-width:0.51;fill-opacity:0.21;" transform="rotate('+nodo.rotation+')"/>';
  
  let dim  = parseFloat(this.smOBJ.dimensioni.nominali.gamba/10);
  let colore = ['magenta','blue', 'green', 'orange'];
  for(let i=0;i<nodo.geometric.length;i++)
      {
          if(!(nodo.geometric[i].start_profiles[0]==0 && nodo.geometric[i].start_profiles[1]==0))
              {
              sDis += '<rect width="'+dim+
              '" height="'+dim+
              '" x="'+(nodo.geometric[i].start_profiles[0]-dim/2)+'" y="'+(nodo.geometric[i].start_profiles[1]-dim/2)+'" style="fill:none;stroke:'+colore[i]+';stroke-width:1;fill-opacity:0.1;stroke-opacity:0.9" />';
              }
      } 

  let centro = {x:0, y:0};    
  switch (nodo.posType) {
      case 'TL':
          centro.x = parseFloat(this.cost.piastra_nodo/2);
          centro.y = parseFloat(this.cost.piastra_nodo/2);
          break;

      case 'TR':
          centro.x = -parseFloat(this.cost.piastra_nodo/2);
          centro.y = parseFloat(this.cost.piastra_nodo/2);
          break;

      case 'BL':
          centro.x = parseFloat(this.cost.piastra_nodo/2);
          centro.y = -parseFloat(this.cost.piastra_nodo/2);
          break;    
      
      case 'BR':
          centro.x = -parseFloat(this.cost.piastra_nodo/2);
          centro.y = -parseFloat(this.cost.piastra_nodo/2);
          break;    
  
      default:
          break;
  }
  

  let font_size = parseFloat(this.cost.piastra_nodo*0.9);    
  sDis += '<text font-weight="bold" font-family="Verdana, sans-serif" text-anchor="middle" alignment-baseline="middle" font-size="'+
           parseFloat(font_size)+'px" x="'+parseFloat(centro.x)+'" y="'+parseFloat(centro.y)+
           '" fill="orange" stroke="black">'+this.costruisciStr(nodo.etk)+'</text>'; 

  return sDis;
}


svgNodoFISSO(nodo){
  let colore = 'fill:none;stroke:red;stroke-width:2';
  if(nodo.hidden.isHidden) colore = 'fill:none;stroke:none;stroke-width:0.51';
  

  let sDis = '';

  if(['P1d'].includes(nodo.etk))
  {
      sDis = '<path d="M '+nodo.geometric[1].start_profiles[0]+' 0 h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
  }

  if(['P2b'].includes(nodo.etk))
  {
      sDis = '<path d="M '+parseFloat(nodo.geometric[1].start_profiles[0]-this.cost.start_piastra_nodo)+' 0 h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
  }

  if(['A1c'].includes(nodo.etk))
  {
      sDis = '<path d="M 0 0 v -'+this.cost.piastra_nodo+'" style="'+colore+'" />';
  }

  if(['P1a'].includes(nodo.etk))
  {
      sDis = '<path d="M 0 0 v '+this.cost.piastra_nodo+'" style="'+colore+'" />';
  }



  let dim  = parseFloat(this.smOBJ.dimensioni.nominali.gamba/10);
  let colorex = ['magenta','blue', 'green', 'orange'];
  for(let i=0;i<nodo.geometric.length;i++)
      {
          if(!(nodo.geometric[i].start_profiles[0]==0 && nodo.geometric[i].start_profiles[1]==0))
              {
              sDis += '<rect width="'+dim+
              '" height="'+dim+
              '" x="'+(nodo.geometric[i].start_profiles[0]-dim/2)+'" y="'+(nodo.geometric[i].start_profiles[1]-dim/2)+'" style="fill:none;stroke:'+colorex[i]+';stroke-width:1;fill-opacity:0.1;stroke-opacity:0.9" />';
              }
      } 

  return sDis;
}



svgNodoSEMPLICE(nodo){
  let colore = 'fill:none;stroke:Crimson;stroke-width:2';
  if(nodo.hidden.isHidden) colore = 'fill:none;stroke:none;stroke-width:0.51';
  

  let sDis = '';

  if(nodo.etk=='EP1')
  {
      if(!this.checkType('A',1)&&!this.checkType('D',1)) sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
      if(!this.checkType('A',1)&&!this.checkType('B',1)) sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
  }

  if(nodo.etk=='EP2')
  {
      if(!this.checkType('A',1)&&!this.checkType('D',1)) sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
      if(!this.checkType('D',1)&&!this.checkType('C',1)) sDis = '<path d="M '+nodo.geometric[2].start_profiles[0]+' 0 v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
  }

  if(nodo.etk=='EA2')
  {
      if(!this.checkType('B',1)&&!this.checkType('C',1)) sDis = '<path d="M 0 '+nodo.geometric[1].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
      if(!this.checkType('D',1)&&!this.checkType('C',1)) sDis = '<path d="M '+nodo.geometric[2].start_profiles[0]+' 0 v-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
  }

  if(nodo.etk=='EA1')
  {
      if(!this.checkType('A',1)&&!this.checkType('B',1)) sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
      if(!this.checkType('B',1)&&!this.checkType('C',1)) sDis = '<path d="M 0 '+nodo.geometric[1].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
  }
  



  if(['P1d','A1d'].includes(nodo.etk)|| nodo.etk.split('_')[0]=='AB')
  {
      if(nodo.posType=='TL')
      {
          sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
      }
      if(nodo.posType=='BL')
      {
          sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
      }        
  }





  if(['P1a','P2a'].includes(nodo.etk)|| nodo.etk.split('_')[0]=='AD')
  {
      if(nodo.posType=='TL')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='TR')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }    
  }

  if(['P2b','A2b'].includes(nodo.etk)|| nodo.etk.split('_')[0]=='CD')
  {
      if(nodo.posType=='TR')
          {
              sDis = '<path d="M '+nodo.geometric[2].start_profiles[0]+' 0 v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='BR')
          {
              sDis = '<path d="M '+nodo.geometric[2].start_profiles[0]+' 0 v-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }    
  }

  if(['A1c','A2c'].includes(nodo.etk)|| nodo.etk.split('_')[0]=='BC')
  {
      if(nodo.posType=='BL')
          {
              sDis = '<path d="M 0 '+nodo.geometric[1].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='BR')
          {
              sDis = '<path d="M 0 '+nodo.geometric[1].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }    
  }


  if(['P1', 'P2', 'A1', 'A2'].includes(nodo.etk))  // nodo aggiunto a causa di un addossamento
  {
     //console.log(this.getInfoVicini(nodo.vicini));
     if(this.getInfoVicini(nodo.vicini).ver>0)
     {
      if(nodo.posType=='TL')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='TR')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          } 

      if(nodo.posType=='BL')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='BR')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }     
     }
     else
     {
      if(nodo.posType=='TL')
        {
            sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
        }
      if(nodo.posType=='BL')
        {
            sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
        }
      if(nodo.posType=='TR')
        {
            sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
        }
      if(nodo.posType=='BR')
        {
            sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
        }  
     }
  }

  // condizioni particolari
  if(['P1d', 'P2b'].includes(nodo.etk) && this.smOBJ.optionals.pedana.add.AD=='Wall')
  {
      if(nodo.posType=='TL')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='TR')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          } 
      if(nodo.posType=='BL')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='BR')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }                 
  }

  // piastre per profili zavorre

  if(nodo.etk.split('_')[0]=='Z3')
  {
      if(nodo.posType=='TL')
      {
          sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
      }
      if(nodo.posType=='BL')
      {
          sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
      }
      if(nodo.posType=='TR')
      {
          sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
      }
  }

  if(nodo.etk.split('_')[0]=='Z0')
  {
      if(nodo.posType=='TL')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='TR')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }    
  }

  if(nodo.etk.split('_')[0]=='Z4')
  {
      if(nodo.posType=='TR')
          {
              sDis = '<path d="M '+nodo.geometric[2].start_profiles[0]+' 0 v-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='BR')
          {
              sDis = '<path d="M '+nodo.geometric[2].start_profiles[0]+' 0 v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }    
  }

  if(nodo.etk.split('_')[0]=='Z1')
  {
      if(nodo.posType=='BL')
          {
              sDis = '<path d="M 0 '+nodo.geometric[1].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='BR')
          {
              sDis = '<path d="M 0 '+nodo.geometric[1].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }    
  }




  let dim  = parseFloat(this.smOBJ.dimensioni.nominali.gamba/10);
  let colorex = ['magenta','blue', 'green', 'orange'];
  for(let i=0;i<nodo.geometric.length;i++)
      {
          if(!(nodo.geometric[i].start_profiles[0]==0 && nodo.geometric[i].start_profiles[1]==0))
              {
              sDis += '<rect width="'+dim+
              '" height="'+dim+
              '" x="'+(nodo.geometric[i].start_profiles[0]-dim/2)+'" y="'+(nodo.geometric[i].start_profiles[1]-dim/2)+'" style="fill:none;stroke:'+colorex[i]+';stroke-width:1;fill-opacity:0.1;stroke-opacity:0.9" />';
              }
      } 

  return sDis;
}


svgNodoVIRTUALE(nodo){
  let colore = 'fill:none;stroke:red;stroke-width:2';
  if(nodo.hidden.isHidden) colore = 'fill:none;stroke:none;stroke-width:0.51';
  
  //console.log('');
  //console.log(nodo);

  let sDis = '';

  if(nodo.etk.split('_')[0]=='Z3')
  {
      if(nodo.posType=='TL')
      {
          sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
      }
      if(nodo.posType=='BL')
      {
          sDis = '<path d="M '+nodo.geometric[0].start_profiles[0]+' 0 v-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
      }
  }

  if(nodo.etk.split('_')[0]=='Z0')
  {
      if(nodo.posType=='TL')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='TR')
          {
              sDis = '<path d="M 0 '+nodo.geometric[3].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }    
  }

  if(nodo.etk.split('_')[0]=='Z4')
  {
      if(nodo.posType=='TR')
          {
              sDis = '<path d="M '+nodo.geometric[2].start_profiles[0]+' 0 v'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='BR')
          {
              sDis = '<path d="M '+nodo.geometric[2].start_profiles[0]+' 0 v-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }    
  }

  if(nodo.etk.split('_')[0]=='Z1')
  {
      if(nodo.posType=='BL')
          {
              sDis = '<path d="M 0 '+nodo.geometric[1].start_profiles[1]+' h'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }
      if(nodo.posType=='BR')
          {
              sDis = '<path d="M 0 '+nodo.geometric[1].start_profiles[1]+' h-'+this.cost.piastra_nodo+'" style="'+colore+'" />';
          }    
  }




  let dim  = parseFloat(this.smOBJ.dimensioni.nominali.gamba/10);
  let colorex = ['magenta','blue', 'green', 'orange'];
  for(let i=0;i<nodo.geometric.length;i++)
      {
          if(!(nodo.geometric[i].start_profiles[0]==0 && nodo.geometric[i].start_profiles[1]==0))
              {
              sDis += '<rect width="'+dim+
              '" height="'+dim+
              '" x="'+(nodo.geometric[i].start_profiles[0]-dim/2)+'" y="'+(nodo.geometric[i].start_profiles[1]-dim/2)+'" style="fill:none;stroke:'+colorex[i]+';stroke-width:1;fill-opacity:0.1;stroke-opacity:0.9" />';
              }
      } 

  return sDis;
}




svgPiastreCompensazione(link)
{
  let n0 = this.getInfoNodo(link.vertici_ordinati.start);
  let n1 = this.getInfoNodo(link.vertici_ordinati.stop);
  let dir= link.dir;

  let sDis = '';


  if(link.piastra_compensazione.inizio || link.piastra_compensazione.fine)
  {
      let staffa = {};

      if(dir=='ver')
          {
             if(link.piastra_compensazione.fine)      staffa =this.cloneMyObj(n1.nodo.piastre.top); // arrivo da sopra
             if(link.piastra_compensazione.inizio)    staffa =this.cloneMyObj(n0.nodo.piastre.bottom); // parto da sotto
          }
          else
          {
             if(link.piastra_compensazione.fine)      staffa =this.cloneMyObj(n1.nodo.piastre.left); // arrivo da sinistra
             if(link.piastra_compensazione.inizio)    staffa =this.cloneMyObj(n0.nodo.piastre.right); // parto da destra
          }

      
      //console.log(sDis);

      if(link.piastra_compensazione.inizio)
          {
              let xDis = '<path d="M '+staffa.start.x +' '+ staffa.start.y+' L '+ staffa.stop.x +' '+staffa.stop.y +' " style="fill:none;stroke:red;stroke-width:2" >';
              sDis = this.svgGoToPos(n0.nodo.posizione, n0.nodo.etk, xDis);    
          } 
      if(link.piastra_compensazione.fine)
          {
              let yDis = '<path d="M '+staffa.start.x +' '+ staffa.start.y+' L '+ staffa.stop.x +' '+staffa.stop.y +' " style="fill:none;stroke:red;stroke-width:2" >';
              sDis += this.svgGoToPos(n1.nodo.posizione, n1.nodo.etk, yDis);       

          }   
  }

  
  
   
  return sDis;
}

SetGAMBA(opzioni)
{
//console.log(opzioni);

let gamba = {};
gamba.etk = opzioni.etk;
gamba.top = (typeof opzioni.TOP_ANG !== 'undefined')?parseInt(opzioni.TOP_ANG):1;						//parseInt(opzioni.TOP_ANG.split('-')[0]):1;
gamba.type= (typeof opzioni.TYPE_ANG !== 'undefined')?parseInt(opzioni.TYPE_ANG):1;					//parseInt(opzioni.TYPE_ANG.split('-')[0]):1;
gamba.opt = (typeof opzioni.OPTIONAL_ANG !== 'undefined')?parseInt(opzioni.OPTIONAL_ANG):1;			//parseInt(opzioni.OPTIONAL_ANG.split('-')[0]):1;

gamba.enabled = (opzioni.enabling.type=='std'&&(gamba.type==1 || gamba.type==4) && (gamba.opt !=3))||(opzioni.enabling.type!=='std'&&opzioni.enabling.condition);
gamba.posizione = {assoluta:opzioni.posizione.assoluta, relativa:null };
gamba.position  = {x:opzioni.posizione.assoluta.x, y: opzioni.posizione.assoluta.y};


gamba.svg = this.svgGoToPos(gamba.position, gamba.etk, this.svgGamba(gamba.etk, gamba.enabled));
return gamba;
}

invertiArray(array_punti_in){
  console.log('TEST');
  let array_punti = [];
  for(let i=0; i<array_punti_in.length; i++)
      array_punti.push(array_punti_in[array_punti_in.length-1]-array_punti_in[i]);

  //console.log(array_punti)
  return this.cloneMyObj(array_punti);
}






svgMartinetto(martinetto)
{
 
 let minimo = Math.min(...this.ElementiPerMartinetti.basi.map(el => el['min'])); 

 let sDis   = '';

 if(martinetto.h>=minimo)
 {
  let font_size = 2/this.grafica.scala;
  let tmp = this.mappaColoriAltezze(martinetto.codifica); 
  if(tmp.indice>=0)
  {
    sDis += '<g transform="translate('+parseFloat(martinetto.posizione.x -6/2)+' '+parseFloat(martinetto.posizione.y-6/2) +')">'
    sDis += '<circle r="'+parseFloat(6)+'" cx="'+parseFloat(6/2)+'" cy="'+parseFloat(6/2)+'"';
    sDis += 'style="fill:'+tmp.colore+';stroke:'+tmp.colore+';stroke-width:0.51;fill-opacity:0.91;stroke-opacity:0.9" />';
  
    sDis += '<circle r="'+parseFloat(5)+'" cx="'+parseFloat(6/2)+'" cy="'+parseFloat(6/2)+'"';
    sDis += 'style="fill:'+tmp.colore+';stroke:black;stroke-width:0.51;fill-opacity:0.91;stroke-opacity:0.9" />';

    sDis += '<text font-weight="bold" font-family="Verdana, sans-serif"  font-size="'+   //text-anchor="middle" alignment-baseline="middle"
                      parseFloat(font_size)+'px" x="'+parseFloat(11)+
                      '" y="'+parseFloat(11)+
                      '" fill="black">'+parseInt(tmp.indice+1)+'</text>';
    sDis += '</g>';
  }
 }

 return sDis;
}

generateColorScale(startColorRgb, endColorRgb, steps) {
  if (steps < 1) return [];
  if (steps === 1) {
      return [`rgb(${startColorRgb[0]}, ${startColorRgb[1]}, ${startColorRgb[2]})`];
  }

  // Converti i colori di inizio e fine in HSL
  const startHsl = this.rgbToHsl(startColorRgb[0], startColorRgb[1], startColorRgb[2]);
  const endHsl = this.rgbToHsl(endColorRgb[0], endColorRgb[1], endColorRgb[2]);

  const colorScale = [];

  for (let i = 0; i < steps; i++) {
      const ratio = i / (steps - 1); // Rapporto di interpolazione da 0 a 1

      // Interpola H, S, L separatamente
      let h = startHsl[0] + (endHsl[0] - startHsl[0]) * ratio;
      let s = startHsl[1] + (endHsl[1] - startHsl[1]) * ratio;
      let l = startHsl[2] + (endHsl[2] - startHsl[2]) * ratio;

      // Gestione speciale per la tonalità (Hue) quando attraversa 0/360 gradi
      // Questo evita che la scala faccia il giro lungo del cerchio cromatico
      if (Math.abs(endHsl[0] - startHsl[0]) > 180) {
          if (endHsl[0] > startHsl[0]) {
              startHsl[0] += 360;
          } else {
              endHsl[0] += 360;
          }
          h = (startHsl[0] + (endHsl[0] - startHsl[0]) * ratio) % 360;
      }

      // Converte il colore HSL interpolato in RGB
      const rgb = this.hslToRgb(h, s, l);
      colorScale.push(`rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`);
  }

  return colorScale;
}

hslToRgb(h, s, l) {
  h /= 360; // h in [0, 1]
  s /= 100; // s in [0, 1]
  l /= 100; // l in [0, 1]

  let r, g, b;

  if (s === 0) {
      r = g = b = l; // Grayscale
  } else {
      const hue2rgb = (p, q, t) => {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1 / 6) return p + (q - p) * 6 * t;
          if (t < 1 / 2) return q;
          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
          return p;
      };

      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      const p = 2 * l - q;

      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
  }

  return [r * 255, g * 255, b * 255];
}

rgbToHsl(r, g, b) {
  r /= 255; // Normalizza r a [0, 1]
  g /= 255; // Normalizza g a [0, 1]
  b /= 255; // Normalizza b a [0, 1]

  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  let h, s, l = (max + min) / 2;

  if (max === min) {
      h = s = 0; // Grayscale
  } else {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
          case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;
          case g:
              h = (b - r) / d + 2;
              break;
          case b:
              h = (r - g) / d + 4;
              break;
      }
      h /= 6;
  }

  return [h * 360, s * 100, l * 100];
}


mappaColoriAltezze(codifica)
{
let indice    = 0;
let n_livelli = 100;
try {
  n_livelli = this.codificaElementiMartinetti.length;
  indice    = this.codificaElementiMartinetti.findIndex((el)=>{return el.num == codifica.num;});
} catch (error) {
  //console.log(codifica);
}


let out       = {};
out.colore    = this.generateColorScale([255, 255, 0], [0, 0, 255], n_livelli)[indice];
out.indice    = indice;

return out; 
}


calcolaHMartinetto(martinetto)
{
return -this.calcolaDislivello(martinetto.posizione);
}

calcolaAltezzeMartinetti(){
// calcolo altezze dei martinetti e genero le classi di altezze
for(let i=0;i<this.lista_martinetti.length;i++)
{
  if(this.lista_martinetti[i].tipo=='profilo')
  {
    this.lista_martinetti[i].h        = this.calcolaHMartinetto(this.lista_martinetti[i]); 
    this.lista_martinetti[i].codifica = this.cloneMyObj(this.calcolaElementiAltezza(this.lista_martinetti[i].h));      
  }

  if(this.lista_martinetti[i].tipo=='nodo gamba')
  {
    this.lista_martinetti[i].h        = this.calcolaHMartinetto(this.lista_martinetti[i]); 
    this.lista_martinetti[i].codifica = this.cloneMyObj(this.calcolaElementiAltezza(this.lista_martinetti[i].h));      
  }

  if(this.lista_martinetti[i].tipo=='martinetto')
  {
    this.lista_martinetti[i].h        = parseFloat(this.calcolaHMartinetto(this.lista_martinetti[i])+10.8); 
    this.lista_martinetti[i].codifica = this.cloneMyObj(this.calcolaElementiAltezza(this.lista_martinetti[i].h, this.smOBJ.optionals.pedana.floor.premium>0));      
  }

  if(this.lista_martinetti[i].tipo=='martinetto su zavorra')
  {
    this.lista_martinetti[i].h        = parseFloat(5); 
    this.lista_martinetti[i].codifica = this.cloneMyObj(this.calcolaElementiAltezza(this.lista_martinetti[i].h, this.smOBJ.optionals.pedana.floor.premium>0));      
  }
}

// ordino la lista in senso crescente
this.codificaElementiMartinetti.sort((a, b) => a.num - b.num); 


// preparo gli svg con la divisione in classi
for(let i=0;i<this.lista_martinetti.length;i++)
{
    this.lista_martinetti[i].svg  = this.svgMartinetto(this.lista_martinetti[i]);    
}


// in caso di tabelle costificazione mi fermo qui:
if(this.smOBJ.costing==1) return 1;


// inserisco basi e prolunghe in distinta
for(let i=0; i<this.ElementiPerMartinetti.basi.length;i++)
{
   let pezzi =  Math.floor(this.ElementiPerMartinetti.basi[i].pezzi/ this.ElementiPerMartinetti.basi[i].scatola);
   pezzi += ( this.ElementiPerMartinetti.basi[i].pezzi% this.ElementiPerMartinetti.basi[i].scatola>0)?1:0;
   pezzi *=  this.ElementiPerMartinetti.basi[i].scatola;
   //console.log(this.ElementiPerMartinetti.basi[i].etk, pezzi);
   this.insert4BOM({name:this.ElementiPerMartinetti.basi[i].etk, n: pezzi,   gruppo:'ALL', lunghezza:0, codifica:'ALL'});
}

for(let i=0; i<this.ElementiPerMartinetti.prolunghe.length;i++)
{
   let pezzi =  Math.floor(this.ElementiPerMartinetti.prolunghe[i].pezzi/ this.ElementiPerMartinetti.prolunghe[i].scatola);
   pezzi += ( this.ElementiPerMartinetti.prolunghe[i].pezzi% this.ElementiPerMartinetti.prolunghe[i].scatola>0)?1:0;
   pezzi *=  this.ElementiPerMartinetti.prolunghe[i].scatola;
   //console.log(this.ElementiPerMartinetti.prolunghe[i].etk, pezzi);
   this.insert4BOM({name:this.ElementiPerMartinetti.prolunghe[i].etk, n: pezzi,   gruppo:'ALL', lunghezza:0, codifica:'ALL'});
}

for(let i=0; i<this.ElementiPerMartinetti.basiPremium.length;i++)
{
   let pezzi =  Math.floor(this.ElementiPerMartinetti.basiPremium[i].pezzi/ this.ElementiPerMartinetti.basiPremium[i].scatola);
   pezzi += ( this.ElementiPerMartinetti.basiPremium[i].pezzi% this.ElementiPerMartinetti.basiPremium[i].scatola>0)?1:0;
   pezzi *=  this.ElementiPerMartinetti.basiPremium[i].scatola;
   //console.log(this.ElementiPerMartinetti.basi[i].etk, pezzi);
   this.insert4BOM({name:this.ElementiPerMartinetti.basiPremium[i].etk, n: pezzi,   gruppo:'ALL', lunghezza:0, codifica:'ALL'});
}

for(let i=0; i<this.ElementiPerMartinetti.prolunghePremium.length;i++)
{
   let pezzi =  Math.floor(this.ElementiPerMartinetti.prolunghePremium[i].pezzi/ this.ElementiPerMartinetti.prolunghePremium[i].scatola);
   pezzi += ( this.ElementiPerMartinetti.prolunghePremium[i].pezzi% this.ElementiPerMartinetti.prolunghePremium[i].scatola>0)?1:0;
   pezzi *=  this.ElementiPerMartinetti.prolunghePremium[i].scatola;
   //console.log(this.ElementiPerMartinetti.prolunghe[i].etk, pezzi);
   this.insert4BOM({name:this.ElementiPerMartinetti.prolunghePremium[i].etk, n: pezzi,   gruppo:'ALL', lunghezza:0, codifica:'ALL'});
}



for(let i=0; i<this.ElementiPerMartinetti.antirumore.length;i++)
{
   let pezzi =  Math.floor(this.ElementiPerMartinetti.antirumore[i].pezzi/ this.ElementiPerMartinetti.antirumore[i].scatola);
   pezzi += ( this.ElementiPerMartinetti.antirumore[i].pezzi% this.ElementiPerMartinetti.antirumore[i].scatola>0)?1:0;
   pezzi *=  this.ElementiPerMartinetti.antirumore[i].scatola;
   //console.log(this.ElementiPerMartinetti.prolunghe[i].etk, pezzi);
   this.insert4BOM({name:this.ElementiPerMartinetti.antirumore[i].etk, n: pezzi,   gruppo:'ALL', lunghezza:0, codifica:'ALL'});
}


}


creaMartinetto(input){

  
 let out = {};
 out.posizione    = this.cloneMyObj(input.posizione);
 out.tipo         = input.tipo;
 out.h            = 0;
 out.svg          = '';

 let found = false;
 for(let i=0;i<this.lista_martinetti.length;i++)
  {
    if(this.getNodeDistance(this.lista_martinetti[i].posizione, out.posizione)<10)
    {
      //console.log(out.tipo);
      found = true;
      break;
    }
  } 
 
 let sDis         = '';
 sDis += '<g transform="translate('+parseFloat(input.posizione.x -6/2)+' '+parseFloat(input.posizione.y-6/2) +')">'
 sDis += '<circle r="'+parseFloat(6)+'" cx="'+parseFloat(6/2)+'" cy="'+parseFloat(6/2)+'"';
 sDis += 'style="fill:gray;stroke:black;stroke-width:0.51;fill-opacity:0.91;stroke-opacity:0.9" />';
 sDis += '<circle r="'+parseFloat(5)+'" cx="'+parseFloat(6/2)+'" cy="'+parseFloat(6/2)+'"';
 sDis += 'style="fill:darkgray;stroke:black;stroke-width:0.51;fill-opacity:0.91;stroke-opacity:0.9" />';
 sDis += '</g>';

 out.svg = sDis;
 

  if(typeof input.settings == 'undefined') 
  {
      input.settings = {};
      input.settings.carica_coverZones = true;
  }

 if(input.settings.carica_coverZones)
 {
    this.lista_coverZones.push(this.creaCoverZone({posizione: this.cloneMyObj(input.posizione), 
                                             dimensione:{W: 6, H:6},
                                             tipo: "martinetto"},
                                             "circle")); 
 }
 if(found) out.tipo = 'errore';
 out.found = found;
 return out; 

}

caricaCoverZoneProfili()
{
for(let i=0;i<this.lista_linkTraNodi.length;i++)
      {            
          this.adjProfiloUniversale(this.lista_linkTraNodi[i]);
      }

}

caricaCoverZoneNodi()
{
for(let i=0;i<this.lista_nodi.length;i++)
{
  if(this.lista_nodi[i].enabled && this.lista_nodi[i].tipo=='nodo gamba')
  {
     
     let posizione = this.cloneMyObj(this.lista_nodi[i].posizione);
     let dim       = 21;
     switch (this.lista_nodi[i].posType) {
      case 'TL':
        posizione.x+=0;
        posizione.y+=0;
        break;
      case 'BL':
        posizione.x+=0;
        posizione.y-=dim;
        break;
      case 'TR':
        posizione.x-=dim;
        posizione.y+=0;
        break;
      case 'BR':
        posizione.x-=dim;
        posizione.y-=dim;
        break;      
     
      default:
        break;
     }     

      this.lista_martinetti.push(this.creaMartinetto({posizione:{x:parseFloat(posizione.x+dim/2),
                                                          y:parseFloat(posizione.y+ dim/2)},
                                              tipo:'nodo gamba'
                                              }));
      
      this.lista_coverZones.push(this.creaCoverZone({posizione: posizione, 
                                                     dimensione:{W: dim, H:dim},
                                                     tipo: "nodo gamba"},
                                                     "rect"
                                                    ));  
  }
}
}


adjProfiloUniversale(link){



let passo_clips     = 30;

let n0 = this.getInfoNodo(link.vertici_ordinati.start);
let n1 = this.getInfoNodo(link.vertici_ordinati.stop);

if(n0.nodo.etk.split('*').length>1) return ''; 

let dir= link.dir;

let posizione = {x:0, y:0};


let array_punti     = [0, 1.3301, 1.8301, 2.0802, 2.1701, 2.5900, 2.6800, 11.7184, 11.8085, 12.2286, 12.3186, 12.5687, 14.5993, 17.2401, 17.3901];

let inversione        = false;
let offset_inversione = 0;


switch (link.tipo_profilo) {
  case "esterno":
      array_punti = [0, 1.3301, 1.8301, 2.0802, 2.1701, 2.5900, 2.6800, 11.7184, 11.8085, 12.2286, 12.3186, 12.5687, 14.5993, 17.2401, 17.3901];
       if( (['EP1','P1a','P2a','P1d','P1','P2','P2b'].includes(n0.nodo.etk) ||  n0.nodo.etk.split('_')[0]=='AD')&&dir=='hor' ||
           (['EP1','P1a','P1','A1','A1c'].includes(n0.nodo.etk) ||  n0.nodo.etk.split('_')[0]=='AB')&&dir=='ver'
          )
          {
              inversione = true;
              offset_inversione = -this.cost.start_nodo_esterno;
              for(let i=0; i<array_punti.length; i++)
              array_punti[i] = (array_punti[array_punti.length-1]-array_punti[i]) ;
          }
      break;

  case 'interno':
      array_punti = [0, 1.3301, 1.8301, 2.0802, 2.1701, 2.5900, 2.6800, 10.8201, 10.9101, 11.3300, 11.4202, 11.6700, 12.1700, 13.5001];

      break;

  case 'cover':
      array_punti = [0, 0.15, 0.75];
    
  break;        

  default:
      break;
}





//////////////////////////////////////////////////////////////////////////////
// per martinetti
  let passo_martinetti= 74; //cm
  let z_martinetti    = Math.floor(link.lunghezza/passo_martinetti);
  let n_martinetti    = parseInt(z_martinetti+1);
  let ini_martinetti  = parseFloat( (link.lunghezza-passo_martinetti*z_martinetti)/2)
  let dist_minima     = 35;
  
  if(link.lunghezza<(2*dist_minima+20))  // ne metto uno solo al centro del profilo
  {
      z_martinetti    = 1;
      n_martinetti    = 1;
      ini_martinetti  = parseFloat(link.lunghezza/2); 
  }
  else
  {
      ini_martinetti    = dist_minima;
      z_martinetti      = parseInt((link.lunghezza-2*dist_minima)/passo_martinetti);
      passo_martinetti  = parseFloat((link.lunghezza-2*dist_minima)/(z_martinetti));
      z_martinetti      = parseInt(z_martinetti+1);
      n_martinetti      = parseInt(z_martinetti);
  }



//////////////////////////////////////////////////////////////////////////////

if(dir=='hor')
{
  posizione.x = n0.nodo.posizione.x + n0.nodo.geometric[0].start_profiles[0];
  posizione.y = n0.nodo.posizione.y + n0.nodo.geometric[0].start_profiles[1]+offset_inversione;

  this.lista_coverZones.push(this.creaCoverZone({dimensione:{W:parseFloat(link.lunghezza), H:parseFloat(Math.max(...array_punti))}, 
                                           posizione:{x:parseFloat(0+posizione.x), y:parseFloat(Math.min(...array_punti)+posizione.y)}, 
                                           tipo:'profili'},
                                           'rect'));
      
  for(let i=0; i<n_martinetti; i++)
  {
      this.lista_martinetti.push(this.creaMartinetto({posizione:{x:parseFloat(posizione.x+ini_martinetti+i*passo_martinetti),
                                                                  y:parseFloat(posizione.y+ (Math.max(...array_punti)+Math.min(...array_punti))/2 )},
                                                      tipo:'profilo'
                                                      }));
  }
  
      
}
else
{
  posizione.x = n0.nodo.posizione.x + n0.nodo.geometric[3].start_profiles[0]+offset_inversione;
  posizione.y = n0.nodo.posizione.y + n0.nodo.geometric[3].start_profiles[1];

  this.lista_coverZones.push(this.creaCoverZone({dimensione:{H:parseFloat(link.lunghezza), W:parseFloat(Math.max(...array_punti))}, 
                                           posizione:{y:parseFloat(0+posizione.y), x:parseFloat(Math.min(...array_punti)+posizione.x)}, 
                                           tipo:'profili'},
                                              'rect'));

  for(let i=0; i<n_martinetti; i++)
  {
      this.lista_martinetti.push(this.creaMartinetto({posizione:{y:parseFloat(posizione.y+ini_martinetti+i*passo_martinetti),
                                                                  x:parseFloat(posizione.x+ (Math.max(...array_punti)+Math.min(...array_punti))/2 )},
                                                      tipo:'profilo'}));
  }

}
}



svgProfiloUniversale(link, settings){

let passo_martinetti= 60; //cm
let dist_minima     = 15;
let dist_massima    = 30;
let passo_clips     = 30;

let n0 = {};
let n1 = {};  
try {
 n0 = this.getInfoNodo(link.vertici_ordinati.start);
 n1 = this.getInfoNodo(link.vertici_ordinati.stop);
 if(n0.nodo.etk.split('*').length>1) return ''; 
} catch (error) 
{
console.log(error);
console.log(link); 
return ''; 
}





let dir= link.dir;

let posizione = {x:0, y:0};

let new_etk   = this.transcodificaETK(link);

let sDis = '';
let array_punti     = [0, 1.3301, 1.8301, 2.0802, 2.1701, 2.5900, 2.6800, 11.7184, 11.8085, 12.2286, 12.3186, 12.5687, 14.5993, 17.2401, 17.3901];
let colore_profilo  = 'brown';


let inversione        = false;
let offset_inversione = 0;


switch (link.tipo_profilo) {
  case "esterno":
      array_punti = [0, 1.3301, 1.8301, 2.0802, 2.1701, 2.5900, 2.6800, 11.7184, 11.8085, 12.2286, 12.3186, 12.5687, 14.5993, 17.2401, 17.3901];
      colore_profilo ='#641e16';
       if( (['EP1','P1a','P2a','P1d','P1','P2','P2b'].includes(n0.nodo.etk) ||  n0.nodo.etk.split('_')[0]=='AD')&&dir=='hor' ||
           (['EP1','P1a','P1','A1','A1c'].includes(n0.nodo.etk) ||  n0.nodo.etk.split('_')[0]=='AB')&&dir=='ver'
          )
          {
              inversione = true;
              offset_inversione = -this.cost.start_nodo_esterno;
              for(let i=0; i<array_punti.length; i++)
              array_punti[i] = (array_punti[array_punti.length-1]-array_punti[i]) ;
          }
      break;

  case 'interno':
      array_punti = [0, 1.3301, 1.8301, 2.0802, 2.1701, 2.5900, 2.6800, 10.8201, 10.9101, 11.3300, 11.4202, 11.6700, 12.1700, 13.5001];
      colore_profilo = '#21618c';
      break;

  case 'cover':
      array_punti = [0, 0.15, 0.75];
      colore_profilo = 'orange';
      if( (['EP1','P1a','P2a','P1d','P1','P2','P2b'].includes(n0.nodo.etk) ||  n0.nodo.etk.split('_')[0]=='AD')&&dir=='hor' ||
           (['EP1','P1a','P1','A1','A1c'].includes(n0.nodo.etk) ||  n0.nodo.etk.split('_')[0]=='AB')&&dir=='ver'
          )
          {
              inversione = true;
              offset_inversione = 0;
              for(let i=0; i<array_punti.length; i++)
              array_punti[i] = (array_punti[array_punti.length-1]-array_punti[i]) ;
          }        
  break;        

  default:
      break;
}

///////////////////////////////////////////////////////////////////////////////
/////////////////////// gestione etichette profili e quote

let colore_linea_f  = 'stroke:orange;stroke-width:'+parseFloat(0.51/this.grafica.scala);

if(settings.vedi_etichette)
{
  sDis += '<defs> <filter x="0" y="0" width="1" height="1" id="solid_#641e16"><feFlood flood-color="orange"/><feComposite in="SourceGraphic" operator="xor"/></filter></defs>';
  sDis += '<defs> <filter x="0" y="0" width="1" height="1" id="solid_#21618c"><feFlood flood-color="orange"/><feComposite in="SourceGraphic" operator="xor"/></filter></defs>';
  sDis += '<defs> <filter x="0" y="0" width="1" height="1" id="solid_orange"><feFlood flood-color="orange"/><feComposite in="SourceGraphic" operator="xor"/></filter></defs>';
}

let spostamento_etk   = 18;
let font_size         = parseFloat(2/this.grafica.scala);
let etk_lunghezza     = '&#10235;&nbsp;'+parseInt(link.lunghezza*100)/10 + '&nbsp;&#10236;';
//if(n0.nodo.etk.split('_')[0]=='AD' || n0.nodo.etk=='A1' || n0.nodo.etk=='P1' ) spostamento_etk = -spostamento_etk;
let offset_per_ingombri = {x:0, y:0, z:0};


let limite_etichette = parseFloat(9/this.grafica.scala);



if(dir=='hor')
{
  if(link.tipo_profilo!=='cover')
  {
      posizione.x = n0.nodo.posizione.x + n0.nodo.geometric[0].start_profiles[0];
      posizione.y = n0.nodo.posizione.y + n0.nodo.geometric[0].start_profiles[1]+offset_inversione;
  }
  else
  {
      posizione.x = n0.nodo.posizione.x ;
      posizione.y = n0.nodo.posizione.y ;
  }
  


 

  if(settings.vedi_profili)
  {
      sDis  += '<rect width="'+parseFloat(link.lunghezza)+'" height="'+parseFloat(Math.max(...array_punti))+
      '" x="'+parseFloat(0)+'" y="'+parseFloat(Math.min(...array_punti))+'" style="fill:'+colore_profilo+';stroke-width:1;stroke:black;fill-opacity:0.2" />';

      for(let i=0; i<array_punti.length; i++)
      {
      sDis += '<line x1="'+parseFloat(0)+'" y1="'+array_punti[i]+
                  '" x2="'+parseFloat(link.lunghezza)+'" y2="'+array_punti[i]+'" style="stroke:black;stroke-width:.071" />';
      }
  }

  if(settings.vedi_ledStrip&&link.tipo_profilo=='cover')
  {
      if(this.smOBJ.electronics.side.ad!==1 && posizione.y<=0 ||
         this.smOBJ.electronics.side.bc!==1 && posizione.y>0  
      )
      {
          let colore_strip = (this.smOBJ.electronics.side.ad==2 || 
                              this.smOBJ.electronics.side.bc==2)?'red':'yellow';

          sDis  += '<rect width="'+parseFloat(link.lunghezza-2*this.cost.offsetPerLED)+'" height="'+parseFloat(5)+
          '" x="'+parseFloat(0+this.cost.offsetPerLED)+'" y="'+parseFloat(-5/2)+'" style="fill:'+colore_strip+';stroke-width:1;stroke:'+colore_strip+';fill-opacity:0.9" />';
      }
  }


  
  if((settings.vedi_etichette || settings.vedi_misure)&&link.tipo_profilo!=='cover')
  {
      if(link.lunghezza < limite_etichette)
      {
          offset_per_ingombri = {x:-71, y:51, z:7.1};
          if(spostamento_etk>0)
              {
                  spostamento_etk = spostamento_etk-offset_per_ingombri.z;
                  if(posizione.x>this.smOBJ.dimensioni.nominali.larghezza/2) offset_per_ingombri.x = -offset_per_ingombri.x;
                  if(posizione.y>this.smOBJ.dimensioni.nominali.sporgenza/2) offset_per_ingombri.y = -offset_per_ingombri.y;
              }
          else
              {
                  spostamento_etk = spostamento_etk+offset_per_ingombri.z;
                  if(posizione.x>this.smOBJ.dimensioni.nominali.larghezza/2) offset_per_ingombri.x = -offset_per_ingombri.x;
                  if(posizione.y>this.smOBJ.dimensioni.nominali.sporgenza/2) offset_per_ingombri.y = -offset_per_ingombri.y;
              }
          
          let p_start = {y:parseFloat((array_punti[array_punti.length-1]+array_punti[0])/2),
                         x:parseFloat(link.lunghezza/2)};

          let p_stop  = {y:parseFloat((array_punti[array_punti.length-1]+array_punti[0])/2+offset_per_ingombri.y),
                         x:parseFloat(link.lunghezza/2+offset_per_ingombri.x)}; 
                         
                         
          ///////////////////////////////////////////////////////////////// 
          // il punto finale deve essere sempre quello più verso il centro
          let p_centro = {x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza/2),
                          y:parseFloat(this.smOBJ.dimensioni.nominali.sporgenza/2)};

                      
          if(this.getNodeDistance(this.sumVector(p_start, posizione), p_centro)>this.getNodeDistance(this.sumVector(p_stop, posizione), p_centro))
          {
              let p_tmp = this.cloneMyObj(p_start);
              p_start   = this.cloneMyObj(p_stop);
              p_stop    = this.cloneMyObj(p_tmp);                                       
          }
          /////////////////////////////////////////////////////////////////


          sDis += '<line y1="'+parseFloat(p_start.y)+
                  '" x1="'+parseFloat(p_start.x)+
                  '" y2="'+parseFloat(p_stop.y)+
                  '" x2="'+parseFloat(p_stop.x)+
                  '" style="'+colore_linea_f+'" />';    
                  
          sDis += '<circle r="'+parseFloat(3*font_size)+'" cx="'+p_stop.x+'" cy="'+p_stop.y+'" fill="orange" stroke="white" stroke-width="3" />;'        
          
          sDis += '<text filter="url(#solid_'+colore_profilo+')" font-weight="bold" font-family="Verdana, sans-serif" text-anchor="middle" alignment-baseline="middle" font-size="'+
                  parseFloat(font_size)+'px" x="'+parseFloat(p_stop.x)+
                  '" y="'+parseFloat(p_stop.y)+
                  '" fill="black">'+new_etk+'</text>';
      
          sDis += '<text font-weight="bold" font-family="Verdana, sans-serif" text-anchor="middle" alignment-baseline="middle" font-size="'+
                      parseFloat(font_size)+'px" x="'+parseFloat(p_stop.x)+
                      '" y="'+parseFloat(p_stop.y)+
                      '" fill="black">'+new_etk+'</text>';   
                      
          if(settings.vedi_misure)
              {
                  sDis += '<text id="L.'+new_etk+'" font-weight="bold" font-family="monospace" text-anchor="middle" alignment-baseline="middle" font-size="'+
                                  parseFloat(1.2*font_size)+'px" x="'+parseFloat(p_stop.x)+
                                  '" y="'+parseFloat(p_stop.y+spostamento_etk)+
                                  '" fill="blue">'+etk_lunghezza+'</text>';
              }                


      }
      else
      {
          sDis += '<g transform="translate('+parseFloat(link.lunghezza/2+offset_per_ingombri.x)+','
                                            +parseFloat((array_punti[array_punti.length-1]+array_punti[0])/2+offset_per_ingombri.y)+')">';

          
          sDis += '<g>';

          if(settings.vedi_etichette)
          {
              sDis += '<text filter="url(#solid_'+colore_profilo+')" font-weight="bold" font-family="Verdana, sans-serif" text-anchor="middle" alignment-baseline="middle" font-size="'+parseFloat(font_size)+'px" y="0" x="0" fill="black">'+new_etk+'</text>';
              sDis += '<text  font-weight="bold" font-family="Verdana, sans-serif" text-anchor="middle" alignment-baseline="middle" font-size="'+parseFloat(font_size)+'px" y="0" x="0" fill="black">'+new_etk+'</text>';
          }
          sDis += '</g>';
          if(settings.vedi_misure)
              sDis += '<text id="vL.'+new_etk+'" font-weight="bold" font-family="monospace" text-anchor="middle" alignment-baseline="middle" font-size="'+
                  parseFloat(1.2*font_size)+'px" x="0" y="'+parseFloat(spostamento_etk)+'" fill="blue">'+etk_lunghezza+'</text>';
          ;
          sDis += '</g>';
      }
          
  }
  
                  
            
  
      
}
else
{
  if(link.tipo_profilo!=='cover')
  {
      posizione.x = n0.nodo.posizione.x + n0.nodo.geometric[3].start_profiles[0]+offset_inversione;
      posizione.y = n0.nodo.posizione.y + n0.nodo.geometric[3].start_profiles[1];
  }
  else
  {
      posizione.x = n0.nodo.posizione.x ;
      posizione.y = n0.nodo.posizione.y ;
  }

  

  
  if(settings.vedi_profili)
  {
      sDis  += '<rect height="'+parseFloat(link.lunghezza)+'" width="'+parseFloat(Math.max(...array_punti))+
              '" y="'+parseFloat(0)+'" x="'+parseFloat(Math.min(...array_punti))+'" style="fill:'+colore_profilo+';stroke-width:1;stroke:black;fill-opacity:0.2" />';
  


      for(let i=0; i<array_punti.length; i++)
      {
          sDis += '<line y1="'+parseFloat(0)+'" x1="'+array_punti[i]+
                      '" y2="'+parseFloat(link.lunghezza)+'" x2="'+array_punti[i]+'" style="stroke:black;stroke-width:.071" />';
      }
  }

  if(settings.vedi_ledStrip&&link.tipo_profilo=='cover')
  {
       if(this.smOBJ.electronics.side.ab!==1 && posizione.x<=0 ||
          this.smOBJ.electronics.side.cd!==1 && posizione.x>0  
      )
      {
          
          let colore_strip = (this.smOBJ.electronics.side.ab==2 || 
                              this.smOBJ.electronics.side.cd==2)?'red':'yellow';

          sDis  += '<rect height="'+parseFloat(link.lunghezza-2*this.cost.offsetPerLED)+'" width="'+parseFloat(5)+
          '" y="'+parseFloat(0+this.cost.offsetPerLED)+'" x="'+parseFloat(-5/2)+'" style="fill:'+colore_strip+';stroke-width:1;stroke:'+colore_strip+';fill-opacity:0.9" />';
      }
  }

  if((settings.vedi_etichette || settings.vedi_misure)&&link.tipo_profilo!=='cover')
      {
          if(link.lunghezza < limite_etichette)
              {
                  offset_per_ingombri = {x:-71, y:51, z:7.1};
                  
                  if(spostamento_etk>0 )
                      {
                          spostamento_etk = spostamento_etk-offset_per_ingombri.z;
                          if(posizione.x>this.smOBJ.dimensioni.nominali.larghezza/2) offset_per_ingombri.y = -offset_per_ingombri.y;
                          if(posizione.y>this.smOBJ.dimensioni.nominali.sporgenza/2) offset_per_ingombri.x = -offset_per_ingombri.x;
                      }
                  else
                      {
                          spostamento_etk = spostamento_etk+offset_per_ingombri.z;
                          if(posizione.x>this.smOBJ.dimensioni.nominali.larghezza/2) offset_per_ingombri.y = -offset_per_ingombri.y;
                          if(posizione.y>this.smOBJ.dimensioni.nominali.sporgenza/2) offset_per_ingombri.x = -offset_per_ingombri.x;
                      }
                          

                  let p_start = {x:parseFloat((array_punti[array_punti.length-1]+array_punti[0])/2),
                                 y:parseFloat(link.lunghezza/2)};

                  let p_stop  = {x:parseFloat((array_punti[array_punti.length-1]+array_punti[0])/2+offset_per_ingombri.y),
                                 y:parseFloat(link.lunghezza/2+offset_per_ingombri.x)}; 
                                 
                  ///////////////////////////////////////////////////////////////// 
                  // il punto finale deve essere sempre quello più verso il centro
                  let p_centro = {x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza/2),
                                  y:parseFloat(this.smOBJ.dimensioni.nominali.sporgenza/2)};

                                  
                  if(this.getNodeDistance(this.sumVector(p_start, posizione), p_centro)>this.getNodeDistance(this.sumVector(p_stop, posizione), p_centro))
                  {
                      let p_tmp = this.cloneMyObj(p_start);
                      p_start   = this.cloneMyObj(p_stop);
                      p_stop    = this.cloneMyObj(p_tmp);                                       
                  }
                  /////////////////////////////////////////////////////////////////


                  sDis += '<line y1="'+parseFloat(p_start.y)+
                              '" x1="'+parseFloat(p_start.x)+
                              '" y2="'+parseFloat(p_stop.y)+
                              '" x2="'+parseFloat(p_stop.x)+
                              '" style="'+colore_linea_f+'" />';

                  sDis += '<circle r="'+parseFloat(3*font_size)+'" cx="'+p_stop.x+'" cy="'+p_stop.y+'" fill="orange" stroke="white" stroke-width="3" />;'        

                              
                  sDis += '<text filter="url(#solid_'+colore_profilo+')" font-weight="bold" font-family="Verdana, sans-serif" text-anchor="middle" alignment-baseline="middle" font-size="'+
                              parseFloat(font_size)+'px" x="'+parseFloat(p_stop.x)+
                              '" y="'+parseFloat(p_stop.y)+
                              '" fill="black">'+new_etk+'</text>';
                  
                  sDis += '<text font-weight="bold" font-family="Verdana, sans-serif" text-anchor="middle" alignment-baseline="middle" font-size="'+
                              parseFloat(font_size)+'px" x="'+parseFloat(p_stop.x)+
                              '" y="'+parseFloat(p_stop.y)+
                              '" fill="black">'+new_etk+'</text>';   
                              
                  if(settings.vedi_misure)
                      {
                          sDis += '<text id="L.'+new_etk+'" font-weight="bold" font-family="monospace" text-anchor="middle" alignment-baseline="middle" font-size="'+
                                          parseFloat(1.2*font_size)+'px" x="'+parseFloat(p_stop.x)+
                                          '" y="'+parseFloat(p_stop.y+spostamento_etk)+
                                          '" fill="blue">'+etk_lunghezza+'</text>';
                      }            
                  
              }
          else
          {
              sDis += '<g transform="translate('+parseFloat((array_punti[array_punti.length-1]+array_punti[0])/2+offset_per_ingombri.y)+','
                                      +parseFloat(link.lunghezza/2+offset_per_ingombri.x)+')">';

              sDis += '<g transform="rotate(90)">';
              sDis += '<g>';

              if(settings.vedi_etichette)
              {
                  sDis += '<text filter="url(#solid_'+colore_profilo+')" font-weight="bold" font-family="Verdana, sans-serif" text-anchor="middle" alignment-baseline="middle" font-size="'+parseFloat(font_size)+'px" y="0" x="0" fill="black">'+new_etk+'</text>';
                  sDis += '<text  font-weight="bold" font-family="Verdana, sans-serif" text-anchor="middle" alignment-baseline="middle" font-size="'+parseFloat(font_size)+'px" y="0" x="0" fill="black">'+new_etk+'</text>';
              }
              sDis += '</g>';
              if(settings.vedi_misure)
                  sDis += '<text id="vL.'+new_etk+'" font-weight="bold" font-family="monospace" text-anchor="middle" alignment-baseline="middle" font-size="'+
                          parseFloat(1.2*font_size)+'px" x="0" y="'+parseFloat(spostamento_etk)+'" fill="blue">'+etk_lunghezza+'</text>';
              sDis += '</g>';
              sDis += '</g>';
          }    



  }




}
 return this.svgGoToPos(posizione, '' , sDis);
}


creaPiastrella(posizione, dimensioni){
  let out     = {};
  out.W               = dimensioni.W;
  out.H               = dimensioni.H;
  out.WEIGHT          = this.smOBJ.optionals.pedana.floor.WEIGHT;
  out.spessore        = this.smOBJ.optionals.pedana.floor.T;
 
  out.pos             = this.cloneMyObj(posizione);
  
  out.spessore        = this.smOBJ.optionals.pedana.floor.T;

  out.densita         = parseFloat(out.WEIGHT/(this.smOBJ.optionals.pedana.floor.W/100*this.smOBJ.optionals.pedana.floor.H/100));
  out.area_mq         = parseFloat(out.W*out.H/10000);
  out.peso            = parseFloat(out.area_mq*out.densita);
  out.angles_counter  = {p1:0, p2:0, p3:0, p4:0, stable: false};
  out.enabled         = false;

  // controllo di non averne già creata un'altra nella stessa posizione
  let found = false;
  for(let i=0;i<this.lista_piastrelle.length;i++)
  {
    if(JSON.stringify(this.lista_piastrelle[i].pos)==JSON.stringify(out.pos))
    {
      found = true;
      break;
    }
  }
  out.enabled = !found;

  
  out.svg  = '<g transform="translate('+parseFloat(posizione.x) +' '+ parseFloat(posizione.y)+') ">';
  out.svg += '<rect width="'+parseFloat(out.W)+
              '" height="'+parseFloat(out.H)+
              '" x="'+parseFloat(0)+
              '" y="'+parseFloat(0)+
              '" style="fill-opacity:.51;fill:#dbe1e3;stroke:black;stroke-width:0.2" />';
  out.svg += '</g>'; 

  out.angoli = {};
  out.angoli.TL = {x:parseFloat(posizione.x),         y:parseFloat(posizione.y)};
  out.angoli.BL = {x:parseFloat(posizione.x),         y:parseFloat(posizione.y+out.H)};
  out.angoli.TR = {x:parseFloat(posizione.x+out.W),   y:parseFloat(posizione.y)};
  out.angoli.BR = {x:parseFloat(posizione.x+out.W),   y:parseFloat(posizione.y+out.H)};

  
  return this.cloneMyObj(out);
}

creaDoga(posizione, dimensioni){
  let out     = {};
  out.W               = dimensioni.W;
  out.H               = dimensioni.H;
  out.WEIGHT          = this.smOBJ.optionals.pedana.floor.WEIGHT;
  out.spessore        = this.smOBJ.optionals.pedana.floor.T;
 
  out.pos             = this.cloneMyObj(posizione);
  
  out.spessore        = this.smOBJ.optionals.pedana.floor.T;

  out.densita         = parseFloat(out.WEIGHT/(this.smOBJ.optionals.pedana.floor.W/100*this.smOBJ.optionals.pedana.floor.H/100));
  out.area_mq         = parseFloat(out.W*out.H/10000);
  out.peso            = parseFloat(out.area_mq*out.densita);
  out.angles_counter  = {p1:0, p2:0, p3:0, p4:0, stable: false};
  out.enabled         = false;

  // controllo di non averne già creata un'altra nella stessa posizione
  let found = false;
  for(let i=0;i<this.lista_doghe.length;i++)
  {
    if(JSON.stringify(this.lista_doghe[i].pos)==JSON.stringify(out.pos))
    {
      found = true;
      break;
    }
  }
  out.enabled = !found;

  
  out.svg  = '<g transform="translate('+parseFloat(posizione.x) +' '+ parseFloat(posizione.y)+') ">';
  out.svg += '<rect width="'+parseFloat(out.W)+
              '" height="'+parseFloat(out.H)+
              '" x="'+parseFloat(0)+
              '" y="'+parseFloat(0)+
              '" style="fill-opacity:.51;fill:#4d3737;stroke:black;stroke-width:0.9" />';
  out.svg += '</g>'; 

  out.angoli = {};
  out.angoli.TL = {x:parseFloat(posizione.x),         y:parseFloat(posizione.y)};
  out.angoli.BL = {x:parseFloat(posizione.x),         y:parseFloat(posizione.y+out.H)};
  out.angoli.TR = {x:parseFloat(posizione.x+out.W),   y:parseFloat(posizione.y)};
  out.angoli.BR = {x:parseFloat(posizione.x+out.W),   y:parseFloat(posizione.y+out.H)};

  
  return this.cloneMyObj(out);
}

Ricoprimento(){
let spazio_tra_piastrelle = 0.3; //cm  
let tmp = {};


if(this.smOBJ.optionals.pedana.floor.type.split('-')[0] == 1) // 1 piastrelle
{
  this.lista_piastrelle = [];

  // centratura
  let w_totale  = parseFloat(this.smOBJ.dimensioni.nominali.larghezza + this.smOBJ.optionals.pedana.d + this.smOBJ.optionals.pedana.b);
  let w_piast_r = parseFloat(this.smOBJ.optionals.pedana.floor.W + 2*spazio_tra_piastrelle);
  let n_piast_w = Math.floor(w_totale/(w_piast_r));
  let ini_w     = parseFloat((w_totale-w_piast_r*n_piast_w)/2);

  while(ini_w < 2*this.smOBJ.optionals.pedana.floor.W/3)
  {
    n_piast_w--;
    ini_w     = parseFloat((w_totale-w_piast_r*n_piast_w)/2);
  }


  let h_totale  = parseFloat(this.smOBJ.dimensioni.nominali.sporgenza + this.smOBJ.optionals.pedana.a + this.smOBJ.optionals.pedana.c);
  let h_piast_r = parseFloat(this.smOBJ.optionals.pedana.floor.H+2*spazio_tra_piastrelle);
  let n_piast_h = Math.floor(h_totale/(h_piast_r));
  let ini_h     = parseFloat((h_totale-h_piast_r*n_piast_h)/2);

  while (ini_h < 2*this.smOBJ.optionals.pedana.floor.H/3)
  {
    n_piast_h--;
    ini_h     = parseFloat((h_totale-h_piast_r*n_piast_h)/2);
  }




  // piastrelle centrali (intere)
  for(let i=0; i<n_piast_w; i++)
  {
    for(let j=0; j<n_piast_h; j++)
    {
      let pos = {x: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                 y: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
      
      tmp = this.cloneMyObj(this.creaPiastrella(pos, {W:this.smOBJ.optionals.pedana.floor.W, H:this.smOBJ.optionals.pedana.floor.H}));
      if(tmp.enabled) this.lista_piastrelle.push(tmp);

    }
  }

  
  let dist_bordo  = 3.7;

  

  // lati AD e BC
  let new_h   = parseFloat(ini_h-dist_bordo);
  for(let i=0; i<n_piast_w; i++)
  {
     let j = (this.checkTop('A',7)&&this.checkTop('D',8))?0:-1;
     let pos  = { x: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                  y: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r) + (-new_h+this.smOBJ.optionals.pedana.floor.H) )};
      //piazza_piastrella(settings, pos, 1, {w:this.smOBJ.optionals.pedana.floor.W, h:new_h});
      tmp = this.cloneMyObj(this.creaPiastrella(pos, {W:this.smOBJ.optionals.pedana.floor.W, H:new_h}));
      if(tmp.enabled) this.lista_piastrelle.push(tmp);


     j = (this.checkTop('B',7)&&this.checkTop('C',8))?n_piast_h-1:n_piast_h;
     pos      = { x: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                  y: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
      //piazza_piastrella(settings, pos, 1, {w:this.smOBJ.optionals.pedana.floor.W, h:new_h});
      tmp = this.cloneMyObj(this.creaPiastrella(pos, {W:this.smOBJ.optionals.pedana.floor.W, H:new_h}));
      if(tmp.enabled) this.lista_piastrelle.push(tmp);
  }

  
  // lati AB e CD

  let new_w   = parseFloat(ini_w-dist_bordo);
  for(let j=0; j<n_piast_h; j++)
  {
     let i =  (this.checkTop('A',5)&&this.checkTop('B',6))?0:-1;
     let pos  = { x: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r) + (-new_w+this.smOBJ.optionals.pedana.floor.W)),
                  y: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
     //piazza_piastrella(settings, pos, 1, {w:new_w, h:this.smOBJ.optionals.pedana.floor.H});
     tmp = this.cloneMyObj(this.creaPiastrella(pos, {W:new_w, H:this.smOBJ.optionals.pedana.floor.H}));
     if(tmp.enabled) this.lista_piastrelle.push(tmp);

     i = (this.checkTop('D',5)&&this.checkTop('C',6))?n_piast_w-1:n_piast_w;
     pos      = { x: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                  y: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
     //piazza_piastrella(settings, pos, 1, {w:new_w, h:this.smOBJ.optionals.pedana.floor.H});
     tmp = this.cloneMyObj(this.creaPiastrella(pos, {W:new_w, H:this.smOBJ.optionals.pedana.floor.H}));
     if(tmp.enabled) this.lista_piastrelle.push(tmp);
  }

  // angoli
  let i = (this.checkTop('A',5)&&this.checkTop('B',6))?0:-1;
  let j = (this.checkTop('A',7)&&this.checkTop('D',8))?0:-1;
  let pos   = { x: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r) + (-new_w+this.smOBJ.optionals.pedana.floor.W)),
                y: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r) + (-new_h+this.smOBJ.optionals.pedana.floor.H))};
  
                
  tmp = this.cloneMyObj(this.creaPiastrella(pos, {W:new_w, H:new_h}));
  if(tmp.enabled) this.lista_piastrelle.push(tmp);

  i = (this.checkTop('D',5)&&this.checkTop('C',6))?n_piast_w-1:n_piast_w;
  j = (this.checkTop('A',7)&&this.checkTop('D',8))?0:-1;;
  pos       = { x: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
               y: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r) + (-new_h+this.smOBJ.optionals.pedana.floor.H))};
  //piazza_piastrella(settings, pos, 1, {w:new_w, h:new_h});
  tmp = this.cloneMyObj(this.creaPiastrella(pos, {W:new_w, H:new_h}));
  if(tmp.enabled) this.lista_piastrelle.push(tmp);


  i = (this.checkTop('A',5)&&this.checkTop('B',6))?0:-1;
  j = (this.checkTop('B',7)&&this.checkTop('C',8))?n_piast_h-1:n_piast_h;
  pos       = { x: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r) + (-new_w+this.smOBJ.optionals.pedana.floor.W)),
                y: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
  //piazza_piastrella(settings, pos, 1, {w:new_w, h:new_h});
  tmp = this.cloneMyObj(this.creaPiastrella(pos, {W:new_w, H:new_h}));
  if(tmp.enabled) this.lista_piastrelle.push(tmp);


  i = (this.checkTop('D',5)&&this.checkTop('C',6))?n_piast_w-1:n_piast_w;
  j = (this.checkTop('B',7)&&this.checkTop('C',8))?n_piast_h-1:n_piast_h;
  pos       = { x: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                y: parseFloat(spazio_tra_piastrelle/2-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
  //piazza_piastrella(settings, pos, 1, {w:new_w, h:new_h});
  tmp = this.cloneMyObj(this.creaPiastrella(pos, {W:new_w, H:new_h}));
  if(tmp.enabled) this.lista_piastrelle.push(tmp);
   

  //////////////////////////////////////////////////////////////////////////
  // martinetti per piastrelle

  for(let i=0;i<this.lista_piastrelle.length;i++)
  {
      this.checkMartinetto(this.lista_piastrelle[i].angoli.TL); 
      this.checkMartinetto(this.lista_piastrelle[i].angoli.BL); 
      this.checkMartinetto(this.lista_piastrelle[i].angoli.TR); 
      this.checkMartinetto(this.lista_piastrelle[i].angoli.BR);             
  }





}

if(this.smOBJ.optionals.pedana.floor.type.split('-')[0] == 2) // 2 doghe
{
  this.lista_doghe = [];
  let lista_magatelli_hor = [];
  let lista_magatelli_ver = [];

  ///////////////////////////
  // forzature 
  //this.smOBJ.optionals.pedana.floor.H = 20;
  //this.smOBJ.optionals.pedana.floor.W = 200;
  ///////////////////////////

  const sfasamento_min    = 0.0;
  const sfasamento_std    = 0.60;
  let sfasamento_des      = 0.60;
  let sfasamento          = sfasamento_std;
  let imponi_sfasamento   =  false;

  if(this.smOBJ.optionals.pedana.floor.PHASE==-1)
  {
    sfasamento = sfasamento_std;
  }
  else
  {
    sfasamento_des  = (Math.abs(this.smOBJ.optionals.pedana.floor.PHASE)<1)?Math.abs(this.smOBJ.optionals.pedana.floor.PHASE):sfasamento_std;
    sfasamento      = sfasamento_des;
    imponi_sfasamento = true;
  }

  let dist_bordo  = 3.7;

  // centratura
  let w_totale  = parseFloat(this.smOBJ.dimensioni.nominali.larghezza + this.smOBJ.optionals.pedana.d + this.smOBJ.optionals.pedana.b);
  let w_piast_r = parseFloat(this.smOBJ.optionals.pedana.floor.W+2*spazio_tra_piastrelle);
  if(w_piast_r>w_totale/2)  w_piast_r = w_totale/2;
  let n_piast_w = Math.floor(w_totale/(w_piast_r));
  let ini_w     = parseFloat((w_totale-w_piast_r*n_piast_w)/2);



  let h_totale  = parseFloat(this.smOBJ.dimensioni.nominali.sporgenza + this.smOBJ.optionals.pedana.a + this.smOBJ.optionals.pedana.c);
  let h_piast_r = parseFloat(this.smOBJ.optionals.pedana.floor.H+2*spazio_tra_piastrelle);
  if(h_piast_r>w_totale/2)  h_piast_r = w_totale/2;
  let n_piast_h = Math.floor(h_totale/(h_piast_r));
  let ini_h     = parseFloat((h_totale-h_piast_r*n_piast_h)/2);



  if(this.smOBJ.optionals.pedana.floor.ORIENTATION=='Hor')
  {

    while(ini_h < 2*this.smOBJ.optionals.pedana.floor.H/3)
    {
      n_piast_h--;
      ini_h     = parseFloat((h_totale-h_piast_r*n_piast_h)/2);
    }


    let h_piast_ini = parseFloat(ini_h-dist_bordo);
    let h_piast_std = parseFloat(this.smOBJ.optionals.pedana.floor.H);

    let new_w       = parseFloat(ini_w-dist_bordo);
    let old_w       = new_w;
    if(imponi_sfasamento == false)
    {
        sfasamento  = sfasamento_std;
        old_w       = new_w;
        new_w       = parseFloat(sfasamento*w_piast_r+2*old_w);
        ini_w       = dist_bordo;
        sfasamento  = parseFloat(new_w/w_piast_r);
    }
    else
    {
      old_w       = new_w;
      new_w       = parseFloat(sfasamento*w_piast_r+2*old_w);
      ini_w       = dist_bordo;
    }

    let w_ini = parseFloat(new_w);
    let w_fin = parseFloat(2*old_w+w_piast_r-new_w);



    for(let j=-1; j<=n_piast_h; j++)
    {
      for(let i=0; i<n_piast_w-1; i++)
      {
        let pos = {x: parseFloat(-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                   y: parseFloat(-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
        let tmp_h;

        if(j==-1 || j==n_piast_h)
        {
          tmp_h = h_piast_ini;
          if(j==-1) pos.y += parseFloat(h_piast_std-tmp_h);
        }
        else
        {
          tmp_h = h_piast_std;
        }

        if(j%2==0 )
        {
          pos.x   += w_ini
          //piazza_piastrella(settings, pos, 1, {h:tmp_h, w:w_piast_r+0*this.smOBJ.optionals.pedana.floor.W});
          tmp = this.cloneMyObj(this.creaDoga(pos, {W:w_piast_r, H:tmp_h}));
          if(tmp.enabled) this.lista_doghe.push(tmp);
        }
        else
        {
          pos.x   += w_ini/2;
          //piazza_piastrella(settings, pos, 1, {h:tmp_h, w:w_piast_r+0*this.smOBJ.optionals.pedana.floor.W});
          tmp = this.cloneMyObj(this.creaDoga(pos, {W:w_piast_r, H:tmp_h}));
          if(tmp.enabled) this.lista_doghe.push(tmp);
        }

        if(j==-1||j==0)
        {
          lista_magatelli_ver.push(pos.x);
        }


        if(j%2==0 && i==0)
        {
          pos = {x: parseFloat(-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                 y: parseFloat(-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
          //piazza_piastrella(settings, pos, 1, {h:tmp_h, w:w_ini});
          tmp = this.cloneMyObj(this.creaDoga(pos, {W:w_ini, H:tmp_h}));
          if(tmp.enabled) this.lista_doghe.push(tmp);

        }

        if(j%2!==0 && i==0)
        {
          pos = {x: parseFloat(-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                 y: parseFloat(-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
          if(j==-1) pos.y += parseFloat(h_piast_std-tmp_h);
          if(j==-1) lista_magatelli_ver.push(pos.x);
          //piazza_piastrella(settings, pos, 1, {h:tmp_h, w:w_ini/2});
           tmp = this.cloneMyObj(this.creaDoga(pos, {W:w_ini/2, H:tmp_h}));
          if(tmp.enabled) this.lista_doghe.push(tmp);
        }

        if(j%2==0 && i==n_piast_w-2)
        {
          pos = {x: parseFloat(-this.smOBJ.optionals.pedana.d+(ini_w+(i+1)*w_piast_r+w_ini)),
                 y: parseFloat(-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};

          //piazza_piastrella(settings, pos, 1, {h:tmp_h, w:w_fin});
           tmp = this.cloneMyObj(this.creaDoga(pos, {W:w_fin, H:tmp_h}));
          if(tmp.enabled) this.lista_doghe.push(tmp);

          if(j==0) lista_magatelli_ver.push(pos.x);
        }

        if(j%2!==0 && i==n_piast_w-2)
        {
          pos = {x: parseFloat(-this.smOBJ.optionals.pedana.d+(ini_w+(i+1)*w_piast_r+w_ini/2)),
                 y: parseFloat(-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
          if(j==-1) pos.y += parseFloat(h_piast_std-tmp_h);
          //piazza_piastrella(settings, pos, 1, {h:tmp_h, w:w_fin+w_ini/2});
          tmp = this.cloneMyObj(this.creaDoga(pos, {W:w_fin+w_ini/2, H:tmp_h}));
          if(tmp.enabled) this.lista_doghe.push(tmp);

          if(j==-1)
          {
            lista_magatelli_ver.push(pos.x);
            pos.x += parseFloat(w_fin+w_ini/2);
            lista_magatelli_ver.push(pos.x);
          }
        }



      }
    }
  }
  else
  {
    while(ini_w < 2*this.smOBJ.optionals.pedana.floor.W/3)
    {
      n_piast_w--;
      ini_w     = parseFloat((w_totale-w_piast_r*n_piast_w)/2);
    }

    let w_piast_ini = parseFloat(ini_w-dist_bordo);
    let w_piast_std = parseFloat(this.smOBJ.optionals.pedana.floor.W);

    let new_h       = parseFloat(ini_h-dist_bordo);
    let old_h       = new_h;


    if(imponi_sfasamento == false)
    {
        sfasamento  = sfasamento_std;
        old_h       = new_h;
        new_h       = parseFloat(sfasamento*h_piast_r+2*old_h);
        ini_h       = dist_bordo;
        sfasamento  = parseFloat(new_h/h_piast_r);
    }
    else
    {
      old_h       = new_h;
      new_h       = parseFloat(sfasamento*h_piast_r+2*old_h);
      ini_h       = dist_bordo;
    }


    let h_ini = parseFloat(new_h);
    let h_fin = parseFloat(2*old_h+h_piast_r-new_h)

    for(let i=-1; i<=n_piast_w; i++)
    {
      for(let j=0; j<n_piast_h-1; j++)
      {
        let pos = {x: parseFloat(-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                   y: parseFloat(-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
        let tmp_w;

        if(i==-1 || i==n_piast_w)
        {
          tmp_w = w_piast_ini;
          if(i==-1) pos.x += parseFloat(w_piast_std-tmp_w);
        }
        else
        {
          tmp_w = w_piast_std;
        }

        if(i%2==0 )
        {
          pos.y   += h_ini;
          //piazza_piastrella(settings, pos, 1, {w:tmp_w, h:h_piast_r+0*this.smOBJ.optionals.pedana.floor.H});
          tmp = this.cloneMyObj(this.creaDoga(pos, {W:tmp_w, H:h_piast_r}));
          if(tmp.enabled) this.lista_doghe.push(tmp);
        }
        else
        {
          pos.y   += h_ini/2;
          //piazza_piastrella(settings, pos, 1, {w:tmp_w, h:h_piast_r+0*this.smOBJ.optionals.pedana.floor.H});
          tmp = this.cloneMyObj(this.creaDoga(pos, {W:tmp_w, H:h_piast_r}));
          if(tmp.enabled) this.lista_doghe.push(tmp);
        }

        if(i==-1||i==0)
        {
          lista_magatelli_hor.push(pos.y);
        }


        if(i%2==0 && j==0)
        {
          pos = {x: parseFloat(-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                 y: parseFloat(-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
          //piazza_piastrella(settings, pos, 1, {w:tmp_w, h:h_ini});
          tmp = this.cloneMyObj(this.creaDoga(pos, {W:tmp_w, H:h_ini}));
          if(tmp.enabled) this.lista_doghe.push(tmp);
        }

        if(i%2!==0 && j==0)
        {
          pos = {x: parseFloat(-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                 y: parseFloat(-this.smOBJ.optionals.pedana.a+(ini_h+j*h_piast_r))};
          if(i==-1) pos.x += parseFloat(w_piast_std-tmp_w);
          if(i==-1) lista_magatelli_hor.push(pos.y);
          //piazza_piastrella(settings, pos, 1, {w:tmp_w, h:h_ini/2});
          tmp = this.cloneMyObj(this.creaDoga(pos, {W:tmp_w, H:h_ini/2}));
          if(tmp.enabled) this.lista_doghe.push(tmp);
        }

        if(i%2==0 && j==n_piast_h-2)
        {
          pos = {x: parseFloat(-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                 y: parseFloat(-this.smOBJ.optionals.pedana.a+(ini_h+(j+1)*h_piast_r+h_ini))};
          //piazza_piastrella(settings, pos, 1, {w:tmp_w, h:h_fin});
          tmp = this.cloneMyObj(this.creaDoga(pos, {W:tmp_w, H:h_fin}));
          if(tmp.enabled) this.lista_doghe.push(tmp);
          if(i==0) lista_magatelli_hor.push(pos.y);
        }

        if(i%2!==0 && j==n_piast_h-2)
        {
          pos = {x: parseFloat(-this.smOBJ.optionals.pedana.d+(ini_w+i*w_piast_r)),
                 y: parseFloat(-this.smOBJ.optionals.pedana.a+(ini_h+(j+1)*h_piast_r+h_ini/2))};
          if(i==-1) pos.x += parseFloat(w_piast_std-tmp_w);
          //piazza_piastrella(settings, pos, 1, {w:tmp_w, h:h_fin+h_ini/2});
          tmp = this.cloneMyObj(this.creaDoga(pos, {W:tmp_w, H:h_fin+h_ini/2}));
          if(tmp.enabled) this.lista_doghe.push(tmp);
          if(i==-1)
          {
            lista_magatelli_hor.push(pos.y);
            pos.y += parseFloat(h_fin+h_ini/2);
            lista_magatelli_hor.push(pos.y);
          }
        }


      }
    }
  }

  lista_magatelli_hor = this.cloneMyObj(this.sistemaListaMagatelli(lista_magatelli_hor));
  lista_magatelli_ver = this.cloneMyObj(this.sistemaListaMagatelli(lista_magatelli_ver));
  //console.log(lista_magatelli_ver);

  this.lista_magatelli = [];
  if(lista_magatelli_ver.length>0) this.lista_magatelli = this.cloneMyObj(this.generaMagatelliVer(lista_magatelli_ver));
  if(lista_magatelli_hor.length>0) this.lista_magatelli = this.cloneMyObj(this.generaMagatelliHor(lista_magatelli_hor));




  //////////////////////////////////////////////////////////////////////////

}


}

coverZone_contains(cz, point) {
    return cz.posizione.x <= point.x && point.x <= cz.posizione.x + cz.dimensione.W &&
           cz.posizione.y <= point.y && point.y <= cz.posizione.y + cz.dimensione.H;
}

generaMagatelliVer(lista)
{
let lista_magatelli_ver   = this.cloneMyObj(lista);
let lista_sub             = [];

for(let i=0;i<lista_magatelli_ver.length;i++)
{
  //console.log(lista_magatelli_ver[i]);
  let lunghezza_totale = parseFloat(this.smOBJ.optionals.pedana.a + this.smOBJ.dimensioni.nominali.sporgenza + this.smOBJ.optionals.pedana.c);
  let passo_analisi    = .2; // cm
  let n_punti          = parseInt(lunghezza_totale/passo_analisi);

  let star_p           = {x:0, y:0};
  let end_p            = {x:0, y:0};
  let inner_p          = {x:0, y:0};

  let link_attivo      = false;

  for(j=0;j<n_punti;j++)
  {
     let found         = false;

     star_p.x   = lista_magatelli_ver[i];
     end_p.x    = lista_magatelli_ver[i];
     inner_p.x  = lista_magatelli_ver[i];

     let pos = {x:parseFloat(star_p.x),
                y:parseFloat(-this.smOBJ.optionals.pedana.a+j*passo_analisi)};

     found         = false;
     for(let jj=0; jj<this.lista_coverZones.length; jj++)
     {
         if(this.lista_coverZones[jj].tipo=='profili' &&
            this.coverZone_contains(this.lista_coverZones[jj],pos) )
           {
             found = true;
             break;
           }
     }

     if(found==false)
     {
       if(link_attivo==false)
       {
         star_p.y     = pos.y;
       }
       link_attivo  = true;
       inner_p.y    = pos.y;
     }
     else
     {
       if(link_attivo == true)
       {
         end_p.y = inner_p.y;
         link_attivo  = false;
         lista_sub.push({ini:JSON.parse(JSON.stringify(star_p)), fin:JSON.parse(JSON.stringify(end_p))});
       }

     }
  }

  if(link_attivo==true)
  {
    end_p.y = inner_p.y;
    link_attivo  = false;
    lista_sub.push({ini:JSON.parse(JSON.stringify(star_p)), fin:JSON.parse(JSON.stringify(end_p))});
  }

}



let out = [];
for(let i=0;i<lista_sub.length;i++)
{
  let lunghezza = Math.abs(lista_sub[i].ini.y-lista_sub[i].fin.y);
   if(lunghezza>=2*this.smOBJ.optionals.pedana.floor.H)
   {
     out.push(this.creaMagatello(JSON.parse(JSON.stringify(lista_sub[i].ini)),
                                 JSON.parse(JSON.stringify(lista_sub[i].fin))
                               ));
   }
}

return out;

}

generaMagatelliHor(lista)
{
let lista_magatelli_hor = this.cloneMyObj(lista);
let lista_sub        = [];

for(let i=0;i<lista_magatelli_hor.length;i++)
{
  let lunghezza_totale = parseFloat(this.smOBJ.optionals.pedana.d + this.smOBJ.dimensioni.nominali.larghezza + this.smOBJ.optionals.pedana.b);
  let passo_analisi    = 1; // cm
  let n_punti          = parseInt(lunghezza_totale/passo_analisi);

  let star_p           = {x:0, y:0};
  let end_p            = {x:0, y:0};
  let inner_p          = {x:0, y:0};

  let link_attivo      = false;

  for(j=0;j<n_punti;j++)
  {
     let found         = false;

     star_p.y   = lista_magatelli_hor[i];
     end_p.y    = lista_magatelli_hor[i];
     inner_p.y  = lista_magatelli_hor[i];

     let pos = {y:parseFloat(star_p.y),
                x:parseFloat(-this.smOBJ.optionals.pedana.d+j*passo_analisi)};

     found         = false;
     for(let jj=0; jj<this.lista_coverZones.length; jj++)
     {
         if(this.lista_coverZones[jj].tipo=='profili' &&
            this.coverZone_contains(this.lista_coverZones[jj],pos) )
           {
             found = true;
             break;
           }
     }

     if(found==false)
     {
       if(link_attivo==false)
       {
         star_p.x     = pos.x;
       }
       link_attivo  = true;
       inner_p.x    = pos.x;
     }
     else
     {
       if(link_attivo == true)
       {
         end_p.x = inner_p.x;
         link_attivo  = false;
         lista_sub.push({ini:JSON.parse(JSON.stringify(star_p)), fin:JSON.parse(JSON.stringify(end_p))});
       }

     }
  }

  if(link_attivo==true)
  {
    end_p.x = inner_p.x;
    link_attivo  = false;
    lista_sub.push({ini:JSON.parse(JSON.stringify(star_p)), fin:JSON.parse(JSON.stringify(end_p))});
  }

}



let out = [];
for(let i=0;i<lista_sub.length;i++)
{
  let lunghezza = Math.abs(lista_sub[i].ini.x-lista_sub[i].fin.x);
    if(lunghezza>=2*this.smOBJ.optionals.pedana.floor.W)
     {
       //out.push({ini:JSON.parse(JSON.stringify(lista_sub[i].ini)), fin:JSON.parse(JSON.stringify(lista_sub[i].fin)), lunghezza:lunghezza })
       out.push(this.creaMagatello(JSON.parse(JSON.stringify(lista_sub[i].ini)),
                                   JSON.parse(JSON.stringify(lista_sub[i].fin))
                                 ));
     }
}

//console.log(lista);
//console.log(lista_sub);
return out;

}

creaMagatello(estremo_1, estremo_2){
  let out = {};

  out.estremo_1      = estremo_1;
  out.estremo_2      = estremo_2;


  out.orientamento   = '';
  out.lunghezza      = 0;

  out.orientamento  = (estremo_1.y==estremo_2.y)?'hor':'ver';

  out.lunghezza      = (estremo_1.y==estremo_2.y)?Math.abs(estremo_1.x-estremo_2.x):Math.abs(estremo_1.y-estremo_2.y);


  let  sDis           = '';

  let larghezza_magatello = 5;

  let array_punti = [-larghezza_magatello/2, 0, larghezza_magatello/2];
  let colore_profilo  = 'stroke:#71797E;stroke-width:.051';

  sDis += '<g transform="translate('+parseFloat(out.estremo_1.x)+' '+parseFloat(out.estremo_1.y)+')">';

  let passo_martinetti= (this.lunghezza<60)?15:60; //cm
  let dist_minima     = 9;

  if(out.orientamento=='hor')
      {

          sDis  += ' <rect width="'+parseFloat(out.lunghezza)+
                        '" height="'+parseFloat(larghezza_magatello)+
                        '" x="'+parseFloat(0)+
                        '" y="'+parseFloat(array_punti[0])+
                        '" style="fill:#71797E;stroke-width:0;stroke:none;fill-opacity:0.2" />';

          for(let i=0; i<array_punti.length; i++)
          {
              sDis += '<line x1="0" y1="'+array_punti[i]+'" x2="'+out.lunghezza+'" y2="'+array_punti[i]+'" style="'+colore_profilo+'" />';
          }

          sDis += '<line x1="0" y1="'+array_punti[0]+'" x2="0" y2="'+array_punti[array_punti.length-1]+'" style="'+colore_profilo+'" />';
          sDis += '<line x1="'+out.lunghezza+'" y1="'+array_punti[0]+'" x2="'+out.lunghezza+'" y2="'+array_punti[array_punti.length-1]+'" style="'+colore_profilo+'" />';

          // disegno martinetti
          let z_martinetti          = Math.ceil((out.lunghezza-2*dist_minima)/passo_martinetti);
          let new_passo_martinetti  = parseFloat((out.lunghezza-2*dist_minima)/(z_martinetti+1));
          let n_martinetti          = (z_martinetti+2); //parseFloat((z_martinetti+1)*passo_martinetti<(this.lunghezza)?z_martinetti:parseInt(z_martinetti-1);
          let ini_martinetti        = dist_minima;//parseFloat( (this.lunghezza-passo_martinetti*(n_martinetti-1))/2);

          if(out.lunghezza<60)
          {
            n_martinetti          = 2;
            new_passo_martinetti  = parseFloat(out.lunghezza-2*dist_minima);
            ini_martinetti        = dist_minima;
          }

           
          for(let i=0; i<n_martinetti; i++)
          {
            let y = parseFloat((array_punti[array_punti.length-1]+array_punti[0])/2);
            this.checkMartinetto( { x:parseFloat(out.estremo_1.x+ini_martinetti+i*new_passo_martinetti),
                                    y:parseFloat(out.estremo_1.y+y)});              
          }
          

      }
      else
      {
          sDis  += ' <rect height="'+parseFloat(out.lunghezza)+
                                  '" width="'+parseFloat(larghezza_magatello)+
                                  '" y="'+parseFloat(0)+
                                  '" x="'+parseFloat(array_punti[0])+
                                  '" style="fill:#71797E;stroke-width:0;stroke:none;fill-opacity:0.2" />';

          for(let i=0; i<array_punti.length; i++)
          {
              sDis += '<line y1="0" x1="'+array_punti[i]+'" y2="'+out.lunghezza+'" x2="'+array_punti[i]+'" style="'+colore_profilo+'" />';
          }

          sDis += '<line y1="0" x1="'+array_punti[0]+'" y2="0" x2="'+array_punti[array_punti.length-1]+'" style="'+colore_profilo+'" />';
          sDis += '<line y1="'+out.lunghezza+'" x1="'+array_punti[0]+'" y2="'+out.lunghezza+'" x2="'+array_punti[array_punti.length-1]+'" style="'+colore_profilo+'" />';

          // disegno martinetti
          let z_martinetti          = Math.ceil((out.lunghezza-2*dist_minima)/passo_martinetti);
          let new_passo_martinetti  = parseFloat((out.lunghezza-2*dist_minima)/(z_martinetti+1));
          let n_martinetti          = (z_martinetti+2); //parseFloat((z_martinetti+1)*passo_martinetti<(this.lunghezza)?z_martinetti:parseInt(z_martinetti-1);
          let ini_martinetti        = dist_minima;//parseFloat( (this.lunghezza-passo_martinetti*(n_martinetti-1))/2);

          if(out.lunghezza<60)
          {
            n_martinetti          = 2;
            new_passo_martinetti  = parseFloat(out.lunghezza-2*dist_minima);
            ini_martinetti        = dist_minima;
          }




          
          for(let i=0; i<n_martinetti; i++)
          {
              let x = parseFloat((array_punti[array_punti.length-1]+array_punti[0])/2);
               this.checkMartinetto(  { y:parseFloat(out.estremo_1.y+ini_martinetti+i*new_passo_martinetti),
                                        x:parseFloat(out.estremo_1.x+x)}); 
          }
                                                                                  
      }

      sDis += '</g>';



  out.svg = sDis;




  return out;

  
}

sistemaListaMagatelli(lista)
{
let  lista_magatelli = this.cloneMyObj(lista.slice(0));

lista_magatelli.sort(function(a, b){return a - b});

const max_delta = 55;
let new_points  = [];

for(let i=1; i<lista_magatelli.length;i++)
{
  let delta = Math.abs(lista_magatelli[i]-lista_magatelli[i-1]);
  if(delta>max_delta)
  {
    //console.log('start point: '+lista_magatelli_ver[i-1]);
    //console.log('delta: '+delta);
    let n_new_points = Math.floor(delta/max_delta);
    //console.log('n_new_points: '+n_new_points);
    let new_delta    = parseFloat(delta/(n_new_points+1));
    //console.log('new_delta: '+new_delta);
    for(let j=0; j<n_new_points; j++)
    {
      //console.log('new_point: ');
      let new_point = parseFloat(lista_magatelli[i-1]+(j+1)*new_delta);
      //console.log(new_point);
      new_points.push(new_point);
    }
  }
}
//console.log('final new_points: ');
//console.log(new_points);

let tmp_array = lista_magatelli.concat(new_points);
tmp_array.sort(function(a, b){return a - b});
lista_magatelli = tmp_array.slice(0);

return this.cloneMyObj(lista_magatelli);
}
        

checkMartinetto(pos)
{
  let found = false;
  let tipo = 'martinetto';
  for(let i=0;i<this.lista_martinetti.length;i++)
  {
    if(JSON.stringify(this.lista_martinetti[i].pos)==JSON.stringify(pos))
    {
      found = true;
      break;
    }
  }

  if(!found)
  {
      for(let i=0;i<this.lista_coverZones.length;i++)
      {

          for(let th=0;th<360;th++)
          {
              let point = {x:parseFloat(pos.x+6*Math.cos(Math.PI/180*th)),
                           y:parseFloat(pos.y+6*Math.sin(Math.PI/180*th))}

               if(parseFloat(this.lista_coverZones[i].posizione.x)<=point.x && point.x<=parseFloat(this.lista_coverZones[i].posizione.x+this.lista_coverZones[i].dimensione.W) &&
                  parseFloat(this.lista_coverZones[i].posizione.y)<=point.y && point.y<=parseFloat(this.lista_coverZones[i].posizione.y+this.lista_coverZones[i].dimensione.H)
                  )
                  {
                      if(this.lista_coverZones[i].tipo=='zavorre')
                      {
                          tipo = 'martinetto su zavorra';
                      }

                      found = true;
                      break;
                  }                                    
          }
          if(found) break;
          
      }
  }     
  




  if(!found || tipo == 'martinetto su zavorra')
  {
      this.lista_martinetti.push(this.creaMartinetto({posizione: pos,
                                                      tipo:tipo
                                                     }));
  }

  
}


sumVector(p1, p2){
  return {x:parseFloat(p1.x+p2.x), y:parseFloat(p1.y+p2.y)};
}

transcodificaETK(link){
     
  let new_etk = this.costruisciStr(link.vertici_ordinati.start)+'-'+this.costruisciStr(link.vertici_ordinati.stop);

  return new_etk;
}

costruisciStr(strIn){
  let str = '';
  if(['AB','BC','CD','AD'].includes(strIn.split('_')[0]))
  {
    switch(strIn.split('_')[0])
    {
      case 'AB':
          str += 'd';
      break;
      case 'BC':
          str += 'c';
      break;
      case 'CD':
          str += 'b';
      break;
      case 'AD':
          str += 'a';
      break;    
    }
    
    if(strIn.split('-').length==1)
    {
      switch(strIn.split('_')[1])
      {
          case 'A1':
              str += '1';
          break;
          case 'A2':
              str += '2';
          break;
          case 'S1':
              str += '3';
          break;
          case 'S2':
              str += '4';
          break;     
      }        
    }

    if(strIn.split('-').length>1)
    {
      switch(strIn.split('-')[0].split('_')[1])
      {
          case 'A1':
              str += '1';
          break;
          case 'A2':
              str += '2';
          break;
          case 'S1':
              str += '3';
          break;
          case 'S2':
              str += '4';
          break;     
      }
      str += strIn.split('-')[1];
    }
  }
  else
      str = strIn;

 return str;     
}


setCompensazione(indice, topology, segno)
{
let compensazione = 0;
if(this.smOBJ.angoli[indice].top==topology) compensazione = segno*this.smOBJ.dimensioni.nominali.gamba/2;
return compensazione;
}

SommaSeNonNullo(str)
{
//console.log('');

let cerca = this.smOBJ.lista_screen.filter((el)=>{return el.name==str;});
if(cerca.length>0)
{
  let luce = (typeof cerca[0].luce!=='undefined')?cerca[0].luce:0;
  let tmp  =  (luce>0)?parseFloat(1*luce+1*this.smOBJ.dimensioni.nominali.gamba):0;
  //console.log(str, tmp); 
  return tmp;    
}
return 0;
}


caricaSCREEN()
{
let lista_screen = [];
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_ab.CH_A1)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_ab.CH_A2)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_ab.CH_A3)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_ab.CH_S1)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_ab.CH_S2)));

lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_ad.CH_A1)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_ad.CH_A2)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_ad.CH_A3)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_ad.CH_S1)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_ad.CH_S2)));

lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_bc.CH_A1)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_bc.CH_A2)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_bc.CH_A3)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_bc.CH_S1)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_bc.CH_S2)));

lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_cd.CH_A1)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_cd.CH_A2)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_cd.CH_A3)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_cd.CH_S1)));
lista_screen.push( JSON.parse(JSON.stringify(this.smOBJ.tenda_caduta.t_cd.CH_S2)));




let forbidden =['AY', 'BY', 'DY', 'CY', 'AX', 'DX', 'BX', 'CX'];
if(this.checkTop('D',5) && this.checkTop('C',6)) forbidden.push('Y2','Y4','Y6');
if(this.checkTop('A',5) && this.checkTop('B',6)) forbidden.push('Y1','Y3','Y5');
if(this.checkTop('A',7) && this.checkTop('D',8)) forbidden.push('X2','X4','X6');
if(this.checkTop('B',7) && this.checkTop('C',8)) forbidden.push('X1','X3','X5');

if(this.checkPost('A') && this.checkPost('D')) forbidden.push('X2','X4','X6');
if(this.checkPost('A') && this.checkPost('B')) forbidden.push('Y1','Y3','Y5');
if(this.checkPost('B') && this.checkPost('C')) forbidden.push('X1','X3','X5');
if(this.checkPost('D') && this.checkPost('C')) forbidden.push('Y2','Y4','Y6');



for(let i=0; i<lista_screen.length;i++)
{


  let test1 = (forbidden.includes(lista_screen[i].name)==false);
  let test2 = lista_screen[i].luce>0;
  let test  = (test1==true)&&(test2==true);
  if(lista_screen[i].active==false) lista_screen[i].mot = 0;

  

  lista_screen[i].active = (lista_screen[i].active==false)?false:test;


}

this.smOBJ.lista_screen = [];
this.smOBJ.lista_screen = lista_screen.splice(0);
}



caricaGambe(){
this.caricaSCREEN();
this.caricaVETRATE();

let gambe = [];

let compensazioneX = 0;
let compensazioneY = 0;

let compensazioneModulo = {A: {x:0, y:0},
                           B: {x:0, y:0},
                           C: {x:0, y:0},
                           D: {x:0, y:0}};

compensazioneX = this.setCompensazione(0, 5, -1);
compensazioneY = (this.smOBJ.modello!=='SWAY' &&
                  this.smOBJ.modello!=='ECO JOY' &&
                  this.smOBJ.modello!=='TWIST' &&
                  this.smOBJ.modello!=='JOY' &&
                  this.smOBJ.modello!=='AZIMUT' &&
                  this.smOBJ.modello!=='ZENIT'
                 )?this.setCompensazione(0, 7, -2): this.setCompensazione(0, 7, -1);
compensazioneModulo.A = {x:compensazioneX, y: compensazioneY};

gambe.push(this.SetGAMBA({etk:'A', 
                     TOP_ANG:this.smOBJ.angoli[0].top, 
                     TYPE_ANG:this.smOBJ.angoli[0].type, 
                     OPTIONAL_ANG:this.smOBJ.angoli[0].opt, 
                     posizione:{assoluta: {x:parseFloat(compensazioneX), y:parseFloat(compensazioneY)}} ,
                     enabling:{type:'std', condition:true}
             }));



compensazioneX = this.setCompensazione(1, 6, -1); // -1); // -1);
compensazioneY = (this.smOBJ.modello!=='SWAY' &&
                  this.smOBJ.modello!=='ECO JOY' &&
                  this.smOBJ.modello!=='TWIST' &&
                  this.smOBJ.modello!=='JOY' &&
                  this.smOBJ.modello!=='AZIMUT' &&
                  this.smOBJ.modello!=='ZENIT' )?this.setCompensazione(1, 7, 0): this.setCompensazione(1, 7, 1); //compensazioneY = this.setCompensazione(1, 7, 0); // 1*0);
compensazioneModulo.B = {x:compensazioneX, y: compensazioneY};
gambe.push(this.SetGAMBA({ etk:'B', 
                      TOP_ANG:this.smOBJ.angoli[1].top, 
                      TYPE_ANG:this.smOBJ.angoli[1].type, 
                      OPTIONAL_ANG:this.smOBJ.angoli[1].opt, 
                      posizione:{assoluta: {x:parseFloat(compensazioneX),
                            y:parseFloat(this.smOBJ.dimensioni.nominali.delta_sporgenze_variabili+this.smOBJ.dimensioni.nominali.sporgenza-this.smOBJ.dimensioni.nominali.gamba+compensazioneY)}},
                      enabling:{type:'std', condition:true}
            }));


compensazioneX = this.setCompensazione(2, 6, 1); // 1); // 1); // 0); // 1*0);
//compensazioneY = this.setCompensazione(2, 8, 0); // 1*0);
compensazioneY = (this.smOBJ.modello!=='SWAY' &&
                  this.smOBJ.modello!=='ECO JOY' &&
                  this.smOBJ.modello!=='TWIST' &&
                  this.smOBJ.modello!=='JOY' &&
                  this.smOBJ.modello!=='AZIMUT' &&
                  this.smOBJ.modello!=='ZENIT' )?this.setCompensazione(2, 8, 0): this.setCompensazione(2, 8, 1);
compensazioneModulo.C = {x:compensazioneX, y: compensazioneY};
gambe.push(this.SetGAMBA({ etk:'C',                      
                      TOP_ANG:this.smOBJ.angoli[2].top, 
                      TYPE_ANG:this.smOBJ.angoli[2].type, 
                      OPTIONAL_ANG:this.smOBJ.angoli[2].opt, 
                      posizione:{assoluta: {x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza-this.smOBJ.dimensioni.nominali.gamba+compensazioneX),
                            y:parseFloat(this.smOBJ.dimensioni.nominali.delta_sporgenze_variabili+this.smOBJ.dimensioni.nominali.sporgenza-this.smOBJ.dimensioni.nominali.gamba+compensazioneY)}},
                      enabling:{type:'std', condition:true}
            }));

compensazioneX = this.setCompensazione(3, 5, 1); // 1); // 1*0);
compensazioneY = this.setCompensazione(3, 8, -2); // -2); // -2);
compensazioneY = (this.smOBJ.modello!=='SWAY' &&
                  this.smOBJ.modello!=='ECO JOY' &&
                  this.smOBJ.modello!=='TWIST' &&
                  this.smOBJ.modello!=='JOY' &&
                  this.smOBJ.modello!=='AZIMUT' &&
                  this.smOBJ.modello!=='ZENIT' )?this.setCompensazione(3, 8, -2): this.setCompensazione(3, 8, -1);
compensazioneModulo.D = {x:compensazioneX, y: compensazioneY};
this.smOBJ.compensazioneModulo = JSON.parse(JSON.stringify(compensazioneModulo));

gambe.push(this.SetGAMBA({ etk:'D', 
                      TOP_ANG:this.smOBJ.angoli[3].top, 
                      TYPE_ANG:this.smOBJ.angoli[3].type, 
                      OPTIONAL_ANG:this.smOBJ.angoli[3].opt, 
                      posizione:{assoluta: {x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza-this.smOBJ.dimensioni.nominali.gamba+compensazioneX),
                            y:parseFloat(compensazioneY)}},
                      enabling:{type:'std', condition:true}
            }));


compensazioneX = compensazioneModulo.A.x;
compensazioneY = compensazioneModulo.A.y;
gambe.push(this.SetGAMBA({ etk:'AB_S1',
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.ab.GA_S1.opt,
              posizione:{assoluta:{x:parseFloat(compensazioneX),
                            y:parseFloat(compensazioneY+this.SommaSeNonNullo('AY'))}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.ab.GA_S1.active},
            }));

compensazioneX = compensazioneModulo.A.x;
compensazioneY = compensazioneModulo.A.y;
gambe.push(this.SetGAMBA({ etk:'AB_S2',
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.ab.GA_S2.opt,
              posizione:{assoluta:{x:parseFloat(compensazioneX),
                            y:parseFloat(compensazioneY+this.SommaSeNonNullo('AY')+this.SommaSeNonNullo('Y1')+this.SommaSeNonNullo('Y3')+this.SommaSeNonNullo('Y5'))}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.ab.GA_S2.active},
            }));


compensazioneX = compensazioneModulo.B.x;
compensazioneY = compensazioneModulo.B.y;
gambe.push(this.SetGAMBA({ etk:'BC_S1',	
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.bc.GA_S1.opt,
              posizione:{assoluta: {x:parseFloat(compensazioneX+this.SommaSeNonNullo('BX')),
                            y:parseFloat(this.smOBJ.dimensioni.nominali.delta_sporgenze_variabili+this.smOBJ.dimensioni.nominali.sporgenza-this.smOBJ.dimensioni.nominali.gamba+compensazioneY)}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.bc.GA_S1.active},
            }));


compensazioneX = compensazioneModulo.B.x;
compensazioneY = compensazioneModulo.B.y;
gambe.push(this.SetGAMBA({ etk:'BC_S2', 
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.bc.GA_S2.opt,
                      posizione:{assoluta: {x:parseFloat(compensazioneX+this.SommaSeNonNullo('BX')+this.SommaSeNonNullo('X1')+this.SommaSeNonNullo('X3')+this.SommaSeNonNullo('X5')),
                            y:parseFloat(this.smOBJ.dimensioni.nominali.delta_sporgenze_variabili+this.smOBJ.dimensioni.nominali.sporgenza-this.smOBJ.dimensioni.nominali.gamba+compensazioneY)}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.bc.GA_S2.active},
            }));


compensazioneX = compensazioneModulo.D.x;
compensazioneY = compensazioneModulo.D.y;
gambe.push(this.SetGAMBA({ etk:'CD_S2', 
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.cd.GA_S1.opt,
                      posizione:{assoluta: {x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza-this.smOBJ.dimensioni.nominali.gamba+compensazioneX),
                            y:parseFloat(compensazioneY+this.SommaSeNonNullo('DY')+this.SommaSeNonNullo('Y2')+this.SommaSeNonNullo('Y4')+this.SommaSeNonNullo('Y6'))}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.cd.GA_S1.active},
            }));


compensazioneX = compensazioneModulo.D.x;
compensazioneY = compensazioneModulo.D.y;
gambe.push(this.SetGAMBA({ etk:'CD_S1', 	
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.cd.GA_S2.opt,
                      posizione:{assoluta: {x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza-this.smOBJ.dimensioni.nominali.gamba+compensazioneX),
                            y:parseFloat(compensazioneY+this.SommaSeNonNullo('DY'))}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.cd.GA_S2.active},
                      }));


compensazioneX = compensazioneModulo.A.x;
compensazioneY = compensazioneModulo.A.y;
gambe.push(this.SetGAMBA({ etk:'AD_S1', 
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.ad.GA_S1.opt,
                      posizione:{assoluta:{x:parseFloat(compensazioneX+this.SommaSeNonNullo('AX')),
                            y:parseFloat(compensazioneY)}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.ad.GA_S1.active},
            }));


compensazioneX = compensazioneModulo.A.x;
compensazioneY = compensazioneModulo.A.y;
gambe.push(this.SetGAMBA({ etk:'AD_S2',	
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.ad.GA_S2.opt,
                      posizione:{assoluta:{x:parseFloat(compensazioneX+this.SommaSeNonNullo('AX')+this.SommaSeNonNullo('X2')+this.SommaSeNonNullo('X4')+this.SommaSeNonNullo('X6')),
                            y:parseFloat(compensazioneY)}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.ad.GA_S2.active},
            }));


compensazioneX = compensazioneModulo.A.x;
compensazioneY = compensazioneModulo.A.y;
gambe.push(this.SetGAMBA({ etk:'AB_A1', 	
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.ab.GA_A1.opt,
                      posizione:{assoluta:{x:parseFloat(compensazioneX),
                            y:parseFloat(compensazioneY+this.SommaSeNonNullo('AY')+this.SommaSeNonNullo('Y1'))}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.ab.GA_A1.active},
            }));


compensazioneX = compensazioneModulo.A.x;
compensazioneY = compensazioneModulo.A.y;
gambe.push(this.SetGAMBA({ etk:'AB_A2', 
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.ab.GA_A2.opt,
                      posizione:{assoluta:{x:parseFloat(compensazioneX),
                            y:parseFloat(compensazioneY+this.SommaSeNonNullo('AY')+this.SommaSeNonNullo('Y1')+this.SommaSeNonNullo('Y3'))}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.ab.GA_A2.active},
            }));


compensazioneX = compensazioneModulo.B.x;
compensazioneY = compensazioneModulo.B.y;
gambe.push(this.SetGAMBA({ etk:'BC_A1',
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.bc.GA_A1.opt,
                      posizione:{assoluta:{x:parseFloat(compensazioneX+this.SommaSeNonNullo('BX')+this.SommaSeNonNullo('X1')),
                            y:parseFloat(this.smOBJ.dimensioni.nominali.delta_sporgenze_variabili+this.smOBJ.dimensioni.nominali.sporgenza-this.smOBJ.dimensioni.nominali.gamba+compensazioneY)}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.bc.GA_A1.active},
            }));


compensazioneX = compensazioneModulo.B.x;
compensazioneY = compensazioneModulo.B.y;
gambe.push(this.SetGAMBA({ etk:'BC_A2',  
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.bc.GA_A2.opt,	
                      posizione:{assoluta:{x:parseFloat(compensazioneX+this.SommaSeNonNullo('BX')+this.SommaSeNonNullo('X1')+this.SommaSeNonNullo('X3')),
                            y:parseFloat(this.smOBJ.dimensioni.nominali.delta_sporgenze_variabili+this.smOBJ.dimensioni.nominali.sporgenza-this.smOBJ.dimensioni.nominali.gamba+compensazioneY)}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.bc.GA_A2.active},
            }));


compensazioneX = compensazioneModulo.D.x;
compensazioneY = compensazioneModulo.D.y;
gambe.push(this.SetGAMBA({ etk:'CD_A1',	
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.cd.GA_A1.opt,
                      posizione:{assoluta:{x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza-this.smOBJ.dimensioni.nominali.gamba+compensazioneX),
                            y:parseFloat(compensazioneY+this.SommaSeNonNullo('DY')+this.SommaSeNonNullo('Y2'))}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.cd.GA_A1.active},
            }));


compensazioneX = compensazioneModulo.D.x;
compensazioneY = compensazioneModulo.D.y;
gambe.push(this.SetGAMBA({ etk:'CD_A2',
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.cd.GA_A2.opt,
                      posizione:{assoluta:{x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza-this.smOBJ.dimensioni.nominali.gamba+compensazioneX),
                            y:parseFloat(compensazioneY+this.SommaSeNonNullo('DY')+this.SommaSeNonNullo('Y2')+this.SommaSeNonNullo('Y4'))}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.cd.GA_A2.active},
            }));

// attenzione: per coerenza con SMEUP abbiamo dovuto invertire le etichette di AD_A1 e AD_A2
compensazioneX = compensazioneModulo.A.x;
compensazioneY = compensazioneModulo.A.y;
gambe.push(this.SetGAMBA({ etk:'AD_A1', 
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.ad.GA_A1.opt,
                      posizione:{assoluta:{x:parseFloat(compensazioneX+this.SommaSeNonNullo('AX')+this.SommaSeNonNullo('X2')),
                            y:parseFloat(compensazioneY)}},
             enabling:{type:'no std', condition:this.smOBJ.gamba_agg.ad.GA_A1.active},
            }));


compensazioneX = compensazioneModulo.A.x;
compensazioneY = compensazioneModulo.A.y;
gambe.push(this.SetGAMBA({ etk:'AD_A2', 
                      OPTIONAL_ANG:this.smOBJ.gamba_agg.ad.GA_A2.opt,
                      posizione:{assoluta:{x:parseFloat(compensazioneX+this.SommaSeNonNullo('AX')+this.SommaSeNonNullo('X2')+this.SommaSeNonNullo('X4')),
                            y:parseFloat(compensazioneY)}},
                      enabling:{type:'no std', condition:this.smOBJ.gamba_agg.ad.GA_A2.active},
            }));

 return JSON.parse(JSON.stringify(gambe));
}    


caricaPiastre()
{
for(let i=0;i<this.lista_linkTraNodi.length;i++) 
      {
          if(this.lista_linkTraNodi[i].piastra_compensazione.inizio) 
             this.insert4BOM({name:'KIT PIASTRINO COMPENSAZIONE ANGOLO', n: 1,   gruppo:'ALL', lunghezza:0, codifica:''});
          if(this.lista_linkTraNodi[i].piastra_compensazione.fine)
             this.insert4BOM({name:'KIT PIASTRINO COMPENSAZIONE ANGOLO', n: 1,   gruppo:'ALL', lunghezza:0, codifica:''});                       
      }

// staffe antisollevamento
      
}

//////////////////////////////////////////////

SVGgenerale(svgName, settings)
{
  let sDis = '';
  sDis += '<g id="outer_'+svgName+
          '" transform="translate('+this.grafica.startPoint.x+' '+
                                    this.grafica.startPoint.y+')">';
  sDis += '<g id="inner_'+svgName+'" transform="scale('+this.grafica.scala+')" >'; 
  
  if(settings.vedi_ingombri)
  {
    sDis += '<rect width ="'+this.grafica.rettangolo_interno.w+
                '" height="'+this.grafica.rettangolo_interno.h+
                '" x="'+this.grafica.rettangolo_interno.point.x+'" y="'+this.grafica.rettangolo_interno.point.y+'" rx="0" ry="0" style="fill:blue;stroke:red;stroke-width:1;fill-opacity:0.1;stroke-opacity:0.0" />';
    
    sDis += '<rect width ="'+this.grafica.rettangolo_esterno.w+
                '" height="'+this.grafica.rettangolo_esterno.h+
                '" x="'+this.grafica.rettangolo_esterno.point.x+'" y="'+this.grafica.rettangolo_esterno.point.y+'" rx="0" ry="0" style="fill:blue;stroke:red;stroke-width:1;fill-opacity:0.1;stroke-opacity:0.0" />'; 
  }

   
  /////////////////////////////////////////////////////////////////////////////////
  
  // disegno martinetti
  if(settings.vedi_martinetti)
  {
  for(let i=0;i<this.lista_martinetti.length;i++)
      {            
          sDis += this.lista_martinetti[i].svg;
         
      }
      sDis += this.svgLegendaMartinetti();
  }

  // disegno profili
  if(settings.vedi_profili)
  {
    for(let i=0;i<this.lista_linkTraNodi.length;i++)
        {            
            sDis += this.svgProfiloUniversale(this.lista_linkTraNodi[i], settings);
        }

    for(let i=0;i<this.lista_linkPerCover.length;i++)
        {            
            sDis += this.svgProfiloUniversale(this.lista_linkPerCover[i], settings);
        }
  }

  // disegno giunzioni (visibili quando attivi visibilità profili)
  if(settings.vedi_profili)
  {
  for(let i=0;i<this.lista_giunti.length;i++)
      {            
          sDis += this.lista_giunti[i].svg;
         
      }
  }
  

  if(settings.vedi_magatelli)
  {
      for(let i=0;i<this.lista_magatelli.length;i++)
      {            
          sDis += this.lista_magatelli[i].svg;
      }
  }    

  // per test
  if(settings.vedi_coverZones)
  {   
  for(let i=0;i<this.lista_coverZones.length;i++)
      {                
         sDis += this.lista_coverZones[i].svg;
      }    
  } 
  
  // Gambe
  if(settings.vedi_gambe)
  {
      for(let i=0;i<this.lista_POST.length;i++) 
      {        
          sDis += this.lista_POST[i].svg;
      }
  }



  // marker nodi
  if(settings.vedi_markerNodi)
  {
      for(let i=0;i<this.lista_nodi.length;i++)
          {
              if(this.lista_nodi[i].enabled) 
                {
                  //sDis += this.lista_nodi[i].svg;
                  //console.log(this.lista_nodi[i].etk);
                  sDis += this.gen_svgNodo(this.lista_nodi[i]);
                } 
          }
  }
  
  // piastre di compensazione
  if(settings.vedi_piastreComp)
  {
      for(let i=0;i<this.lista_linkTraNodi.length;i++) 
      {
          if(this.lista_linkTraNodi[i].piastra_compensazione.inizio || this.lista_linkTraNodi[i].piastra_compensazione.fine)
          {
              sDis += this.lista_linkTraNodi[i].svgPiastre;
          }
          
      }

      // staffe antisollevamento
      for(let i=0;i<this.lista_staffe_antisollevamento.length;i++) 
      {
          sDis += this.lista_staffe_antisollevamento[i].svg;                        
      }
  }


  ////////////////////////////////////////////////////////////////////////////////////////////////////////
  // zavorramento 
  if(settings.vedi_zavorre)
  {
      for(let i=0;i<this.zavorramento.zavorre.length;i++)
          {                
          sDis += this.zavorramento.zavorre[i].svg;
          }    
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////// 

  // ricoprimento
  if(settings.vedi_ricoprimento)
  {
      if(this.smOBJ.optionals.pedana.floor.type.split('-')[0]==1) // 1 piastrelle
      {
          for(let i=0;i<this.lista_piastrelle.length;i++)
              sDis += this.lista_piastrelle[i].svg;
      }

      if(this.smOBJ.optionals.pedana.floor.type.split('-')[0]==2) // 2 doghe
      {
          for(let i=0;i<this.lista_doghe.length;i++)
              sDis += this.lista_doghe[i].svg;
      }

      if(settings.vedi_gambe)
      {
          for(let i=0;i<this.lista_POST.length;i++) 
          {        
              sDis += this.lista_POST[i].svg;
          }
      }

  }
  // vetrate
  if(settings.vedi_vetrate)
      sDis += this.disegna_vetrate_2D(); //this.svgVetrate;

  // cablaggio elettronica stripLED
  if(settings.vedi_cablaggio)
      sDis += this.svgCablaggio;

 


  // Quote esterne
  // disegnaQUOTAsemplice(lato, pos, lunghezza, incrementoFont, testo_quota='')
  if(settings.vedi_quoteEsterne)
  {
      sDis += this.disegnaQUOTAsemplice('AD', this.grafica.quote[0].start, this.grafica.quote[0].len).sDis;
      sDis += this.disegnaQUOTAsemplice('BC', this.grafica.quote[1].start, this.grafica.quote[1].len).sDis;
      sDis += this.disegnaQUOTAsemplice('BC', this.grafica.quote[2].start, this.grafica.quote[2].len).sDis;
      sDis += this.disegnaQUOTAsemplice('BC', this.grafica.quote[3].start, this.grafica.quote[3].len).sDis;

      sDis += this.disegnaQUOTAsemplice('CD', this.grafica.quote[4].start, this.grafica.quote[4].len).sDis;
      sDis += this.disegnaQUOTAsemplice('AB', this.grafica.quote[5].start, this.grafica.quote[5].len).sDis;
      sDis += this.disegnaQUOTAsemplice('AB', this.grafica.quote[6].start, this.grafica.quote[6].len).sDis;
      sDis += this.disegnaQUOTAsemplice('AB', this.grafica.quote[7].start, this.grafica.quote[7].len).sDis; 
  }
  
  
  /////////////////////////////////////////////////////////////////////////////////
  if(settings.vedi_cablaggio && this.lista_stripLED.length>0)
    sDis += this.genera_svgCablaggi();
  
  //if(settings.vedi_powerLines && this.lista_stripLED.length>0)
  //  sDis += this.disegnaPOWERLINES();


  /////////////////////////////////////////////////////////////////////////////////
  
  sDis += '</g>';
  sDis += '</g>';



  if(settings.vedi_lattoneria)
  {
     if(this.lista_vaschette.length>0)
      {
          for(let i=0;i<this.lista_vaschette.length;i++)
          {
              this.lista_vaschette.tavola =  parseFloat(i+1)+' / ' + this.lista_vaschette.length;
              sDis = this.disegnaConCorniciLattornerie(svgName, 
                                                      this.DisegnaLattoneria(this.lista_vaschette[i]), 
                                                      '', 
                                                      this.lista_vaschette[i]);
              this.grafica.lista_SVG.push({tipo:svgName, indice:i,  svg: sDis});                                          
          }
      } 
  }
  else
  {
      if((settings.vedi_componenti_elettronici || settings.vedi_powerLines) && this.lista_stripLED.length>0)
      {
         if(settings.vedi_powerLines) 
            sDis = this.disegnaConCorniciElementiElettronici(svgName, this.disegnaPOWERLINES(''));
         else
            sDis = this.disegnaConCorniciElementiElettronici(svgName, this.disegnaElementiElettronici(''));

         this.grafica.lista_SVG.push({tipo:svgName, indice:0,  svg: sDis}); 
      }
      else
      { 
        if(settings.vedi_3D_martinetti)
        {
           sDis = this.disegnaConCornici(svgName, this.disegna3D_martinetti());
           this.grafica.lista_SVG.push({tipo:svgName, indice:0,  svg: sDis}); 
        }  
        else
        {
          if(settings.vedi_3D)
          {
            sDis = this.disegnaConCornici(svgName, this.disegna3D());
            this.grafica.lista_SVG.push({tipo:svgName, indice:0,  svg: sDis}); 
          }  
          else
          {
            sDis = this.disegnaConCornici(svgName, sDis, '');
            this.grafica.lista_SVG.push({tipo:svgName, indice:0, svg: sDis}); 
          }
        }  
        
      }  
     
     
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////  
/// funzioni per la grafica 3D
////////////////////////////////////////////////////////////////////////////////////////////////////

rotateY(point, angleInDegrees) 
{
const angleInRadians = angleInDegrees * (Math.PI / 180);
const cos = Math.cos(angleInRadians);
const sin = Math.sin(angleInRadians);


const newX = point.x * cos + point.z * sin;
const newZ = point.z * cos - point.x * sin;


// L'asse Z non cambia nella rotazione intorno a Z
return { x: newX, y: point.t, z: newZ };
}


rotateZ(point, angleInDegrees) 
{
const angleInRadians = angleInDegrees * (Math.PI / 180);
const cos = Math.cos(angleInRadians);
const sin = Math.sin(angleInRadians);

const newX = point.x * cos - point.y * sin;
const newY = point.x * sin + point.y * cos;

// L'asse Z non cambia nella rotazione intorno a Z
return { x: newX, y: newY, z: point.z };
}

projectIsometric(point3d) 
{
const angle = Math.PI / 15; 
const cos_x = Math.cos(angle);
const sin_x = Math.sin(angle);

// Formula di proiezione isometrica Z-down (inversione dell'asse Z)
const projectedX = (point3d.x * cos_x) - (point3d.y * cos_x);
const projectedY = (-point3d.z) + (point3d.x * sin_x) + (point3d.y * sin_x);

return {
    x: projectedX,
    y: projectedY
};
}

drawAxesSVG(offset, rotationAngle) 
{
  const axisLength = 51;
  const axisPoints = {
      x: { x: axisLength, y: 0, z: 0 },
      y: { x: 0, y: axisLength, z: 0 },
      z: { x: 0, y: 0, z: axisLength }
  };

  const rotatedX = this.rotateZ(axisPoints.x, rotationAngle);
  const rotatedY = this.rotateZ(axisPoints.y, rotationAngle);
  const rotatedZ = this.rotateZ(axisPoints.z, rotationAngle);

  const projX = this.projectIsometric(rotatedX);
  const projY = this.projectIsometric(rotatedY);
  const projZ = this.projectIsometric(rotatedZ);
  
  const axes = [
      { endPoint: projX, color: '#c00', label: 'Y' },
      { endPoint: projY, color: '#0c0', label: 'X' },
      { endPoint: projZ, color: '#00c', label: 'Z' }
  ];
  
  let sDis = '';
  axes.forEach(axis => {
      sDis += '<line x1="'+offset.x+'" y1="'+offset.y+'" x2="'+parseFloat(axis.endPoint.x + offset.x)+'" y2="'+parseFloat(axis.endPoint.y + offset.y)+'" style="stroke:'+axis.color+';stroke-width:11" />';
      let x = parseFloat(axis.endPoint.x + offset.x + (axis.label === 'Y' ? 5 : -15));
      let y = parseFloat(axis.endPoint.y + offset.y + (axis.label === 'Z' ? 5 : 15 ));
      sDis += '<text x="'+ x +'" y="'+y+'" fill="#000" font-size="16">'+axis.label+'</text>';           
  });

  return sDis;
}

parseSvgPathDAttribute(dAttribute) {
  const vertices = [];
  // Regex per catturare comandi (lettere) e i loro argomenti (numeri)
  // Es: M 10 20 L 30 40 C 50 60 70 80 90 100
  const commands = dAttribute.match(/[MLHVCSQTAmlhvcsqta][^MLHVCSQTAmlhvcsqta]*/g); 

  if (!commands) return vertices;

  let currentX = 0; // Posizione X corrente nel path
  let currentY = 0; // Posizione Y corrente nel path
  let firstX = 0;   // Primo punto di una subpath (per comando Z/z)
  let firstY = 0;   // Primo punto di una subpath (per comando Z/z)

  commands.forEach((cmd, index) => {
      const type = cmd[0]; // Tipo di comando (es. 'M', 'l', 'C')
      // Estrae gli argomenti numerici, filtrando eventuali valori non numerici (NaN)
      const args = cmd.slice(1).trim().split(/[\s,]+/).map(parseFloat).filter(n => !isNaN(n));

      // Gestione dei comandi in base al loro tipo
      switch (type) {
          case 'M': // Moveto assoluto
              currentX = args[0];
              currentY = args[1];
              firstX = currentX; // Inizia una nuova subpath
              firstY = currentY;
              vertices.push({ x: currentX, y: currentY });
              break;
          case 'm': // Moveto relativo
              currentX += args[0];
              currentY += args[1];
              firstX = currentX; // Inizia una nuova subpath
              firstY = currentY;
              vertices.push({ x: currentX, y: currentY });
              break;
          case 'L': // Lineto assoluto
              currentX = args[0];
              currentY = args[1];
              vertices.push({ x: currentX, y: currentY });
              break;
          case 'l': // Lineto relativo
              currentX += args[0];
              currentY += args[1];
              vertices.push({ x: currentX, y: currentY });
              break;
          case 'H': // Lineto orizzontale assoluto
              currentX = args[0];
              vertices.push({ x: currentX, y: currentY });
              break;
          case 'h': // Lineto orizzontale relativo
              currentX += args[0];
              vertices.push({ x: currentX, y: currentY });
              break;
          case 'V': // Lineto verticale assoluto
              currentY = args[0];
              vertices.push({ x: currentX, y: currentY });
              break;
          case 'v': // Lineto verticale relativo
              currentY += args[0];
              vertices.push({ x: currentX, y: currentY });
              break;
          case 'C': // Curveto cubico di Bezier assoluto (x1 y1, x2 y2, x y)
          case 'c': // Curveto cubico di Bezier relativo (dx1 dy1, dx2 dy2, dx dy)
              // Per Zdog (e per ottenere solo i vertici finali), prendiamo solo il punto finale della curva.
              // Questo approssima la curva come una linea retta dal punto precedente al punto finale.
              if (type === 'C') {
                  currentX = args[4]; // Punto finale X
                  currentY = args[5]; // Punto finale Y
              } else { // 'c'
                  currentX += args[4]; // Punto finale X (relativo)
                  currentY += args[5]; // Punto finale Y (relativo)
              }
              vertices.push({ x: currentX, y: currentY });
              //console.warn(`Comando SVG Path '${type}' (curva Bezier cubica) semplificato al solo punto finale. La curva non sarà rappresentata fedelmente.`);
              break;
          // Aggiungere qui altri comandi di curva (S, Q, T, A) se necessario, seguendo la stessa logica di estrazione del punto finale.
          case 'S': // Curveto cubico di Bezier liscio assoluto
          case 's': // Curveto cubico di Bezier liscio relativo
              // S x2 y2, x y (o s dx2 dy2, dx dy)
              if (type === 'S') {
                  currentX = args[2];
                  currentY = args[3];
              } else {
                  currentX += args[2];
                  currentY += args[3];
              }
              vertices.push({ x: currentX, y: currentY });
              //console.warn(`Comando SVG Path '${type}' (curva Bezier cubica liscia) semplificato al solo punto finale.`);
              break;
          case 'Q': // Curveto quadratico di Bezier assoluto (x1 y1, x y)
          case 'q': // Curveto quadratico di Bezier relativo (dx1 dy1, dx dy)
              // Q x1 y1, x y (o q dx1 dy1, dx dy)
              if (type === 'Q') {
                  currentX = args[2];
                  currentY = args[3];
              } else {
                  currentX += args[2];
                  currentY += args[3];
              }
              vertices.push({ x: currentX, y: currentY });
              //console.warn(`Comando SVG Path '${type}' (curva Bezier quadratica) semplificato al solo punto finale.`);
              break;
          case 'T': // Curveto quadratico di Bezier liscio assoluto (x y)
          case 't': // Curveto quadratico di Bezier liscio relativo (dx dy)
              // T x y (o t dx dy)
              if (type === 'T') {
                  currentX = args[0];
                  currentY = args[1];
              } else {
                  currentX += args[0];
                  currentY += args[1];
              }
              vertices.push({ x: currentX, y: currentY });
              //console.warn(`Comando SVG Path '${type}' (curva Bezier quadratica liscia) semplificato al solo punto finale.`);
              break;
          case 'A': // Arco ellittico assoluto (rx ry x-axis-rotation large-arc-flag sweep-flag x y)
          case 'a': // Arco ellittico relativo (rx ry x-axis-rotation large-arc-flag sweep-flag dx dy)
              // Per gli archi, il punto finale è args[5] e args[6] per assoluto, o args[5] e args[6] per relativo
              if (type === 'A') {
                  currentX = args[5];
                  currentY = args[6];
              } else {
                  currentX += args[5];
                  currentY += args[6];
              }
              vertices.push({ x: currentX, y: currentY });
              //console.warn(`Comando SVG Path '${type}' (arco ellittico) semplificato al solo punto finale. L'arco non sarà rappresentato fedelmente.`);
              break;
          case 'Z': // Closepath (assoluto o relativo)
          case 'z': // Closepath
              // Il comando Z/z chiude la subpath corrente tornando al punto iniziale (M/m).
              // Per l'estrazione dei vertici, non aggiungiamo un nuovo punto qui,
              // ma aggiorniamo la posizione corrente al primo punto della subpath.
              currentX = firstX;
              currentY = firstY;
              break;
          default:
              console.warn(`Comando SVG Path non riconosciuto: ${type}`);
      }
  });

  return vertices;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
///  
////////////////////////////////////////////////////////////////////////////////////////////////////
disegnaPannelloVetro3D(pannello, rotationAngle)
{

let h   = 240;
let hn  = 11;
let vertici_sopra = [];
let vertici_sotto = [];


vertici_sotto.push({x:pannello.pos.ini.x,    y:pannello.pos.ini.y,    z:hn}); 
vertici_sotto.push({x:pannello.pos.ini.x,    y:pannello.pos.end.y,    z:hn}); 
vertici_sotto.push({x:pannello.pos.end.x,    y:pannello.pos.end.y,    z:hn}); 
vertici_sotto.push({x:pannello.pos.end.x,    y:pannello.pos.ini.y,    z:hn}); 

let vertici_sotto_2D = [];
let vertici_sopra_2D = [];




for(let i=0;i<vertici_sotto.length;i++)
{
  // rotazione
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotationAngle);

  // clone
  let tmp = this.cloneMyObj(vertici_sotto[i]);
  tmp.z   = parseFloat(h+hn);
  vertici_sopra.push(tmp);

  // proiezioni
  vertici_sotto_2D.push(this.projectIsometric(vertici_sotto[i]));
  vertici_sopra_2D.push(this.projectIsometric(tmp));
}
this.create3Dsurfaces(vertici_sotto, vertici_sopra);

let sDis = '';
sDis += this.getPoligono(vertici_sotto_2D,'fill:cyan;stroke:silver;stroke-width:2;fill-opacity:0.51');
sDis += this.getPoligono(vertici_sopra_2D,'fill:cyan;stroke:silver;stroke-width:2;fill-opacity:0.51');

for(let i=0;i<vertici_sotto_2D.length;i++)
{
  let j = (i<vertici_sotto_2D.length-1)?parseInt(i+1):0;
  let poligono = [];
  poligono.push(vertici_sopra_2D[i]);
  poligono.push(vertici_sotto_2D[i]);
  poligono.push(vertici_sotto_2D[j]);
  poligono.push(vertici_sopra_2D[j]);

  sDis+=this.getPoligono(poligono, 'fill:cyan;stroke:gray;stroke-width:2;fill-opacity:0.31');
}

return sDis;
}

calculateFaceNormal(poligono)
{


let n1 = 0;
let n2 = Math.floor(poligono.length/2);
let n3 = poligono.length-2>n2?poligono.length-2:poligono.length-1;

const v1 = poligono[n1];
const v2 = poligono[n2];
const v3 = poligono[n3];

// Calculate two vectors on the plane of the face
const vecA = { x: v2.x - v1.x, y: v2.y - v1.y, z: v2.z - v1.z };
const vecB = { x: v3.x - v1.x, y: v3.y - v1.y, z: v3.z - v1.z };

// The cross product of the two vectors gives the normal
const normal = {
    x: vecA.y * vecB.z - vecA.z * vecB.y,
    y: vecA.z * vecB.x - vecA.x * vecB.z,
    z: vecA.x * vecB.y - vecA.y * vecB.x
};

return normal;
}

create3Dface(pointsIn, centro_riferimento)
{
let points = this.cloneMyObj(pointsIn);
// devo assicurarmi che i punti siano ordinati in senso antiorario secondo la normale uscente dall'estrusione
let centroid = {x:0, y:0, z:0};
for(let i=0;i<points.length;i++)
{
  centroid.x += points[i].x/points.length;
  centroid.y += points[i].y/points.length;
  centroid.z += points[i].z/points.length;
}
// vettore da centro_riferimento a centroide
let vec = {x:centroid.x - centro_riferimento.x, 
           y:centroid.y - centro_riferimento.y,
           z:centroid.z - centro_riferimento.z};  
let normal = this.calculateFaceNormal(points);

// se il prodotto scalare tra vec e normal è < 0 devo ordinare al contrario il vettore di punti
if(this.dotProduct(vec, normal)<0) 
  {
    points.reverse();
    normal = this.calculateFaceNormal(points);
  }
let distC   = this.distance3d(centroid, this.grafica.viewVector);
this.lista_surface3D.push({points:this.cloneMyObj(points), distC:distC, normal:normal});
}


dotProduct(vecA, vecB) {
return vecA.x * vecB.x + vecA.y * vecB.y + vecA.z * vecB.z;
}

create3Dsurfaces(vertici_sotto, vertici_sopra)
{
// calcolo il punto centrale interno della prima superficie
let centroid = {x:0, y:0, z:0};
for(let i=0;i<vertici_sotto.length;i++)
{
  centroid.x += vertici_sotto[i].x/vertici_sotto.length;
  centroid.y += vertici_sotto[i].y/vertici_sotto.length;
  centroid.z += vertici_sotto[i].z/vertici_sotto.length;
}
// determino l'asse di estrusione
let asse = {x:0, y:0, z:0};
for(let i=0;i<vertici_sotto.length;i++)
{
  asse.x += vertici_sopra[i].x - vertici_sotto[i].x;
  asse.y += vertici_sopra[i].y - vertici_sotto[i].y;
  asse.z += vertici_sopra[i].z - vertici_sotto[i].z;
}
// vettore verso piano medio
asse.x = asse.x/vertici_sotto.lengt/2;
asse.y = asse.y/vertici_sotto.lengt/2;
asse.z = asse.z/vertici_sotto.lengt/2;

// punto interno centrale è dato da centroid + asse
centroid.x += asse.x;
centroid.y += asse.y;
centroid.z += asse.z;





 this.create3Dface(vertici_sotto, centroid);
 this.create3Dface(vertici_sopra, centroid);
 for(let i=0;i<vertici_sotto.length;i++)
 {
  let j = (i<vertici_sotto.length-1)?parseInt(i+1):0;
  let poligono = [];
  poligono.push(vertici_sopra[i]);
  poligono.push(vertici_sotto[i]);
  poligono.push(vertici_sotto[j]);
  poligono.push(vertici_sopra[j]);
  this.create3Dface(poligono, centroid);
 }
}

distance3d(pointA, pointB)
{
return parseInt(Math.sqrt( Math.pow(pointA.x-pointB.x, 2)+
                  Math.pow(pointA.y-pointB.y, 2)+
                  Math.pow(pointA.z-pointB.z, 2)
                 ));
}

renderAllFaces()
{


 let visibleFaces = this.lista_surface3D.filter(face => {
      const normal = this.calculateFaceNormal(face.points);
      const dot = this.dotProduct(normal, this.grafica.viewVector);
      // A positive dot product means the face is pointing towards the viewer
      return dot > 0;
  });
  
  //console.log(this.lista_surface3D.length);
  //console.log(visibleFaces.length);

  // ordino le superfici a seconda della distanza dal punto di vista
  visibleFaces.sort((a, b) => {
      return a.distC - b.distC;
  });

  // disegno tutte le facce
  let sDis = '';
  for(let i=0;i<visibleFaces.length;i++)
  {
    // proietto i punti di ogni faccia
    let points_2D = [];
    for(let j=0;j<visibleFaces[i].points.length;j++)
    {
       points_2D.push(this.projectIsometric(visibleFaces[i].points[j]));
    }
    sDis+=this.getPoligono(points_2D, 'fill:white;stroke:gray;stroke-width:1;fill-opacity:1');
  }

  return sDis;
}


disegnaNodoEsterno(nodo, rotationAngle)
{
let h   = 10.8;
let vertici_sopra = [];
let vertici_sotto = [];

let str = "M4.8 23 h13.5 v-4.7 h4.7 v-13.5 h-1 v12.5 h-4.7 v4.7 h-12.5 v1";
let v   = this.parseSvgPathDAttribute(str);

for(let i=0;i<v.length;i++)
{
  vertici_sotto.push({x:v[i].x, y:v[i].y, z:0});
}

// rotazione e traslazione, in funzione della posizione
let traslazione = {x:0, y:0};
let rotazioneZ  = 0;
switch (nodo.posType) {
  case 'TL':
    traslazione = {x:0, y:0};
    rotazioneZ  = 0;
    break;
  
  case 'BL':
    traslazione = {x:0, y:0};
    rotazioneZ  = -90;
    break;
    
  case 'TR':
    traslazione = {x:0, y:0};
    rotazioneZ  = 90;
    break;
    
  case 'BR':
    traslazione = {x:0, y:0};
    rotazioneZ  = 180;
    break;  

  default:
    break;
}
for(let i=0;i<vertici_sotto.length;i++)
{
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotazioneZ);
  vertici_sotto[i].x += traslazione.x;
  vertici_sotto[i].y += traslazione.y;
}

////////////////////////////////////////////////////////////
let vertici_sotto_2D = [];
let vertici_sopra_2D = [];

// traslazione sul punto corretto
for(let i=0;i<vertici_sotto.length;i++)
{
  vertici_sotto[i].x += nodo.posizione.x;
  vertici_sotto[i].y += nodo.posizione.y;

  // rotazione
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotationAngle);

  // clone
  let tmp = this.cloneMyObj(vertici_sotto[i]);
  tmp.z   = h;
  vertici_sopra.push(tmp);

  // proiezioni
  vertici_sotto_2D.push(this.projectIsometric(vertici_sotto[i]));
  vertici_sopra_2D.push(this.projectIsometric(tmp));
}

this.create3Dsurfaces(vertici_sotto, vertici_sopra);

let sDis = '';
sDis += this.getPoligono(vertici_sotto_2D,'fill:black;stroke:black;stroke-width:0.2;fill-opacity:1');
sDis += this.getPoligono(vertici_sopra_2D,'fill:black;stroke:black;stroke-width:0.2;fill-opacity:1');

for(let i=0;i<vertici_sotto_2D.length;i++)
{
  let j = (i<vertici_sotto_2D.length-1)?parseInt(i+1):0;
  let poligono = [];
  poligono.push(vertici_sopra_2D[i]);
  poligono.push(vertici_sotto_2D[i]);
  poligono.push(vertici_sotto_2D[j]);
  poligono.push(vertici_sopra_2D[j]);

  sDis+=this.getPoligono(poligono, 'fill:black;stroke:black;stroke-width:1;fill-opacity:1');
}

return sDis;

}

disegnaNodoGamba(nodo, rotationAngle)
{
let h   = 10.8;
let vertici_sopra = [];
let vertici_sotto = [];

let str = "M0 0 v18.8 a 2.4 2.4 0 0 0 2.4 2.4 h16.4 a 2.4 2.4 0 0 0 2.4 -2.4 v-16.4 a 2.4 2.4 0 0 0 -2.4 -2.4 h-18.8";
let v   = this.parseSvgPathDAttribute(str);

for(let i=0;i<v.length;i++)
{
  vertici_sotto.push({x:v[i].x, y:v[i].y, z:0});
}

// rotazione e traslazione, in funzione della posizione
let traslazione = {x:0, y:0};
let rotazioneZ  = 0;
switch (nodo.posType) {
  case 'TL':
    traslazione = {x:0, y:0};
    rotazioneZ  = 0;
    break;
  
  case 'BL':
    traslazione = {x:0, y:0};
    rotazioneZ  = -90;
    break;
    
  case 'TR':
    traslazione = {x:0, y:0};
    rotazioneZ  = 90;
    break;
    
  case 'BR':
    traslazione = {x:0, y:0};
    rotazioneZ  = 180;
    break;  

  default:
    break;
}
for(let i=0;i<vertici_sotto.length;i++)
{
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotazioneZ);
  vertici_sotto[i].x += traslazione.x;
  vertici_sotto[i].y += traslazione.y;
}

////////////////////////////////////////////////////////////
let vertici_sotto_2D = [];
let vertici_sopra_2D = [];

// traslazione sul punto corretto
for(let i=0;i<vertici_sotto.length;i++)
{
  vertici_sotto[i].x += nodo.posizione.x;
  vertici_sotto[i].y += nodo.posizione.y;

  // rotazione
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotationAngle);

  // clone
  let tmp = this.cloneMyObj(vertici_sotto[i]);
  tmp.z   = h;
  vertici_sopra.push(tmp);

  // proiezioni
  vertici_sotto_2D.push(this.projectIsometric(vertici_sotto[i]));
  vertici_sopra_2D.push(this.projectIsometric(tmp));
}
this.create3Dsurfaces(vertici_sotto, vertici_sopra);
let sDis = '';


for(let i=0;i<vertici_sotto_2D.length;i++)
{
  let j = (i<vertici_sotto_2D.length-1)?parseInt(i+1):0;
  let poligono = [];
  poligono.push(vertici_sopra_2D[i]);
  poligono.push(vertici_sotto_2D[i]);
  poligono.push(vertici_sotto_2D[j]);
  poligono.push(vertici_sopra_2D[j]);

  sDis+=this.getPoligono(poligono, 'fill:black;stroke:black;stroke-width:1;fill-opacity:0.51');
}
sDis += this.getPoligono(vertici_sotto_2D,'fill:black;stroke:black;stroke-width:0.2;fill-opacity:0.51');
sDis += this.getPoligono(vertici_sopra_2D,'fill:black;stroke:black;stroke-width:0.2;fill-opacity:0.51');

return sDis;

}


disegnaGamba(nodo, rotationAngle)
{
let dim = this.smOBJ.dimensioni.nominali.gamba;
let h   = 240;
let hn  = 11;
let vertici_sopra = [];
let vertici_sotto = [];

switch (nodo.posType) {

  case 'TL':
    vertici_sotto.push({x:0,    y:0,    z:hn});
    vertici_sotto.push({x:dim,  y:0,    z:hn});
    vertici_sotto.push({x:dim,  y:dim,  z:hn});
    vertici_sotto.push({x:0,    y:dim,  z:hn});
    break;
  
  case 'BL':
    vertici_sotto.push({x:0,    y:-dim, z:hn});
    vertici_sotto.push({x:dim,  y:-dim, z:hn});
    vertici_sotto.push({x:dim,  y:0,  z:hn});
    vertici_sotto.push({x:0,    y:0,  z:hn});
    break;
  
  case 'TR':
    vertici_sotto.push({x:-dim, y:0,    z:hn});
    vertici_sotto.push({x:0,    y:0,    z:hn});
    vertici_sotto.push({x:0,    y:dim,  z:hn});
    vertici_sotto.push({x:-dim, y:dim,  z:hn});
    break;
    
  case 'BR':
    vertici_sotto.push({x:-dim, y:-dim, z:hn});
    vertici_sotto.push({x:0,    y:-dim,    z:hn});
    vertici_sotto.push({x:0,    y:0,  z:hn});
    vertici_sotto.push({x:-dim, y:0,  z:hn});
    break;

  default:
    break;
}

let vertici_sotto_2D = [];
let vertici_sopra_2D = [];



// traslazione sul punto corretto
for(let i=0;i<vertici_sotto.length;i++)
{
  vertici_sotto[i].x += nodo.posizione.x;
  vertici_sotto[i].y += nodo.posizione.y;

  // rotazione
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotationAngle);

  // clone
  let tmp = this.cloneMyObj(vertici_sotto[i]);
  tmp.z   = parseFloat(h+hn);
  vertici_sopra.push(tmp);

  // proiezioni
  vertici_sotto_2D.push(this.projectIsometric(vertici_sotto[i]));
  vertici_sopra_2D.push(this.projectIsometric(tmp));
}
this.create3Dsurfaces(vertici_sotto, vertici_sopra);
let sDis = '';
sDis += this.getPoligono(vertici_sotto_2D,'fill:white;stroke:black;stroke-width:2;fill-opacity:0.71');
sDis += this.getPoligono(vertici_sopra_2D,'fill:white;stroke:black;stroke-width:2;fill-opacity:0.71');

for(let i=0;i<vertici_sotto_2D.length;i++)
{
  let j = (i<vertici_sotto_2D.length-1)?parseInt(i+1):0;
  let poligono = [];
  poligono.push(vertici_sopra_2D[i]);
  poligono.push(vertici_sotto_2D[i]);
  poligono.push(vertici_sotto_2D[j]);
  poligono.push(vertici_sopra_2D[j]);

  sDis+=this.getPoligono(poligono, 'fill:white;stroke:black;stroke-width:2;fill-opacity:0.71');
}

// etichette
 sDis += '<text x="'+ parseFloat(vertici_sopra_2D[1].x) +'" y="'+parseFloat((vertici_sopra_2D[1].y+vertici_sotto_2D[1].y)/2)+'" fill="red" font-size="32" font-weight="bold">'+nodo.etk+'</text>';  
return sDis;

}

disegnaCarter(nodo, rotationAngle)
{
let dim = this.smOBJ.dimensioni.nominali.gamba;

let hn  = parseFloat(240+11);
let hF  = 32;

switch(this.smOBJ.modello)
{
  case "VELVET":
  case "VELVET PLUS":
    hF = 28;
  break;

  case "VARIA":
  case "TWIST":
    hF = 32;
  break;

  case "JOY":
  case "SWAY":
    hF = 25;
  break;

  case "MOVIE":
  case "ECO JOY":
    hF = 15;
  break;
}

let vertici_sopra = [];
let vertici_sotto = [];

switch (nodo.posType) {

  case 'TL':
    vertici_sotto.push({x:0,    y:0,    z:hn});
    vertici_sotto.push({x:dim,  y:0,    z:hn});
    vertici_sotto.push({x:dim,  y:dim,  z:hn});
    vertici_sotto.push({x:0,    y:dim,  z:hn});
    break;
  
  case 'BL':
    vertici_sotto.push({x:0,    y:-dim, z:hn});
    vertici_sotto.push({x:dim,  y:-dim, z:hn});
    vertici_sotto.push({x:dim,  y:0,  z:hn});
    vertici_sotto.push({x:0,    y:0,  z:hn});
    break;
  
  case 'TR':
    vertici_sotto.push({x:-dim, y:0,    z:hn});
    vertici_sotto.push({x:0,    y:0,    z:hn});
    vertici_sotto.push({x:0,    y:dim,  z:hn});
    vertici_sotto.push({x:-dim, y:dim,  z:hn});
    break;
    
  case 'BR':
    vertici_sotto.push({x:-dim, y:-dim, z:hn});
    vertici_sotto.push({x:0,    y:-dim,    z:hn});
    vertici_sotto.push({x:0,    y:0,  z:hn});
    vertici_sotto.push({x:-dim, y:0,  z:hn});
    break;

  default:
    break;
}

let vertici_sotto_2D = [];
let vertici_sopra_2D = [];



// traslazione sul punto corretto
for(let i=0;i<vertici_sotto.length;i++)
{
  vertici_sotto[i].x += nodo.posizione.x;
  vertici_sotto[i].y += nodo.posizione.y;

  // rotazione
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotationAngle);

  // clone
  let tmp = this.cloneMyObj(vertici_sotto[i]);
  tmp.z   = parseFloat(hF+hn);
  vertici_sopra.push(tmp);

  // proiezioni
  vertici_sotto_2D.push(this.projectIsometric(vertici_sotto[i]));
  vertici_sopra_2D.push(this.projectIsometric(tmp));
}
this.create3Dsurfaces(vertici_sotto, vertici_sopra);
let sDis = '';
sDis += this.getPoligono(vertici_sotto_2D,'fill:white;stroke:black;stroke-width:2;fill-opacity:0.71');
sDis += this.getPoligono(vertici_sopra_2D,'fill:white;stroke:black;stroke-width:2;fill-opacity:0.71');

for(let i=0;i<vertici_sotto_2D.length;i++)
{
  let j = (i<vertici_sotto_2D.length-1)?parseInt(i+1):0;
  let poligono = [];
  poligono.push(vertici_sopra_2D[i]);
  poligono.push(vertici_sotto_2D[i]);
  poligono.push(vertici_sotto_2D[j]);
  poligono.push(vertici_sopra_2D[j]);

  sDis+=this.getPoligono(poligono, 'fill:white;stroke:black;stroke-width:2;fill-opacity:0.71');
}

return sDis;

}

disegna_pergola(offset, rotationAngle)
{
let sDis = '';
for(let i=0;i<this.lista_nodi.length;i++)
{
  if(this.lista_nodi[i].tipo=="nodo gamba")
  {
      if(this.lista_nodi[i].enabled) sDis += this.disegnaGamba(this.lista_nodi[i], rotationAngle);
  }
}

for(let i=0;i<this.lista_nodi.length;i++)
{
  if(this.lista_nodi[i].tipo=="nodo gamba")
  {
      sDis += this.disegnaCarter(this.lista_nodi[i], rotationAngle);
  }
}


/// 
let gamba = this.smOBJ.dimensioni.nominali.gamba;

let interasse_lame  = 20;
let n_lame          = Math.floor((this.smOBJ.dimensioni.nominali.sporgenza-2*gamba)/interasse_lame);
let pos_start       = parseFloat((this.smOBJ.dimensioni.nominali.sporgenza-2*gamba-n_lame*interasse_lame)/2);



if(rotationAngle==0)
{
  sDis += this.disegnaFascione('AD', rotationAngle);
  sDis += this.disegnaFascione('AB', rotationAngle);
  for(let i=n_lame-1;i>0;i--)
  {
    let pos = -pos_start-i*interasse_lame;
    sDis += this.disegna_Lama('BC', pos, rotationAngle)
  }

  
 
  sDis += this.disegnaFascione('BC', rotationAngle);
  sDis += this.disegnaFascione('CD', rotationAngle);

  sDis += this.disegnaCarter(this.getInfoNodo('A2').nodo, rotationAngle);
  
}
else
{
  sDis += this.disegnaFascione('CD', rotationAngle);
  sDis += this.disegnaFascione('BC', rotationAngle);
  for(let i=0;i<n_lame;i++)
  {
    let pos = -pos_start-i*interasse_lame;
    sDis += this.disegna_Lama('BC', pos, rotationAngle)
  }
 
  sDis += this.disegnaFascione('AB', rotationAngle);
  sDis += this.disegnaFascione('AD', rotationAngle);
  sDis += this.disegnaCarter(this.getInfoNodo('P1').nodo, rotationAngle);

}





return sDis;
}

getPointsFromPath(pathElement, numberOfPoints) {
// Validate the input element


const pathLength = pathElement.getTotalLength();
const points = [];

// Calculate the step size between points. If only one point is requested, the step is 0.
const step = numberOfPoints > 1 ? pathLength / (numberOfPoints - 1) : 0;

for (let i = 0; i < numberOfPoints; i++) {
  const distance = i * step;
  const point = pathElement.getPointAtLength(distance);
  points.push({ x: point.x, y: point.y });
}

return points;
}

disegna_Lama(lato, pos, rotationAngle)
{
let gamba = this.smOBJ.dimensioni.nominali.gamba;

let angolo_lame = 60;


let str = "m 229.72166,42.223091 -0.29207,-11.75652 -4.02974,-2.13746 L 209.7137,5.7852115 h -9.12773 v 9.9309695 h 13.21695 l 8.3832,11.60896 -5.97348,3.28748 -1.60648,3.50505 0.12762,5.12855 H 180.57799 L 152.45319,0.1322915 H 0.1322915 V 12.214691 h 2.68501 V 2.6107315 H 24.297101 l 27.31453,39.3968995 z";


let inversione= false;

let posizione = {x:0, y:0};

let dir = 'hor';
let h   = 0;

switch (lato) {      
  case 'BC':
    inversione = true;
    posizione.x = gamba;
    posizione.y = this.smOBJ.dimensioni.nominali.sporgenza-gamba+pos;
    h           = this.smOBJ.dimensioni.nominali.larghezza-2*gamba;
    dir         = 'hor';
    break;    

  case 'AD':
    inversione = false;
    posizione.x = gamba;
    posizione.y = pos; //0
    h           = this.smOBJ.dimensioni.nominali.larghezza-2*gamba;
    dir         = 'hor';
    break;      

}


let vertici_sopra = [];
let vertici_sotto = [];

let v   = this.parseSvgPathDAttribute(str);
for(let i=0;i<v.length;i++)
{
  v[i].x *= 0.1;
  v[i].y *= 0.1; 
}


let minX = 10000;
let maxX = -10000;

let minY = 10000;
let maxY = -10000;

for(let i=0;i<v.length;i++)
  {
     if(v[i].x>maxX) maxX = v[i].x;
     if(v[i].x<minX) minX = v[i].x;
     if(v[i].y>maxY) maxY = v[i].y;
     if(v[i].y<minY) minY = v[i].y;
  }


if(inversione==false)
{  
  for(let i=0;i<v.length;i++)
  {
    let delta = parseFloat(v[i].x-minX); 
    v[i].x = -delta+maxX;
  }
}

for(let i=0;i<v.length;i++)
  {
    v[i].z = 0;
    v[i].x-=maxX;
    v[i].y-=maxY;
    v[i] = this.rotateZ(v[i], parseFloat(180+angolo_lame));
  } 


// se dir=="hor", allora le facce stanno su piani paralleli al piano ZY, altrimenti stanno su piani paralleli al piano ZX
for(let i=0;i<v.length;i++)
{
  if(dir=='hor') vertici_sotto.push({x:0, y:v[i].x, z:v[i].y});
  else vertici_sotto.push({y:0, x:v[i].x, z:v[i].y});
}


////////////////////////////////////////////////////////////
let vertici_sotto_2D = [];
let vertici_sopra_2D = [];
let hcomplessiva     = 260;

// traslazione sul punto corretto
for(let i=0;i<vertici_sotto.length;i++)
{
  vertici_sotto[i].x += posizione.x;
  vertici_sotto[i].y += posizione.y; 
  vertici_sotto[i].z += hcomplessiva;

  let tmp = this.cloneMyObj(vertici_sotto[i]);
  if(dir=='hor') tmp.x += h;
  else tmp.y += h;
  vertici_sopra.push(tmp);
  
  // rotazione
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotationAngle);
  vertici_sopra[i] = this.rotateZ(vertici_sopra[i], rotationAngle);
  
 
  

  // proiezioni
  vertici_sotto_2D.push(this.projectIsometric(vertici_sotto[i]));
  vertici_sopra_2D.push(this.projectIsometric(vertici_sopra[i]));
}
this.create3Dsurfaces(vertici_sotto, vertici_sopra);
let sDis = '';
sDis += this.getPoligono(vertici_sotto_2D,'fill:white;stroke:black;stroke-width:1;fill-opacity:0.71');
sDis += this.getPoligono(vertici_sopra_2D,'fill:white;stroke:black;stroke-width:1;fill-opacity:0.71');

for(let i=0;i<vertici_sotto_2D.length;i++)
{
  let j = (i<vertici_sotto_2D.length-1)?parseInt(i+1):0;
  let poligono = [];
  poligono.push(vertici_sopra_2D[i]);
  poligono.push(vertici_sotto_2D[i]);
  poligono.push(vertici_sotto_2D[j]);
  poligono.push(vertici_sopra_2D[j]);

  sDis+=this.getPoligono(poligono, 'fill:white;stroke:black;stroke-width:2.;fill-opacity:0.71');
}

return sDis; 

}




disegnaFascione(lato, rotationAngle)
{
let hcomplessiva = parseFloat(240+11);
let hF = 32;
switch(this.smOBJ.modello)
{
  case "VELVET":
  case "VELVET PLUS":
    hF = 28;
  break;

  case "VARIA":
  case "TWIST":
    hF = 32;
  break;

  case "JOY":
  case "SWAY":
    hF = 25;
  break;

  case "MOVIE":
  case "ECO JOY":
    hF = 15;
  break;
}

let gamba = this.smOBJ.dimensioni.nominali.gamba;
let L0 = parseFloat(hF/6);
let L1 = parseFloat(hF);
let L2 = parseFloat(gamba);
let L3 = parseFloat(hF/3);
let spessore = 1;
let str = 'M '+L0+' '+L1+' h-'+L0+' v-'+L1+' h '+L2+' v '+L3+ 'h-'+spessore+' v-'+(L3-spessore) +' h-'+(L2-2*spessore)+' v'+(L1-2*spessore)+' h'+(L0-spessore) + 'v '+spessore;
let inversione= false;

let posizione = {x:0, y:0};
let h   = 0;
let dir = 'hor';

switch (lato) {
  case 'AB':
    
    posizione.x = 0;
    posizione.y = gamba;
    h           = this.smOBJ.dimensioni.nominali.sporgenza-2*gamba;
    dir         = 'ver';
    break;

  case 'CD':
    inversione = true;
    posizione.x = this.smOBJ.dimensioni.nominali.larghezza-gamba;
    posizione.y = gamba;
    h           = this.smOBJ.dimensioni.nominali.sporgenza-2*gamba;
    dir         = 'ver';
    break;
    
  case 'BC':
    inversione = true;
    posizione.x = gamba;
    posizione.y = this.smOBJ.dimensioni.nominali.sporgenza-gamba;
    h           = this.smOBJ.dimensioni.nominali.larghezza-2*gamba;
    dir         = 'hor';
    break;    

  case 'AD':
    inversione = false;
    posizione.x = gamba;
    posizione.y = 0;
    h           = this.smOBJ.dimensioni.nominali.larghezza-2*gamba;
    dir         = 'hor';
    break;      
  default:
    break;
}


let vertici_sopra = [];
let vertici_sotto = [];

let v   = this.parseSvgPathDAttribute(str);

if(inversione==true)
{
  let min = 10000;
  let max = -10000;
  for(let i=0;i<v.length;i++)
  {
     if(v[i].x>max) max = v[i].x;
     if(v[i].x<min) min = v[i].x;
  }
  for(let i=0;i<v.length;i++)
  {
    let delta = parseFloat(v[i].x-min); 
    v[i].x = -delta+max;
  }
}


// se dir=="hor", allora le facce stanno su piani paralleli al piano ZY, altrimenti stanno su piani paralleli al piano ZX
for(let i=0;i<v.length;i++)
{
  if(dir=='hor') vertici_sotto.push({x:0, y:v[i].x, z:v[i].y});
  else vertici_sotto.push({y:0, x:v[i].x, z:v[i].y});
}


////////////////////////////////////////////////////////////
let vertici_sotto_2D = [];
let vertici_sopra_2D = [];


// traslazione sul punto corretto
for(let i=0;i<vertici_sotto.length;i++)
{
  vertici_sotto[i].x += posizione.x;
  vertici_sotto[i].y += posizione.y; 
  vertici_sotto[i].z += hcomplessiva;

  let tmp = this.cloneMyObj(vertici_sotto[i]);
  if(dir=='hor') tmp.x += h;
  else tmp.y += h;
  vertici_sopra.push(tmp);
  
  // rotazione
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotationAngle);
  vertici_sopra[i] = this.rotateZ(vertici_sopra[i], rotationAngle);
  
 
  

  // proiezioni
  vertici_sotto_2D.push(this.projectIsometric(vertici_sotto[i]));
  vertici_sopra_2D.push(this.projectIsometric(vertici_sopra[i]));
}
this.create3Dsurfaces(vertici_sotto, vertici_sopra);
let sDis = '';
sDis += this.getPoligono(vertici_sotto_2D,'fill:white;stroke:black;stroke-width:2;fill-opacity:0.71');
sDis += this.getPoligono(vertici_sopra_2D,'fill:white;stroke:black;stroke-width:2;fill-opacity:0.71');

for(let i=0;i<vertici_sotto_2D.length;i++)
{
  let j = (i<vertici_sotto_2D.length-1)?parseInt(i+1):0;
  let poligono = [];
  poligono.push(vertici_sopra_2D[i]);
  poligono.push(vertici_sotto_2D[i]);
  poligono.push(vertici_sotto_2D[j]);
  poligono.push(vertici_sopra_2D[j]);

  sDis+=this.getPoligono(poligono, 'fill:white;stroke:black;stroke-width:2.;fill-opacity:0.71');
}

return sDis; 

}



disegnaProfilo(linkin, rotationAngle)
{
let link        = this.cloneMyObj(linkin);
let n0          = this.getInfoNodo(link.vertici_ordinati.start);
let n1          = this.getInfoNodo(link.vertici_ordinati.stop);
let dir         = link.dir;
let inversione  = false;
let offset_inversione = 0;

let str = '';
switch (link.tipo_profilo) {
  case "esterno":
    str = "M51 1 h107.05 v3.2 h18.3 v19.5 h-18 v60.5 h18 v19.5 h-11.35 v5.5 h-135.75 v-7 h-21.55 v-78.8 h-6.35 v-4.8 h1.5 v2.6 h26.4 v-17.85 h20.6 v-2.15z";
     if( (['EP1','P1a','P2a','P1d','P1','P2','P2b'].includes(n0.nodo.etk) ||  n0.nodo.etk.split('_')[0]=='AD')&&dir=='hor' ||
           (['EP1','P1a','P1','A1','A1c'].includes(n0.nodo.etk) ||  n0.nodo.etk.split('_')[0]=='AB')&&dir=='ver'
          )
          {
              inversione = true;
              offset_inversione = -this.cost.start_nodo_esterno;
          }   
    break;
  
  case "interno":
    str = "M0 0 h98.4 v13.5 h5 v -10.5 h 13.3 v 19.5 h-31.25 v60.5 h31.5 v19.25 h-13.3 v3 h-112.4 v-3 h-13.3 v-19.5 h31.25 v-60.5 h-31.25 v-19.5 h13.3 v10.5 h5 v-13..5z";
    break;  

  default:
    break;
}



let h   = link.lunghezza;
let vertici_sopra = [];
let vertici_sotto = [];

let v   = this.parseSvgPathDAttribute(str);
for(let i=0;i<v.length;i++)
{
  v[i].x *= 0.1;
  v[i].y *= 0.1; 
}

if(true)
{
  let min = 10000;
  let max = -10000;
  for(let i=0;i<v.length;i++)
  {
     if(v[i].x>max) max = v[i].x;
     if(v[i].x<min) min = v[i].x;
  }
  for(let i=0;i<v.length;i++)
  {
    let delta = parseFloat(v[i].x-min); 
    v[i].x = -delta+max;
  }
}


if(inversione==true)
{
  let min = 10000;
  let max = -10000;
  for(let i=0;i<v.length;i++)
  {
     if(v[i].x>max) max = v[i].x;
     if(v[i].x<min) min = v[i].x;
  }
  for(let i=0;i<v.length;i++)
  {
    let delta = parseFloat(v[i].x-min); 
    v[i].x = -delta+max;
  }
}


// se dir=="hor", allora le facce stanno su piani paralleli al piano ZY, altrimenti stanno su piani paralleli al piano ZX
for(let i=0;i<v.length;i++)
{
  if(dir=='hor') vertici_sotto.push({x:0, y:v[i].x, z:v[i].y});
  else vertici_sotto.push({y:0, x:v[i].x, z:v[i].y});
}

// traslazione della prima faccia
let posizione = {x:0, y:0};
if(dir=='hor')
{
  posizione.x = n0.nodo.posizione.x + n0.nodo.geometric[0].start_profiles[0];
  posizione.y = n0.nodo.posizione.y + n0.nodo.geometric[0].start_profiles[1]+offset_inversione;
}
else
{
  posizione.x = n0.nodo.posizione.x + n0.nodo.geometric[3].start_profiles[0]+offset_inversione;
  posizione.y = n0.nodo.posizione.y + n0.nodo.geometric[3].start_profiles[1];
}

////////////////////////////////////////////////////////////
let vertici_sotto_2D = [];
let vertici_sopra_2D = [];


// traslazione sul punto corretto
for(let i=0;i<vertici_sotto.length;i++)
{
  vertici_sotto[i].x += posizione.x;
  vertici_sotto[i].y += posizione.y; 

  let tmp = this.cloneMyObj(vertici_sotto[i]);
  if(dir=='hor') tmp.x += h;
  else tmp.y += h;
  vertici_sopra.push(tmp);
  
  // rotazione
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotationAngle);
  vertici_sopra[i] = this.rotateZ(vertici_sopra[i], rotationAngle);
  
 
  

  // proiezioni
  vertici_sotto_2D.push(this.projectIsometric(vertici_sotto[i]));
  vertici_sopra_2D.push(this.projectIsometric(vertici_sopra[i]));
}
this.create3Dsurfaces(vertici_sotto, vertici_sopra);
let sDis = '';
sDis += this.getPoligono(vertici_sotto_2D,'fill:gray;stroke:black;stroke-width:0.2;fill-opacity:0.51');
sDis += this.getPoligono(vertici_sopra_2D,'fill:gray;stroke:black;stroke-width:0.2;fill-opacity:0.51');

for(let i=0;i<vertici_sotto_2D.length;i++)
{
  let j = (i<vertici_sotto_2D.length-1)?parseInt(i+1):0;
  let poligono = [];
  poligono.push(vertici_sopra_2D[i]);
  poligono.push(vertici_sotto_2D[i]);
  poligono.push(vertici_sotto_2D[j]);
  poligono.push(vertici_sopra_2D[j]);

  sDis+=this.getPoligono(poligono, 'fill:silver;stroke:black;stroke-width:1.;fill-opacity:0.51');
}

return sDis;

}



disegnaMartinettoStilizzato(martinetto, rotationAngle)
{
let raggio  = 5;
let raggio_sotto = 9;
let spessore     = 1;

let h_ballast     = this.smOBJ.optionals.pedana.ballast.T;
let pos_z             = parseFloat(1+2*h_ballast);



let n_punti = 8;
let passo   = 2*Math.PI/n_punti;

let vertici_sopra   = [];
let vertici_medio   = [];
let vertici_sotto   = [];
let vertici_sotto_h1 = [];
let vertici_sotto_h2 = [];

// attenzione l'asse z lavoro al contrario nel grafico
let z = parseFloat(this.calcolaDislivello(martinetto.posizione));
let h = parseFloat(martinetto.h);
if(h==0) return '';

for(let i=0;i<n_punti;i++)
{
  let x = parseFloat(raggio*Math.cos(i*passo)+martinetto.posizione.x);
  let y = parseFloat(raggio*Math.sin(i*passo)+martinetto.posizione.y);

  let xs = parseFloat(raggio_sotto*Math.cos(i*passo)+martinetto.posizione.x);
  let ys = parseFloat(raggio_sotto*Math.sin(i*passo)+martinetto.posizione.y);

  
  let punto_sopra = {x:x, y:y, z:parseFloat(h+z)};
  let punto_medio = {x:x, y:y, z:0};
  let punto_sotto   = {x:x, y:y, z:z+spessore};

  let punto_sotto_h1 = {x:xs, y:ys, z:z};
  let punto_sotto_h2 = {x:xs, y:ys, z:z+spessore}; 

  if(martinetto.tipo=="martinetto su zavorra")
  {
    punto_sopra = {x:x, y:y, z:parseFloat(h+pos_z)};
    punto_medio = {x:x, y:y, z:pos_z+spessore};
    punto_sotto = {x:x, y:y, z:pos_z+spessore};
    punto_sotto_h1 = {x:xs, y:ys, z:pos_z};
    punto_sotto_h2 = {x:xs, y:ys, z:pos_z+spessore}; 
  }

  //console.log(punto_sopra);

  punto_sopra = this.rotateZ(punto_sopra, rotationAngle);
  punto_medio = this.rotateZ(punto_medio, rotationAngle);
  punto_sotto = this.rotateZ(punto_sotto, rotationAngle);

  punto_sotto_h1 = this.rotateZ(punto_sotto_h1, rotationAngle);
  punto_sotto_h2 = this.rotateZ(punto_sotto_h2, rotationAngle);

  //console.log(punto_sopra);
  let sopra = this.projectIsometric(punto_sopra);
  let medio = this.projectIsometric(punto_medio);
  let sotto = this.projectIsometric(punto_sotto);

  let sotto_h1 = this.projectIsometric(punto_sotto_h1);
  let sotto_h2 = this.projectIsometric(punto_sotto_h2);

  //console.log(sopra);


  vertici_sopra.push(this.cloneMyObj(sopra));
  vertici_medio.push(this.cloneMyObj(medio));
  vertici_sotto.push(this.cloneMyObj(sotto));
  vertici_sotto_h1.push(this.cloneMyObj(sotto_h1));
  vertici_sotto_h2.push(this.cloneMyObj(sotto_h2));
}

//console.log(vertici_sopra);
let sDis = '';


sDis += this.getPoligono(vertici_sopra,'fill:gray;stroke:black;stroke-width:0.2;fill-opacity:0.2');
sDis += this.getPoligono(vertici_medio,'fill:red;stroke:red;stroke-width:0.2;fill-opacity:0.2');
sDis += this.getPoligono(vertici_sotto,'fill:gray;stroke:black;stroke-width:0.2;fill-opacity:0.2');

let colore = "gray";
if(martinetto.tipo=="martinetto su zavorra") colore = "black";
sDis += this.getPoligono(vertici_sotto_h1,'fill:'+colore+';stroke:black;stroke-width:0.2;fill-opacity:0.2');
sDis += this.getPoligono(vertici_sotto_h2,'fill:'+colore+';stroke:black;stroke-width:0.2;fill-opacity:0.2');

for(let i=0;i<vertici_sopra.length;i++)
{
  let j = (i<vertici_sopra.length-1)?parseInt(i+1):0;
  let poligono = [];

  poligono = [];
  poligono.push(vertici_sotto_h1[i]);
  poligono.push(vertici_sotto_h2[i]);
  poligono.push(vertici_sotto_h2[j]);
  poligono.push(vertici_sotto_h1[j]);
  
  colore = 'gray';
  if(martinetto.tipo=="martinetto su zavorra") colore = "black";
  sDis+=this.getPoligono(poligono, 'fill:'+colore+';stroke:gray;stroke-width:0.2;fill-opacity:0.5');

  poligono = [];
  poligono.push(vertici_sopra[i]);
  poligono.push(vertici_medio[i]);
  poligono.push(vertici_medio[j]);
  poligono.push(vertici_sopra[j]);
  
  sDis+=this.getPoligono(poligono, 'fill:black;stroke:black;stroke-width:0.2;fill-opacity:1');

  poligono = [];
  poligono.push(vertici_medio[i]);
  poligono.push(vertici_sotto[i]);
  poligono.push(vertici_sotto[j]);
  poligono.push(vertici_medio[j]);
  
  sDis+=this.getPoligono(poligono, 'fill:gray;stroke:gray;stroke-width:0.2;fill-opacity:0.5');

  
}

return sDis;
}


disegnaZavorraStilizzata(zavorra, rotationAngle)
{

let vertici_sopra = [];
let vertici_medio = [];
let vertici_sotto = [];

let h_ballast     = this.smOBJ.optionals.pedana.ballast.T;


vertici_sotto.push({x:zavorra.posizione.x, y:zavorra.posizione.y, z:parseFloat(1)});
vertici_sotto.push({x:zavorra.posizione.x, y:zavorra.posizione.y+zavorra.dimensione.H, z:parseFloat(1)});
vertici_sotto.push({x:zavorra.posizione.x+zavorra.dimensione.W, y:zavorra.posizione.y+zavorra.dimensione.H, z:parseFloat(1)});
vertici_sotto.push({x:zavorra.posizione.x+zavorra.dimensione.W, y:zavorra.posizione.y, z:parseFloat(1)});

vertici_medio.push({x:zavorra.posizione.x, y:zavorra.posizione.y, z:parseFloat(1+h_ballast)});
vertici_medio.push({x:zavorra.posizione.x, y:zavorra.posizione.y+zavorra.dimensione.H, z:parseFloat(1+h_ballast)});
vertici_medio.push({x:zavorra.posizione.x+zavorra.dimensione.W, y:zavorra.posizione.y+zavorra.dimensione.H, z:parseFloat(1+h_ballast)});
vertici_medio.push({x:zavorra.posizione.x+zavorra.dimensione.W, y:zavorra.posizione.y, z:parseFloat(1+h_ballast)});

vertici_sopra.push({x:zavorra.posizione.x, y:zavorra.posizione.y, z:parseFloat(1+2*h_ballast)});
vertici_sopra.push({x:zavorra.posizione.x, y:zavorra.posizione.y+zavorra.dimensione.H, z:parseFloat(1+2*h_ballast)});
vertici_sopra.push({x:zavorra.posizione.x+zavorra.dimensione.W, y:zavorra.posizione.y+zavorra.dimensione.H, z:parseFloat(1+2*h_ballast)});
vertici_sopra.push({x:zavorra.posizione.x+zavorra.dimensione.W, y:zavorra.posizione.y, z:parseFloat(1+2*h_ballast)});

let vertici_sopra_2D = [];
let vertici_medio_2D = [];
let vertici_sotto_2D = [];


  // traslazione sul punto corretto
for(let i=0;i<vertici_sotto.length;i++)
{
  // rotazione
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotationAngle);
  vertici_medio[i] = this.rotateZ(vertici_medio[i], rotationAngle);
  vertici_sopra[i] = this.rotateZ(vertici_sopra[i], rotationAngle);
  
 
  vertici_sotto_2D.push(this.projectIsometric(vertici_sotto[i]));
  vertici_medio_2D.push(this.projectIsometric(vertici_medio[i]));
  vertici_sopra_2D.push(this.projectIsometric(vertici_sopra[i]));
} 




//console.log(vertici_sopra);
let sDis = '';


sDis += this.getPoligono(vertici_sopra_2D,'fill:gray;stroke:black;stroke-width:0.2;fill-opacity:0.51');
sDis += this.getPoligono(vertici_medio_2D,'fill:gray;stroke:black;stroke-width:0.2;fill-opacity:0.51');
sDis += this.getPoligono(vertici_sotto_2D,'fill:gray;stroke:black;stroke-width:0.2;fill-opacity:0.51');

for(let i=0;i<vertici_sopra.length;i++)
{
  let j = (i<vertici_sopra.length-1)?parseInt(i+1):0;
  let poligono = [];
  poligono.push(vertici_sopra_2D[i]);
  poligono.push(vertici_medio_2D[i]);
  poligono.push(vertici_medio_2D[j]);
  poligono.push(vertici_sopra_2D[j]);
  
  sDis+=this.getPoligono(poligono, 'fill:gray;stroke:black;stroke-width:0.2;fill-opacity:0.51');

  poligono = [];
  poligono.push(vertici_medio_2D[i]);
  poligono.push(vertici_sotto_2D[i]);
  poligono.push(vertici_sotto_2D[j]);
  poligono.push(vertici_medio_2D[j]);
  
  sDis+=this.getPoligono(poligono, 'fill:gray;stroke:black;stroke-width:0.2;fill-opacity:0.5');
}

return sDis;
}

disegnaPiastrellaStilizzata(piastrella, rotationAngle)
{

let vertici_sopra = [];
let vertici_sotto = [];

let h_piastrella     = piastrella.spessore;


vertici_sotto.push({x:piastrella.angoli.BL.x, y:piastrella.angoli.BL.y, z:parseFloat(11)});
vertici_sotto.push({x:piastrella.angoli.BR.x, y:piastrella.angoli.BR.y, z:parseFloat(11)});
vertici_sotto.push({x:piastrella.angoli.TR.x, y:piastrella.angoli.TR.y, z:parseFloat(11)});
vertici_sotto.push({x:piastrella.angoli.TL.x, y:piastrella.angoli.TL.y, z:parseFloat(11)});

vertici_sopra.push({x:piastrella.angoli.BL.x, y:piastrella.angoli.BL.y, z:parseFloat(11+h_piastrella)});
vertici_sopra.push({x:piastrella.angoli.BR.x, y:piastrella.angoli.BR.y, z:parseFloat(11+h_piastrella)});
vertici_sopra.push({x:piastrella.angoli.TR.x, y:piastrella.angoli.TR.y, z:parseFloat(11+h_piastrella)});
vertici_sopra.push({x:piastrella.angoli.TL.x, y:piastrella.angoli.TL.y, z:parseFloat(11+h_piastrella)});

  
let vertici_sopra_2D = [];
let vertici_sotto_2D = [];


for(let i=0;i<vertici_sotto.length;i++)
{
  // rotazione
  vertici_sotto[i] = this.rotateZ(vertici_sotto[i], rotationAngle);
  vertici_sopra[i] = this.rotateZ(vertici_sopra[i], rotationAngle);  
 
  vertici_sotto_2D.push(this.projectIsometric(vertici_sotto[i]));
  vertici_sopra_2D.push(this.projectIsometric(vertici_sopra[i]));
} 




//console.log(vertici_sopra);
let sDis = '';


sDis += this.getPoligono(vertici_sopra_2D,'fill:LightSlateGray;stroke:black;stroke-width:1;fill-opacity:0.31');
sDis += this.getPoligono(vertici_sotto_2D,'fill:gray;stroke:black;stroke-width:0.02;fill-opacity:0.15');

for(let i=0;i<vertici_sopra.length;i++)
{
  let j = (i<vertici_sopra.length-1)?parseInt(i+1):0;
  let poligono = [];
  poligono.push(vertici_sopra_2D[i]);
  poligono.push(vertici_sotto_2D[i]);
  poligono.push(vertici_sotto_2D[j]);
  poligono.push(vertici_sopra_2D[j]);
  
  sDis+=this.getPoligono(poligono, 'fill:gray;stroke:black;stroke-width:0.2;fill-opacity:0.15');    
}

return sDis;
}


getPoligono(vettore, stile='fill:black;stroke:black;stroke-width:0.2;fill-opacity:0.9')
{
let sDis = '<polygon points="';

for(let i=0;i<vettore.length;i++)
{
  sDis += vettore[i].x+','+vettore[i].y+' '
}  
sDis += '" style="'+stile+'" />';

return sDis;

}

calcolaCentraturaPiani(offset, rotationAngle)
{
let vertici = [];
vertici.push(this.grafica.piano.vertici.vP1);
vertici.push(this.grafica.piano.vertici.vA1);
vertici.push(this.grafica.piano.vertici.vA2);
vertici.push(this.grafica.piano.vertici.vP2);

vertici.push({x: 0, y: 0, z: 0, etk: 'origine'});
vertici.push(this.grafica.piano.vertici.vP1);
vertici.push(this.grafica.piano.vertici.vA1);
vertici.push(this.grafica.piano.vertici.vA2);
vertici.push(this.grafica.piano.vertici.vP2);

// traslazione
for(let i=0;i<vertici.length;i++)
{
  vertici[i] = {x:vertici[i].x+offset.x, 
                y:vertici[i].y+offset.y,
                z:(i>4)?300:0}; //this.calcolaDislivello(vertici[i])
}

// rotazione
for(let i=0;i<vertici.length;i++)
{
  vertici[i] = this.rotateZ(vertici[i], rotationAngle);    
} 

// proiezione
let v = [];
let minXY = {x:10000, y:10000};
let maxXY = {x:-10000, y:-10000};

//console.log('');
for(let i=0;i<vertici.length;i++)
{
  let tmp = this.cloneMyObj(this.projectIsometric(vertici[i]));
  if(tmp.x>maxXY.x) maxXY.x = tmp.x;
  if(tmp.y>maxXY.y) maxXY.y = tmp.y;
  if(tmp.x<minXY.x) minXY.x = tmp.x;
  if(tmp.y<minXY.y) minXY.y = tmp.y;
  v.push(tmp);    
}

let centroid = {x: parseFloat((maxXY.x+minXY.x)/2),
                y: parseFloat((maxXY.y+minXY.y)/2),
                rx: parseFloat((maxXY.x-minXY.x)),
                ry: parseFloat((maxXY.y-minXY.y)),
                minX: parseFloat(minXY.x),
                maxX: parseFloat(maxXY.x),
                minY: parseFloat(minXY.y),
                maxY: parseFloat(maxXY.y),
                origine:{x:parseFloat(v[4].x-minXY.x), y:parseFloat(v[4].y-minXY.y)},
                vertici:this.cloneMyObj(vertici),
                v: this.cloneMyObj(v)
};


let Lbox = 200;
let Hbox   = Lbox*350.8/248; // proporzione per foglio A4
const Hmax = parseFloat(0.30*Hbox); // limiti grafici pergola
const Lmax = parseFloat(0.65*Lbox); // limiti grafici pergola
let scala     = 1;
let min_scala = 9;

scala = (parseFloat(Hmax/centroid.ry)<min_scala)?parseFloat(Hmax/centroid.ry):min_scala; // provo a sistemare prima la parte verticale
if(parseFloat(centroid.rx*scala)>Lmax) scala *= parseFloat(Lmax/parseFloat(centroid.rx*scala));

let startPoint = {x:parseFloat((Lbox-centroid.rx*scala)/2), 
                  y:parseFloat((Hbox-centroid.ry*scala)/2)};

      

centroid.scala      = scala;
centroid.startPoint = this.cloneMyObj(startPoint);


//console.log(this.cloneMyObj(centroid));
return centroid;
}


disegnaPiani(offset, rotationAngle)
{


let centroid = this.calculateCentroidOfFourPoints(this.grafica.piano.vertici.vP1, this.grafica.piano.vertici.vA1, this.grafica.piano.vertici.vA2, this.grafica.piano.vertici.vP2);

centroid.z = this.calcolaDislivello(centroid);

let vertici = [];
vertici.push(this.grafica.piano.vertici.vP1);
vertici.push(this.grafica.piano.vertici.vA1);
vertici.push(this.grafica.piano.vertici.vA2);
vertici.push(this.grafica.piano.vertici.vP2);
vertici.push(centroid);



// traslazione
for(let i=0;i<vertici.length;i++)
{
  vertici[i] = {x:vertici[i].x+offset.x, 
                y:vertici[i].y+offset.y,
                z:this.calcolaDislivello(vertici[i])};
}

// rotazione
for(let i=0;i<vertici.length;i++)
{
  vertici[i] = this.rotateZ(vertici[i], rotationAngle);

  //console.log(vertici[i]);
} 

// proiezione
let v = [];
for(let i=0;i<vertici.length;i++)
{
  v.push(this.projectIsometric(vertici[i]));
}


let sDis = '';

////////////////////////////////////////
let piano = [v[0], v[1], v[4]];

sDis += this.getPoligono(piano, 'fill:DarkOliveGreen;stroke:black;stroke-width:0.2;fill-opacity:0.9');
////////////////////////////////////////
piano = [v[1], v[2], v[4]];
sDis += this.getPoligono(piano, 'fill:DarkOliveGreen;stroke:black;stroke-width:0.2;fill-opacity:0.9');
////////////////////////////////////////
piano = [v[2], v[3], v[4]];
sDis += this.getPoligono(piano, 'fill:DarkOliveGreen;stroke:black;stroke-width:0.2;fill-opacity:0.9');
////////////////////////////////////////
piano = [v[3], v[0], v[4]];
sDis += this.getPoligono(piano, 'fill:DarkOliveGreen;stroke:black;stroke-width:0.2;fill-opacity:0.9');
////////////////////////////////////////

piano = [v[0], v[1], v[2], v[3]];
sDis += this.getPoligono(piano,'fill:none;stroke:gray;stroke-width:1;fill-opacity:0.9');
////////////////////////////////////////



return sDis;
}


disegnaContornoPedana(offset, rotationAngle)
{
let vertici = [];
vertici.push(this.grafica.piano.vertici.vP1);
vertici.push(this.grafica.piano.vertici.vA1);
vertici.push(this.grafica.piano.vertici.vA2);
vertici.push(this.grafica.piano.vertici.vP2);

// traslazione
for(let i=0;i<vertici.length;i++)
{
  vertici[i] = {x:vertici[i].x+offset.x, 
                y:vertici[i].y+offset.y,
                z:0};
}

// rotazione
for(let i=0;i<vertici.length;i++)
{
  vertici[i] = this.rotateZ(vertici[i], rotationAngle);

  //console.log(vertici[i]);
} 

// proiezione
let v = [];
for(let i=0;i<vertici.length;i++)
{
  v.push(this.projectIsometric(vertici[i]));
} 


let sDis = '';
sDis += this.getPoligono(v,'fill:silver;stroke:gray;stroke-width:1;fill-opacity:0.55');

return sDis;
}

disegna_complessivo_martinetti_3D(offset, rotationAngle)
{
let sDis = '';
for(let i=0;i<this.lista_martinetti.length;i++)
{
  sDis += this.disegnaMartinettoStilizzato(this.lista_martinetti[i], rotationAngle);
}
return sDis;
}


disegna_complessivo_zavorre_3D(offset, rotationAngle)
{
let sDis = '';
for(let i=0;i<this.zavorramento.zavorre.length;i++)
{
  sDis += this.disegnaZavorraStilizzata(this.zavorramento.zavorre[i], rotationAngle);
}
return sDis;
}


disegna_complessivo_martinetti_3D_su_zavorre(offset, rotationAngle)
{
let sDis = '';
for(let i=0;i<this.lista_martinetti.length;i++)
{
  if(this.lista_martinetti[i].tipo=="martinetto su zavorra") sDis += this.disegnaMartinettoStilizzato(this.lista_martinetti[i], rotationAngle);
}
return sDis;
}



disegna_complessivo_piastrelle_3D(offset, rotationAngle)
{
let sDis = '';
for(let i=0;i<this.lista_piastrelle.length;i++)
{
  sDis += this.disegnaPiastrellaStilizzata(this.lista_piastrelle[i], rotationAngle);
}
return sDis;
}


disegna_complessivo_nodi_3D(offset, rotationAngle)
{
let sDis = '';
for(let i=0;i<this.lista_nodi.length;i++)
{
  switch (this.lista_nodi[i].tipo) {
    case "nodo gamba":
      if(this.lista_nodi[i].enabled) sDis += this.disegnaNodoGamba(this.lista_nodi[i], rotationAngle);
      break;
    case "nodo esterno":
      if(this.lista_nodi[i].enabled) sDis += this.disegnaNodoEsterno(this.lista_nodi[i], rotationAngle);
      break;
  
    default:
      break;
  }     
}
return sDis;
}

disegna_complessivo_profili_3D(offset, rotationAngle)
{

let sDis = '';
for(let i=0;i<this.lista_linkTraNodi.length;i++)
{
 // if(this.lista_linkTraNodi[i].tipo_profilo=='interno')
  sDis += this.disegnaProfilo(this.lista_linkTraNodi[i], rotationAngle);     
}
return sDis;
}

disegna3D(svgName='')
{
 const limit_scala = 0.351;
 let offset    = {x:0, y:0};
 let sDis = '';

 
 
 let newscala  = 1;
 let rotazione = 0;        
 

 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////

 let centroide = this.calcolaCentraturaPiani(offset, rotazione);

 sDis += '<g transform="translate('+parseFloat(centroide.startPoint.x)+' '+40+')">'; 
 sDis += '<g id="inner_'+svgName+'" transform="scale('+centroide.scala+')" >'; 

 //sDis += '<rect width="'+parseFloat(centroide.rx)+'" height="'+parseFloat(centroide.ry)+
 //        '" x="0" y="0" rx="2" ry="2" style="fill:none;stroke:red;stroke-width:2;opacity:0.95" />';

 sDis += '<g transform="translate('+centroide.origine.x+' '+centroide.origine.y+')">';        
 //for(let i=0;i<centroide.v.length;i++) 
 //sDis += '<circle r="2" cx="'+parseFloat(centroide.v[i].x)+'" cy="'+parseFloat(centroide.v[i].y)+'" fill="blue" />';       

 //////////////////////////////////////////////////////////////////////////////////////////////
 
 sDis += this.disegna_complessivo_martinetti_3D(offset, rotazione);
 sDis += this.disegna_complessivo_zavorre_3D(offset, rotazione);
 sDis += this.disegna_complessivo_martinetti_3D_su_zavorre(offset, rotazione);

       sDis += this.disegna_vetrate_3D(offset, rotazione);


 sDis += this.disegna_complessivo_nodi_3D(offset, rotazione);
 sDis += this.disegna_complessivo_profili_3D(offset, rotazione); 
 sDis += this.disegna_complessivo_piastrelle_3D(offset, rotazione);


 
 
 sDis += this.disegna_vetrate_3D_lato('AD', offset, rotazione);
 sDis += this.disegna_vetrate_3D_lato('AB', offset, rotazione);
 sDis += this.disegna_vetrate_3D_lato('BC', offset, rotazione);

 sDis += this.disegna_pergola(offset, rotazione); 
 
 
 sDis += this.disegna_vetrate_3D_lato('CD', offset, rotazione);
 
 sDis += this.drawAxesSVG(offset, rotazione);


 //////////////////////////////////////////////////////////////////////////////////////////////
 sDis += '</g>';  
 sDis += '</g>';
 sDis += '</g>';
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////





 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////

 rotazione = 180;
 offset    = {x:0, y:0};
 centroide = this.calcolaCentraturaPiani(offset, rotazione);

 sDis += '<g transform="translate('+parseFloat(centroide.startPoint.x)+' '+140+')">'; 
 sDis += '<g id="inner_'+svgName+'" transform="scale('+centroide.scala+')" >'; 

 //sDis += '<rect width="'+parseFloat(centroide.rx)+'" height="'+parseFloat(centroide.ry)+
 //        '" x="0" y="0" rx="2" ry="2" style="fill:none;stroke:red;stroke-width:2;opacity:0.95" />';

 sDis += '<g transform="translate('+centroide.origine.x+' '+centroide.origine.y+')">';        
 //for(let i=0;i<centroide.v.length;i++) 
 //sDis += '<circle r="2" cx="'+parseFloat(centroide.v[i].x)+'" cy="'+parseFloat(centroide.v[i].y)+'" fill="blue" />';       

 //////////////////////////////////////////////////////////////////////////////////////////////
 
 sDis += this.disegna_complessivo_martinetti_3D(offset, rotazione);
 sDis += this.disegna_complessivo_zavorre_3D(offset, rotazione);
 sDis += this.disegna_complessivo_martinetti_3D_su_zavorre(offset, rotazione);
 sDis += this.disegna_vetrate_3D(offset, rotazione);
 sDis += this.disegna_complessivo_nodi_3D(offset, rotazione);
 sDis += this.disegna_complessivo_profili_3D(offset, rotazione);
 sDis += this.disegna_complessivo_piastrelle_3D(offset, rotazione);
 //sDis += this.disegna_vetrate_3D(offset, rotazione);
 
 sDis += this.disegna_vetrate_3D_lato('BC', offset, rotazione);
 sDis += this.disegna_vetrate_3D_lato('CD', offset, rotazione);
 sDis += this.disegna_vetrate_3D_lato('AB', offset, rotazione);
 sDis += this.disegna_pergola(offset, rotazione);
 sDis += this.disegna_vetrate_3D_lato('AD', offset, rotazione);
 
 

 sDis += this.drawAxesSVG(offset, rotazione);


 //////////////////////////////////////////////////////////////////////////////////////////////
 sDis += '</g>';  
 sDis += '</g>';
 sDis += '</g>';
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////









 return sDis;
}

disegna3D_martinetti(svgName='')
{
 let offset    = {x:0, y:0};
 let sDis = '';
 sDis += '<g id="outer_'+svgName+
          '" transform="translate('+this.grafica.startPoint.x+' '+
                                    this.grafica.startPoint.y+')">';
 
 
 let newscala  = 1;
 let rotazione = 0;        
 let centroide = this.calcolaCentraturaPiani(offset, rotazione);

 sDis += '<g transform="translate('+parseFloat(0)+' '+0+')">';
 sDis += '<g id="inner_'+svgName+'" transform="scale('+this.grafica.scala+')" >'; 
 newscala = parseFloat(this.grafica.dimMAX.w/centroide.rx);
 sDis += '<g transform="scale('+newscala+')" >';

 sDis += '<g transform="translate('+parseFloat(-centroide.minX)+' '+0+')">';
 sDis += this.disegnaPiani(offset, rotazione);
 sDis += this.disegnaContornoPedana(offset, rotazione);
 sDis += this.disegna_complessivo_martinetti_3D(offset, rotazione);
 sDis += this.disegna_complessivo_zavorre_3D(offset, rotazione);
 sDis += this.disegna_complessivo_martinetti_3D_su_zavorre(offset, rotazione);
 sDis += this.drawAxesSVG(offset, rotazione);
 sDis += '</g>';
 sDis += '</g>';
 sDis += '</g>';
 sDis += '</g>';

 rotazione = 180;
 centroide = this.calcolaCentraturaPiani(offset, rotazione);
 
 sDis += '<g transform="translate('+parseFloat(0)+' '+130+')">';
 sDis += '<g id="inner_'+svgName+'" transform="scale('+this.grafica.scala+')" >'; 
 newscala = parseFloat(this.grafica.dimMAX.w/centroide.rx);
 sDis += '<g transform="scale('+newscala+')" >';
 sDis += '<g transform="translate('+parseFloat(-centroide.minX)+' '+0+')">';
 sDis += this.disegnaPiani(offset, rotazione);
 sDis += this.disegnaContornoPedana(offset, rotazione);
 sDis += this.disegna_complessivo_martinetti_3D(offset, rotazione);
 sDis += this.disegna_complessivo_zavorre_3D(offset, rotazione);
 sDis += this.disegna_complessivo_martinetti_3D_su_zavorre(offset, rotazione);
 sDis += this.drawAxesSVG(offset, rotazione);
 sDis += '</g>';
 sDis += '</g>';
 sDis += '</g>';
 sDis += '</g>';


 sDis += '</g>';

 return sDis;
}


cleanGraphNames()
{
  
  let n = document.getElementById("svg-ELESYS_CONFIGURAZIONE");
  let a = 0;
  let i;
  while(n) {
      n.id = "newsvg-"+a++;
      n = document.getElementById("svg-ELESYS_CONFIGURAZIONE");
  }

}  


render_LOGO_pos(pos, dim_target)
{
let dimensioni = {w:100, h:39.523};
let scale = 1;
if(dim_target.w!=='')
{
  scale = dim_target.w/dimensioni.w;
}
else
{
   if(dim_target.h!=='')
   {
     scale = dim_target.h/dimensioni.h;
   }
}


let sDis = '';
sDis += '<g>';
sDis += '<g transform="translate('+pos.x+' '+pos.y+')" ><g transform="scale('+scale+')" ><g transform="translate(-64.391 -112.6)"><g transform="matrix(.35278 0 0 -.35278 63.891 152.36)"><g transform="translate(41.143)"><g transform="translate(7.092,16.717)"><path d="m0 0v-1.965h4.49v-13.898h2.033v13.898h4.514v1.965z" fill="#3c3c3c"/></g><g transform="translate(30.894,16.717)"><path d="m0 0v-6.769h-8.759v6.769h-2.032v-15.863h2.032v7.128h8.759v-7.128h2.033v15.863z" fill="#3c3c3c"/></g><g transform="translate(36.588,16.717)"><path d="m0 0v-15.863h9.16v1.967h-7.127v5.161h5.787v1.966h-5.787v4.804h7.127v1.965z" fill="#3c3c3c"/></g><g transform="translate(59.413,9.5684)"><path d="m0 0-1.453 0.626c-1.674 0.736-2.345 1.519-2.345 2.681 0 1.318 1.185 2.076 2.526 2.076 1.384 0 2.254-0.535 3.082-1.518l1.43 1.43c-1.072 1.297-2.592 2.032-4.445 2.032-2.346 0-4.626-1.563-4.626-3.975 0-1.99 1.05-3.463 3.463-4.494l1.453-0.625c1.697-0.735 2.592-1.498 2.592-2.946 0-1.386-1.163-2.234-2.993-2.234-1.543 0-2.839 0.868-3.598 1.852l-1.543-1.341c0.939-1.339 2.861-2.456 5.161-2.456 3.106 0 5.027 1.811 5.027 4.401 0 2.235-1.585 3.553-3.731 4.491" fill="#3c3c3c"/></g><g transform="translate(76.05,6.7988)"><path d="m0 0c0-2.749-1.742-4.178-4.29-4.178-2.546 0-4.288 1.429-4.288 4.178v9.918h-2.034v-9.83c0-3.887 2.637-6.21 6.322-6.21 3.711 0 6.324 2.323 6.324 6.21v9.83h-2.034z" fill="#3c3c3c"/></g><g transform="translate(92.922,5.4336)"><path d="m0 0-11.305 11.462v-16.041h2.034v11.282l11.303-11.46v16.04h-2.032z" fill="#3c3c3c"/></g><g transform="translate(106.45,14.752)"><path d="m0 0h6.86v1.965h-8.892v-15.862h2.032v7.126h5.362v1.966h-5.362z" fill="#3c3c3c"/></g><g transform="translate(117.04,6.8867)"><path d="m0 0 2.681 5.676 2.681-5.676zm-5.05-6.032h2.191l1.964 4.157h7.15l1.967-4.157h2.188l-7.729 16.041z" fill="#3c3c3c"/></g><g transform="translate(135.54,14.951)"><path d="m0 0c1.588 0 2.929-0.603 3.955-1.474l1.185 1.543c-1.364 1.227-3.152 1.875-5.14 1.875-4.535 0-8.11-3.506-8.11-8.109 0-4.604 3.575-8.109 8.11-8.109 1.988 0 3.776 0.648 5.14 1.875l-1.185 1.543c-1.026-0.873-2.367-1.474-3.955-1.474-3.463 0-6.031 2.68-6.031 6.165s2.568 6.165 6.031 6.165" fill="#3c3c3c"/></g><g transform="translate(142.07,14.752)"><path d="m0 0h4.486v-13.897h2.037v13.897h4.512v1.965h-11.035z" fill="#3c3c3c"/></g><g transform="translate(161.55,2.6211)"><path d="m0 0c-3.464 0-6.03 2.68-6.03 6.165s2.566 6.165 6.03 6.165c3.463 0 6.03-2.68 6.03-6.165s-2.567-6.165-6.03-6.165m0 14.274c-4.536 0-8.109-3.506-8.109-8.109s3.573-8.109 8.109-8.109c4.535 0 8.109 3.506 8.109 8.109s-3.574 8.109-8.109 8.109" fill="#3c3c3c"/></g><g transform="translate(174.34,9.5908)"><path d="m0 0v5.251h2.544c2.082 0 3.13-0.984 3.13-2.638 0-1.631-1.048-2.613-3.13-2.613zm7.774 2.658c0 2.702-1.989 4.468-5.092 4.468h-4.716v-15.862h2.034v6.927h1.741l5.293-6.927h2.46l-5.473 7.061c2.325 0.446 3.753 2.077 3.753 4.333" fill="#3c3c3c"/></g><g transform="translate(190.09,9.5684)"><path d="m0 0-4.467 7.148h-2.37l5.809-9.134v-6.728h2.055v6.728l5.809 9.134h-2.367z" fill="#3c3c3c"/></g></g><g transform="translate(279.22,90.473)"><path d="m0 0c-2.509 0-4.564 2.055-4.564 4.562 0 2.522 2.055 4.579 4.564 4.579 2.521 0 4.576-2.057 4.576-4.579 0-2.507-2.055-4.562-4.576-4.562m0.014 10.229c-3.115 0-5.652-2.553-5.652-5.667 0-3.098 2.537-5.652 5.652-5.652 3.113 0 5.652 2.554 5.652 5.652 0 3.114-2.539 5.667-5.652 5.667" fill="#eb0000"/></g><g transform="translate(279.28,95.595)"><path d="m0 0h-0.933v1.433h0.933c0.562 0 0.855-0.25 0.855-0.718 0-0.451-0.293-0.715-0.855-0.715m1.992 0.779c0 1.012-0.777 1.68-1.805 1.68h-2.194v-5.978h1.058v2.538h0.452l1.852-2.538h1.246l-1.931 2.616c0.763 0.203 1.308 0.81 1.322 1.682" fill="#eb0000"/></g><g transform="translate(80.705,111.8)"><path d="m0 0c-1.152-1.635-1.8-3.667-1.8-5.907 0-5.718 4.442-10.293 9.994-10.293s9.993 4.575 9.993 10.293c0 2.24-0.647 4.272-1.799 5.907z" fill="#eb0000"/></g><g transform="translate(37.963,62.055)"><path d="m0 0h18.997v-8.998c-3.888-2.777-8.777-3.887-15.219-3.887-12.775 0-22.439 10.552-22.439 23.215 0 12.662 9.664 23.214 22.439 23.214 8.442 0 13.663-2.775 18.44-8.771l13.441 10.994c-7.666 9.445-18.331 14.887-31.881 14.887-22.217 0-40.323-18.109-40.323-40.324 0-22.216 18.106-40.323 40.323-40.323 13.33 0 24.659 4.001 32.437 12.888v31.764h-29.259z" fill="#eb0000"/></g><path d="m80.461 32.963h16.767v55.518h-16.767z" fill="#eb0000"/><g transform="translate(129.71,47.891)"><path d="m0 0c-4.107 0-7.216 1.804-9.438 4.801v16.69c2.222 2.998 5.331 4.664 9.438 4.664 7.995 0 12.769-5.995 12.769-13.324s-4.774-12.831-12.769-12.831m2.776 41.478c-4.552 0-8.993-1.555-12.214-4.22v26.65h-16.765v-78.836h16.765v4.372c2.915-3.264 7.866-5.259 12.418-5.259 16.433 0 26.665 13.435 26.665 28.646 0 15.212-10.436 28.647-26.869 28.647" fill="#eb0000"/></g><g transform="translate(201.39,53.213)"><path d="m0 0c-2.22-3.555-6.328-5.815-10.436-5.815-6.663 0-9.773 5.552-9.773 13.103v27.98h-16.766v-30.979c0-15.101 8.773-25.427 23.762-25.427 4.663 0 9.771 2.04 13.213 5.26v-4.372h16.767v55.518h-16.767z" fill="#eb0000"/></g><g transform="translate(250.15,67.889)"><path d="m0 0c-1.48 0.252-2.853 0.483-4.041 0.737-0.038 6e-3 -0.983 0.192-1.98 0.563-0.158 0.058-0.315 0.125-0.593 0.255-0.117 0.055-0.235 0.113-0.348 0.174l-0.168 0.101c-0.098 0.057-0.194 0.117-0.286 0.181l-0.176 0.13c-0.086 0.064-0.169 0.131-0.248 0.203l-0.166 0.157c-0.074 0.073-0.142 0.152-0.21 0.233-0.05 0.059-0.096 0.117-0.14 0.178-0.064 0.09-0.119 0.184-0.196 0.321l-0.081 0.154c-0.049 0.111-0.086 0.228-0.121 0.351l-0.057 0.181c-0.044 0.206-0.066 0.402-0.066 0.602l0.029 0.166c0.085 1.58 2.106 2.84 5.524 3.202l0.408 0.033c0.32 0.028 0.648 0.047 0.992 0.06 0.289 0.011 0.58 0.018 0.928 0.018h3e-3c3.223-8e-3 10.118-0.834 16.581-5.611l5.599 11.835c-6.565 4.758-14.547 7.27-23.095 7.27-16.296 0-23.719-9.424-23.719-18.182 0-14.422 13.216-16.61 22.866-18.207 2.797-0.461 5.213-0.861 6.937-1.501 1.251-0.521 2.711-1.502 2.555-3.226l-0.022-0.194c-0.027-0.174-0.07-0.354-0.134-0.538l-0.085-0.221c-0.066-0.161-0.135-0.324-0.232-0.509-1.01-1.618-3.451-2.37-7.683-2.37-6.7 0-15.63 3.47-20.596 7.16l-5.638-11.853c5.812-5.185 15.991-8.53 25.981-8.53 15.25 0 25.282 7.096 25.105 18.071-0.24 14.791-14.088 17.023-23.427 18.606" fill="#eb0000"/></g></g></g> </g></g>';
sDis += '</g>';
return sDis;
}


disegnaLista(pos, dim_target, lista)
{
let maxStringDim = 0;
for(let i=0; i<lista.length;i++)
{
  if(lista[i].length>maxStringDim) maxStringDim = lista[i].length;
}
////console.log('maxStringDim: '+maxStringDim);
maxStringDim = 16;


let fontSize    = 5;
let altezzaRect = 2*fontSize;

let larghezza = parseFloat(fontSize*maxStringDim*0.7);
let altezza   = lista.length*altezzaRect;

let scala = 1;
////console.log('scala: '+scala);

let offY  = parseFloat(altezza*scala/2);
////console.log('offY: '+offY);


let sDis = ''
sDis += '<g>';
sDis += '<g transform="translate('+pos.x+' '+parseFloat(pos.y-offY)+')" ><g transform="scale('+scala+')" >';
  for(let i=0; i<lista.length;i++)
  {
    sDis += '<rect x="0" y="'+parseFloat(i*altezzaRect)+'" width="'+parseFloat(larghezza)+'" height="'+parseFloat(altezzaRect)+'" style="fill:none;stroke:gray;stroke-width:0.5;fill-opacity:0.1;stroke-opacity:0.9" />';
    sDis += '<text font-weight="bold" text-anchor="middle" alignment-baseline="middle" x="'+parseFloat(larghezza/2)+'" y="'+parseFloat(i*altezzaRect+altezzaRect/2)+'" font-size="'+fontSize+'" fill="gray"   >'+lista[i]+'</text>';
  }
sDis += '</g></g>';
sDis += '</g>';

return sDis;
}


disegnaPOWERLINES(etichetta)
{
let sDis = '';
let g_lista230 = {start_x:60, start_y:55, step_y: 45, x:0, y: 0};
if(g_lista230.step_y*this.POWER_LINE_LIST.length>230) g_lista230.step_y = parseFloat(230/this.POWER_LINE_LIST.length);

g_lista230.start_y = parseFloat((282.90-g_lista230.step_y*this.POWER_LINE_LIST.length)/2+g_lista230.step_y);

let lung_conn  = 40;
for(let i=0; i<this.POWER_LINE_LIST.length; i++)
{
  let info = {};
  g_lista230.x = g_lista230.start_x;
  g_lista230.y = g_lista230.start_y+i*g_lista230.step_y;
  info.pos = {x:g_lista230.x, y:g_lista230.y};
  info.scale = 0.71;
  info.line_number = this.POWER_LINE_LIST[i].linea;
  info.delta = {dx:0, dy:0};
  let tmp = this.disegna_230VAC(info);
  sDis += tmp.sDis;

  sDis += '<line x1="'+tmp.uscite[3].x+'" y1="'+tmp.uscite[3].y+'" x2="'+parseFloat(tmp.uscite[3].x+lung_conn)+'" y2="'+parseFloat(tmp.uscite[3].y)+'" style="stroke:black;stroke-width:2" />';
  sDis += '<text font-weight="bold" text-anchor="middle" alignment-baseline="middle" x="'+parseFloat(tmp.uscite[3].x/2+(tmp.uscite[3].x+lung_conn)/2)+'" y="'+parseFloat(tmp.uscite[3].y-5)+'" font-size="5" fill="blue"   > max '+this.POWER_LINE_LIST[i].power+'W </text>';
  sDis += '<text font-weight="bold" text-anchor="middle" alignment-baseline="middle" x="'+parseFloat(tmp.uscite[3].x/2+(tmp.uscite[3].x+lung_conn)/2)+'" y="'+parseFloat(tmp.uscite[3].y+5)+'" font-size="5" fill="blue"   > 230Vac, 50Hz </text>';


  sDis += this.disegnaLista({x:parseFloat(tmp.uscite[3].x+lung_conn), y:parseFloat(tmp.uscite[3].y)}, 
                            {w:lung_conn, h:g_lista230.step_y}, 
                            this.POWER_LINE_LIST[i].etk.split(';'));

}

let out = {};
out.sDis  = sDis;
out.H     = parseFloat(300);
out.W     = parseFloat(out.H/1.414);

return out;
}


disegnaConCornici(etichetta, inSVG, titolo)
{


let disegno = new Object();
disegno.svg           = '';


let sLARGHEZZA = 200;
let sALTEZZA   = sLARGHEZZA*350.8/248; // proporzione per foglio A4
let sDis = '';
sDis+='<svg id="DECK_'+etichetta+'" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 '+sLARGHEZZA+' '+sALTEZZA+'">';


// rettangolo bianco di sfondo
sDis += '<rect width="'+sLARGHEZZA+'" height="'+sALTEZZA+'" style="fill:rgb(255,255,255);stroke-width:0;stroke:rgb(0,0,0)"  />';
// cornice, logo ecc
let DeltaCornicetta = 5;
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(sLARGHEZZA-2*DeltaCornicetta)+'" height="'+parseFloat(sALTEZZA-2*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(2550,0,0)"  />';


// cartiglio



let today = new Date();
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(sLARGHEZZA-2*DeltaCornicetta)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';


let posXT = 1.22*DeltaCornicetta;
let posYT = 1.69*DeltaCornicetta;

if(this.smOBJ.lingua=='Italian')
{
sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Ordine:</text>';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
}
else
{
if(this.smOBJ.lingua=='English')
{
  sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Order:</text>';
  sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
  sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
  sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
  sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
}
else {
  if(this.smOBJ.lingua=='French')
  {
    sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Commande:</text>';
    sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
    sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
    sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
    sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
  }
  else {
    if(this.smOBJ.lingua=='German')
    {
      sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Befehl:</text>';
      sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
      sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
      sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
      sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
    }
    else
    {
      if(this.smOBJ.lingua=='Spanish')
      {
        sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Orden:</text>';
        sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
        sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
        sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
        sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
      }
      else
      {
        if(this.smOBJ.lingua=='Dutch')
        {
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Bestellingsnummer:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
        }
        else
        {
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Order:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
        }
      }


    }
  }
}
}



let dedendum = 0;


let nomePergola = 'DECK';

posXT = 3.5*DeltaCornicetta;
sDis += '<text x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" ></text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(0*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.smOBJ.ordine+'</text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(2.15*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.offset.a+' cm</text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(3.15*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.offset.b+' cm</text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(4.15*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.offset.c+' cm</text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(5.15*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.offset.d+' cm</text>';

let stepCornicetta=1*DeltaCornicetta;
let rectDivi = 7;
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(sLARGHEZZA-2*DeltaCornicetta)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(2550,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
//sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
//sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
//sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
//sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(6*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';

stepCornicetta=1*DeltaCornicetta;
posXT = 1.2*DeltaCornicetta;
posYT = parseFloat(1.69*DeltaCornicetta+stepCornicetta);
//let etkP = (potenza=='')?'':'POWER:';
sDis += '<text x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" ></text>';
//sDis += '<text x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >'+etkP+'</text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" ></text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" ></text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" ></text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >SW:</text>';
//sDis += '<text x="'+parseFloat(posXT+parseFloat(6*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >SW:</text>';

posXT = 2.5*DeltaCornicetta;
//etkP = (potenza=='')?'':potenza+' W';
sDis += '<text x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+'</text>';
//sDis += '<text x="'+parseFloat(5*DeltaCornicetta+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+etkP+'</text>';
sDis += '<text x="'+parseFloat(5*DeltaCornicetta+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" ></text>';
sDis += '<text x="'+parseFloat(5*DeltaCornicetta+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" ></text>';
sDis += '<text x="'+parseFloat(4.2*DeltaCornicetta+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" ></text>';
sDis += '<text x="'+parseFloat(4.8*DeltaCornicetta+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.release+'</text>';


sDis += '<text x="'+parseFloat(2.2*DeltaCornicetta+parseFloat(6*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" ></text>';

// logo
let dim_logo = {w:'', h:1.5*DeltaCornicetta};
sDis += this.render_LOGO_pos({x:sLARGHEZZA-6*DeltaCornicetta+2, y:sALTEZZA-2.51*DeltaCornicetta-2}, dim_logo);

sDis += inSVG;

sDis += '</svg>';
return sDis;
}











disegnaConCorniciLattornerie(etichetta, inSVG, titolo, obj)
{



let disegno = new Object();
disegno.svg           = '';


let sLARGHEZZA = 200;
let sALTEZZA   = sLARGHEZZA*350.8/248; // proporzione per foglio A4
let sDis = '';
sDis+='<svg id="_'+etichetta+'" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 '+sLARGHEZZA+' '+sALTEZZA+'">';


// rettangolo bianco di sfondo
sDis += '<rect width="'+sLARGHEZZA+'" height="'+sALTEZZA+'" style="fill:rgb(255,255,255);stroke-width:0;stroke:rgb(0,0,0)"  />';
// cornice, logo ecc
let DeltaCornicetta = 5;
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(sLARGHEZZA-2*DeltaCornicetta)+'" height="'+parseFloat(sALTEZZA-2*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(2550,0,0)"  />';


// cartiglio



let DeltaCornicettaX  = (sLARGHEZZA-2*DeltaCornicetta)/12;
let stepCornicetta    = 0;
let posXT = parseFloat(DeltaCornicettaX/8);
let posYT = 1.69*DeltaCornicetta;

let today = new Date();
let larghezza_rettangolino = 2*DeltaCornicettaX;
let sommatore_rettangolini = DeltaCornicetta;

larghezza_rettangolino = 3*DeltaCornicettaX;
sDis += '<rect x="'+parseFloat(sommatore_rettangolini)+'"  y="'+parseFloat((1+stepCornicetta)*DeltaCornicetta)+'" width="'+parseFloat(larghezza_rettangolino)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(sommatore_rettangolini))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >RIF.ORD: <tspan fill="black"> '+0+'  </tspan></text>';
sommatore_rettangolini += larghezza_rettangolino;

sDis += '<rect x="'+parseFloat(sommatore_rettangolini)+'"  y="'+parseFloat((1+stepCornicetta)*DeltaCornicetta)+'" width="'+parseFloat(larghezza_rettangolino)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(sommatore_rettangolini))+'" y="'+parseFloat(posYT+(stepCornicetta)*DeltaCornicetta)+'" font-size="2.5px"   fill="red" >TIPO: <tspan fill="black"> '+obj.name+obj.n_threads+'  </tspan> </text>';
sommatore_rettangolini += larghezza_rettangolino;

larghezza_rettangolino = 2*DeltaCornicettaX;
sDis += '<rect x="'+parseFloat(sommatore_rettangolini)+'"  y="'+parseFloat((1+stepCornicetta)*DeltaCornicetta)+'" width="'+parseFloat(larghezza_rettangolino)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(sommatore_rettangolini))+'" y="'+parseFloat(posYT+(stepCornicetta)*DeltaCornicetta)+'" font-size="2.5px"   fill="red" >LUNGHEZZA: <tspan fill="black"> '+obj.lunghezza+'m   </tspan> </text>';
sommatore_rettangolini += larghezza_rettangolino;

sDis += '<rect x="'+parseFloat(sommatore_rettangolini)+'"  y="'+parseFloat((1+stepCornicetta)*DeltaCornicetta)+'" width="'+parseFloat(larghezza_rettangolino)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(sommatore_rettangolini))+'" y="'+parseFloat(posYT+(stepCornicetta)*DeltaCornicetta)+'" font-size="2.5px"   fill="red" >NOME PROFILO: <tspan fill="black"> '+obj.etk+'  </tspan> </text>';
sommatore_rettangolini += larghezza_rettangolino;

sDis += '<rect x="'+parseFloat(sommatore_rettangolini)+'"  y="'+parseFloat((1+stepCornicetta)*DeltaCornicetta)+'" width="'+parseFloat(larghezza_rettangolino)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(sommatore_rettangolini))+'" y="'+parseFloat(posYT+(stepCornicetta)*DeltaCornicetta)+'" font-size="2.5px"   fill="red" >DATA: <tspan fill="black"> '+today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+'  </tspan> </text>';
sommatore_rettangolini += larghezza_rettangolino;


stepCornicetta    = 1;
sommatore_rettangolini = DeltaCornicetta;

larghezza_rettangolino = 4*DeltaCornicettaX;
sDis += '<rect x="'+parseFloat(sommatore_rettangolini)+'"  y="'+parseFloat((1+stepCornicetta)*DeltaCornicetta)+'" width="'+parseFloat(larghezza_rettangolino)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(sommatore_rettangolini))+'" y="'+parseFloat(posYT+(stepCornicetta)*DeltaCornicetta)+'" font-size="2.5px"   fill="red" >MATERIALE: <tspan fill="black"> ALLUMINIO OSSIDATO ARGENTO  </tspan></text>';
sommatore_rettangolini += larghezza_rettangolino;

sDis += '<rect x="'+parseFloat(sommatore_rettangolini)+'"  y="'+parseFloat((1+stepCornicetta)*DeltaCornicetta)+'" width="'+parseFloat(larghezza_rettangolino)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(sommatore_rettangolini))+'" y="'+parseFloat(posYT+(stepCornicetta)*DeltaCornicetta)+'" font-size="2.5px"   fill="red" >FINITURA SUPERFICIALE: <tspan fill="black"> GREZZO  </tspan> </text>';
sommatore_rettangolini += larghezza_rettangolino;


sDis += '<rect x="'+parseFloat(sommatore_rettangolini)+'"  y="'+parseFloat((1+stepCornicetta)*DeltaCornicetta)+'" width="'+parseFloat(larghezza_rettangolino)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(sommatore_rettangolini))+'" y="'+parseFloat(posYT+(stepCornicetta)*DeltaCornicetta)+'" font-size="2.5px"   fill="red" >TOLLERANZE GENERALI: <tspan fill="black"> UNI EN 22768-m </tspan> </text>';
sommatore_rettangolini += larghezza_rettangolino;


stepCornicetta    = 2;
sommatore_rettangolini = DeltaCornicetta;

larghezza_rettangolino = 6*DeltaCornicettaX;
sDis += '<rect x="'+parseFloat(sommatore_rettangolini)+'"  y="'+parseFloat((1+stepCornicetta)*DeltaCornicetta)+'" width="'+parseFloat(larghezza_rettangolino)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(sommatore_rettangolini))+'" y="'+parseFloat(posYT+(stepCornicetta)*DeltaCornicetta)+'" font-size="2.5px"   fill="red" >DISEGNATORE: <tspan fill="black"> disegno automatico GibusTECH</tspan></text>';
sommatore_rettangolini += larghezza_rettangolino;

larghezza_rettangolino = 2*DeltaCornicettaX;
sDis += '<rect x="'+parseFloat(sommatore_rettangolini)+'"  y="'+parseFloat((1+stepCornicetta)*DeltaCornicetta)+'" width="'+parseFloat(larghezza_rettangolino)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(sommatore_rettangolini))+'" y="'+parseFloat(posYT+(stepCornicetta)*DeltaCornicetta)+'" font-size="2.5px"   fill="red" >TAVOLA: <tspan fill="black"> '+obj.tavola+'</tspan> </text>';
sommatore_rettangolini += larghezza_rettangolino;

larghezza_rettangolino = 4*DeltaCornicettaX;
sDis += '<rect x="'+parseFloat(sommatore_rettangolini)+'"  y="'+parseFloat((1+stepCornicetta)*DeltaCornicetta)+'" width="'+parseFloat(larghezza_rettangolino)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(sommatore_rettangolini))+'" y="'+parseFloat(posYT+(stepCornicetta)*DeltaCornicetta)+'" font-size="2.5px"   fill="red" >SW: <tspan fill="black"> '+this.release+'</tspan> </text>';
sommatore_rettangolini += larghezza_rettangolino;



// logo
let dim_logo = {w:'', h:2.5*DeltaCornicetta};
sDis += this.render_LOGO_pos({x:sLARGHEZZA-10*DeltaCornicetta+2, y:sALTEZZA-5.51*DeltaCornicetta-2}, dim_logo);

let scala = 1;

let Wmax = parseFloat(sLARGHEZZA-16*DeltaCornicetta);
let Hmax = parseFloat(sALTEZZA-4*DeltaCornicetta);

scala = parseFloat(Wmax/inSVG.W);
if(inSVG.H*scala>Hmax) scala *= parseFloat(Hmax/(inSVG.H*scala));
let centratura = {x:0, y:0};

centratura.x = parseFloat(sLARGHEZZA-inSVG.W*scala)/2;
centratura.y = parseFloat(sALTEZZA-inSVG.H*scala)/2;



sDis += '<g transform="translate('+centratura.x+' '+centratura.y+')">';
sDis += '<g transform="scale('+scala+')">';
sDis += inSVG.sDis;
sDis += '</g>';
sDis += '</g>';

sDis += '</svg>';
return sDis;
}


disegnaConCorniciElementiElettronici(etichetta, inSVG)
{

let disegno = new Object();
disegno.svg           = '';


let sLARGHEZZA = 200;
let sALTEZZA   = sLARGHEZZA*350.8/248; // proporzione per foglio A4
let sDis = '';
sDis+='<svg id="DECK_'+etichetta+'" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 '+sLARGHEZZA+' '+sALTEZZA+'">';


// rettangolo bianco di sfondo
sDis += '<rect width="'+sLARGHEZZA+'" height="'+sALTEZZA+'" style="fill:rgb(255,255,255);stroke-width:0;stroke:rgb(0,0,0)"  />';
// cornice, logo ecc
let DeltaCornicetta = 5;
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(sLARGHEZZA-2*DeltaCornicetta)+'" height="'+parseFloat(sALTEZZA-2*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(2550,0,0)"  />';


// cartiglio



let today = new Date();
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(sLARGHEZZA-2*DeltaCornicetta)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+DeltaCornicetta+'" width="'+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';


let posXT = 1.22*DeltaCornicetta;
let posYT = 1.69*DeltaCornicetta;

if(this.smOBJ.lingua=='Italian')
{
sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Ordine:</text>';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
}
else
{
if(this.smOBJ.lingua=='English')
{
  sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Order:</text>';
  sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
  sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
  sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
  sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
}
else {
  if(this.smOBJ.lingua=='French')
  {
    sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Commande:</text>';
    sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
    sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
    sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
    sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
  }
  else {
    if(this.smOBJ.lingua=='German')
    {
      sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Befehl:</text>';
      sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
      sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
      sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
      sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
    }
    else
    {
      if(this.smOBJ.lingua=='Spanish')
      {
        sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Orden:</text>';
        sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
        sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
        sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
        sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
      }
      else
      {
        if(this.smOBJ.lingua=='Dutch')
        {
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Bestellingsnummer:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
        }
        else
        {
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Order:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.a:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.b:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.c:</text>';
          sDis += '<text font-family="monospace" x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >Off.d:</text>';
        }
      }


    }
  }
}
}






let nomePergola = 'DECK';

posXT = 3.5*DeltaCornicetta;
sDis += '<text x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" ></text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(0*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.smOBJ.ordine+'</text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(2.15*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.offset.a+' cm</text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(3.15*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.offset.b+' cm</text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(4.15*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.offset.c+' cm</text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(5.15*(sLARGHEZZA-2*DeltaCornicetta)/6))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.offset.d+' cm</text>';

let stepCornicetta=1*DeltaCornicetta;
let rectDivi = 7;
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(sLARGHEZZA-2*DeltaCornicetta)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(2550,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
//sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
//sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
//sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';
//sDis += '<rect x="'+DeltaCornicetta+'"  y="'+parseFloat(DeltaCornicetta+stepCornicetta)+'" width="'+parseFloat(6*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi)+'" height="'+parseFloat(1*DeltaCornicetta)+'" style="fill:none;stroke-width:0.3;stroke:rgb(255,0,0)"  />';

stepCornicetta=1*DeltaCornicetta;
posXT = 1.2*DeltaCornicetta;
posYT = parseFloat(1.69*DeltaCornicetta+stepCornicetta);
//let etkP = (potenza=='')?'':'POWER:';
sDis += '<text x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" ></text>';
//sDis += '<text x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >'+etkP+'</text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" ></text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" ></text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" ></text>';
sDis += '<text x="'+parseFloat(posXT+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >SW:</text>';
//sDis += '<text x="'+parseFloat(posXT+parseFloat(6*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="red" >SW:</text>';

posXT = 2.5*DeltaCornicetta;
//etkP = (potenza=='')?'':potenza+' W';
sDis += '<text x="'+parseFloat(posXT)+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate()+'</text>';
//sDis += '<text x="'+parseFloat(5*DeltaCornicetta+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+etkP+'</text>';
sDis += '<text x="'+parseFloat(5*DeltaCornicetta+parseFloat(2*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" ></text>';
sDis += '<text x="'+parseFloat(5*DeltaCornicetta+parseFloat(3*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" ></text>';
sDis += '<text x="'+parseFloat(4.2*DeltaCornicetta+parseFloat(4*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" ></text>';
sDis += '<text x="'+parseFloat(4.8*DeltaCornicetta+parseFloat(5*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" >'+this.release+'</text>';


sDis += '<text x="'+parseFloat(2.2*DeltaCornicetta+parseFloat(6*(sLARGHEZZA-2*DeltaCornicetta)/rectDivi))+'" y="'+parseFloat(posYT)+'" font-size="2.5px"   fill="black" ></text>';


// logo
let dim_logo = {w:'', h:2.5*DeltaCornicetta};
sDis += this.render_LOGO_pos({x:sLARGHEZZA-10*DeltaCornicetta+2, y:sALTEZZA-5.51*DeltaCornicetta-2}, dim_logo);

let scala = 1;

let Wmax = parseFloat(sLARGHEZZA-16*DeltaCornicetta*0);
let Hmax = parseFloat(sALTEZZA-4*DeltaCornicetta*0);

scala = parseFloat(Hmax/inSVG.H/2);
if(inSVG.W*scala>Wmax) scala *= parseFloat(Wmax/(inSVG.W*scala));
let centratura = {x:0, y:0};

centratura.x = parseFloat(sLARGHEZZA-inSVG.W*scala)/2;
centratura.y = parseFloat(sALTEZZA-inSVG.H*scala)/2;



sDis += '<g transform="translate('+centratura.x+' '+centratura.y+')">';
sDis += '<g transform="scale('+scala+')">';
sDis += inSVG.sDis;
sDis += '</g>';
sDis += '</g>';

sDis += '</svg>';
return sDis;
}


disegnaLINEAperQUOTA_HOR(pos, lunghezza, spessore)
{

let lato_freccia = {dx:parseFloat(2/this.grafica.scala), dy:parseFloat(1/this.grafica.scala)};



let sDis = '';
sDis += '<g transform="translate('+parseFloat(pos.x)+' '+parseFloat(pos.y)+')" >';

sDis += '<line x1="0" y1="0" x2="'+parseFloat(lato_freccia.dx)+'" y2="'+parseFloat(lato_freccia.dy)+'" style="stroke:blue;stroke-width:'+spessore+'" />';
sDis += '<line x1="0" y1="0" x2="'+parseFloat(lato_freccia.dx)+'" y2="'+parseFloat(-lato_freccia.dy)+'" style="stroke:blue;stroke-width:'+spessore+'" />';

sDis += '<line x1="'+parseFloat(lunghezza)+'" y1="0" x2="'+parseFloat(lunghezza-lato_freccia.dx)+'" y2="'+parseFloat(lato_freccia.dy)+'" style="stroke:blue;stroke-width:'+spessore+'" />';
sDis += '<line x1="'+parseFloat(lunghezza)+'" y1="0" x2="'+parseFloat(lunghezza-lato_freccia.dx)+'" y2="'+parseFloat(-lato_freccia.dy)+'" style="stroke:blue;stroke-width:'+spessore+'" />';

sDis += '<line x1="0" y1="0" x2="'+parseFloat(lunghezza)+'" y2="0" style="stroke:blue;stroke-width:'+spessore+'" />';

sDis += '</g>';
//console.log(sDis);
return sDis;
}

disegnaQUOTAsemplice(lato, pos, lunghezza, testo_quota='')
  {
      let FONT_FAMILY = "Helvetica, Arial, sans-serif";
      let fontSize = parseFloat(3/this.grafica.scala);
      let offsetY  = parseFloat(0.51*fontSize);
      let spessore = parseFloat(0.35/this.grafica.scala);

      offsetY = (lato=='BC'||lato=='AB')?-1.51*offsetY:offsetY;

      let sDis = '';
      let gradi = 0;
      if(lato=='AB') gradi = 90;
      if(lato=='CD') gradi = 90;
      sDis += '<g>';

      sDis += '<g transform="translate('+parseFloat(pos.x)+' '+parseFloat(pos.y)+')" ><g transform="rotate('+gradi+' 0 0)" > ';


      
      // linea con frecce
      //disegnaLINEAperQUOTA_HOR(pos, lunghezza, spessore)
      sDis += this.disegnaLINEAperQUOTA_HOR({x:0, y:0}, lunghezza, spessore);

      // testo quota
      if(testo_quota=='')
          sDis += '<text font-family="'+FONT_FAMILY+'" x="'+parseFloat(lunghezza/2)+'" y="'+parseFloat(-offsetY)+'"  alignment-baseline="middle"  text-anchor="middle" style="fill:blue; stroke:none;  font-size: '+fontSize+'px;"> '+parseInt(lunghezza*100)/10+' </text>';
      else
          sDis += '<text font-family="'+FONT_FAMILY+'" x="'+parseFloat(lunghezza/2)+'" y="'+parseFloat(-offsetY)+'"  alignment-baseline="middle"  text-anchor="middle" style="fill:blue; stroke:none;  font-size: '+fontSize+'px;"> '+testo_quota+' </text>';

      // barre inizio e fine
      sDis += '<line x1="0" y1="'+parseFloat(-2*offsetY)+'" x2="'+parseFloat(0)+'" y2="'+parseFloat(2*offsetY)+'" style="stroke:gray;stroke-width:'+parseFloat(spessore/2)+'" />';
      sDis += '<line x1="'+parseFloat(lunghezza)+'" y1="'+parseFloat(-2*offsetY)+'" x2="'+parseFloat(lunghezza)+'" y2="'+parseFloat(2*offsetY)+'" style="stroke:gray;stroke-width:'+parseFloat(spessore/2)+'" />';

      sDis += '</g></g>';
      sDis += '</g>';
      //console.log(sDis);

      let out = {};
      out.sDis = (lunghezza>0)?sDis:'';

      return out;
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////
  // ZAVORRAMENTO
  getAutomaticBallast()
  {
    let larghezza = this.smOBJ.dimensioni.nominali.larghezza;
    let sporgenza = this.smOBJ.dimensioni.nominali.sporgenza;
    let riga    = 0;
    let colonna = 0;

    let tmpTable = (!this.checkType('A', 1)||
                !this.checkType('B', 1)||
                !this.checkType('C', 1)||
                !this.checkType('D', 1))?this.BALLAST_TABLE_ADD:this.BALLAST_TABLE;
  
    for(let i=1;i<tmpTable[0].length;i++)
    {
        if(parseInt(larghezza)>=parseInt(tmpTable[0][i])) 
        {
          colonna  = i;
          }
      if(parseInt(sporgenza)>=parseInt(tmpTable[i][0])) 
        {
          {
            riga  = i;
          }
        }
    }
    return tmpTable[riga][colonna];
  }

  calcolaPesoAttuale(){        
      return this.BOM.reduce((sum , el)=>{ return sum + el.peso;} ,0);
  }


  creaCoverZone(input, shape){
    //  {posizione:, dimensione, tipo:}
    let out = this.cloneMyObj(input);
    let sDis = '';

    if(shape=='rect')
      sDis += '<rect width="'+parseFloat(input.dimensione.W)+'" height="'+parseFloat(input.dimensione.H)+
                  '" x="'+parseFloat(0)+'" y="'+parseFloat(0)+'" style="fill:magenta;stroke:black;stroke-width:1;fill-opacity:0.1;stroke-opacity:0.9" />';
    else
      sDis += '<circle r="'+parseFloat((input.dimensione.W+input.dimensione.H)/2)+'" cx="'+parseFloat(0)+'" cy="'+parseFloat(0)+'" style="fill:magenta;stroke:black;stroke-width:1;fill-opacity:0.1;stroke-opacity:0.9" />';


    sDis      = this.svgGoToPos({x:parseFloat(input.posizione.x), y: parseFloat(input.posizione.y)}, '', sDis);
    out.svg   = sDis;
    out.tipo  = input.tipo;
    out.shape = shape;
    
    return this.cloneMyObj(out);
  }

  creaZavorra(input){
      //console.log(input);
      //  {posizione:pos_zavorra, dimensione: misRifZavorra, margine: margineBallast
      let dim_staffa = 15;
      let col_staffa = ' style="fill:blue;stroke:blue;stroke-width:3;fill-opacity:0.91;stroke-opacity:0.9"';

      let out = this.cloneMyObj(input);

      let sDis = '';
      sDis += '<rect width="'+parseFloat(input.dimensione.W-2*input.margine)+'" height="'+parseFloat(input.dimensione.H-2*input.margine)+
                  '" x="'+parseFloat(0*input.margine)+'" y="'+parseFloat(0*input.margine)+'" style="fill:blue;stroke:gray;stroke-width:1;fill-opacity:0.1;stroke-opacity:0.9" />';

      //
      
      if(input.dir=='hor')
      {
        if(input.j<input.totj-1) 
        {  
        sDis += '<line x1="0" y1="'+parseFloat(input.dimensione.H-2*input.margine-dim_staffa/2)+
                    '" x2="0" y2="'+parseFloat(input.dimensione.H+2*input.margine+dim_staffa/2)+
                    '" '+col_staffa+' />';

        sDis += '<line x1="'+parseFloat(input.dimensione.W-2*input.margine)+
                    '" y1="'+parseFloat(input.dimensione.H-2*input.margine-dim_staffa/2)+
                    '" x2="'+parseFloat(input.dimensione.W-2*input.margine)+
                    '" y2="'+parseFloat(input.dimensione.H+2*input.margine+dim_staffa/2)+'" '+col_staffa+' />';
        }

        if(input.j==0) // è la prima zavorra
        {
           sDis += '<line x1="0" y1="0" x2="0" y2="'+dim_staffa+'" '+col_staffa+' />';
           sDis += '<line x1="'+parseFloat(input.dimensione.H-2*input.margine)+'" y1="0" x2="'+parseFloat(input.dimensione.H-2*input.margine)+'" y2="'+dim_staffa+'" '+col_staffa+' />';
        }
        else
        {
          if(input.j==input.totj-1) // ultima zavorra 
          {
            sDis += '<line x1="0" y1="'+parseFloat(input.dimensione.H-2*input.margine-dim_staffa)+'" x2="0" y2="'+parseFloat(input.dimensione.H-2*input.margine)+'" '+col_staffa+' />';
            sDis += '<line x1="'+parseFloat(input.dimensione.H-2*input.margine)+'" y1="'+parseFloat(input.dimensione.H-2*input.margine-dim_staffa)+'" x2="'+parseFloat(input.dimensione.H-2*input.margine)+'" y2="'+parseFloat(input.dimensione.H-2*input.margine)+'" '+col_staffa+' />';
          }
          
        }
      }
      else //ver
      {
        if(input.j<input.totj-1) 
        {  
        sDis += '<line y1="0" x1="'+parseFloat(input.dimensione.W-2*input.margine-dim_staffa/2)+
                    '" y2="0" x2="'+parseFloat(input.dimensione.W+2*input.margine+dim_staffa/2)+
                    '" '+col_staffa+' />';

        sDis += '<line y1="'+parseFloat(input.dimensione.H-2*input.margine)+
                    '" x1="'+parseFloat(input.dimensione.W-2*input.margine-dim_staffa/2)+
                    '" y2="'+parseFloat(input.dimensione.H-2*input.margine)+
                    '" x2="'+parseFloat(input.dimensione.W+2*input.margine+dim_staffa/2)+'" '+col_staffa+' />';
        }

        if(input.j==0) // è la prima zavorra
        {
           sDis += '<line y1="0" x1="0" y2="0" x2="'+dim_staffa+'" '+col_staffa+' />';
           sDis += '<line y1="'+parseFloat(input.dimensione.H-2*input.margine)+
                       '" x1="0" y2="'+parseFloat(input.dimensione.H-2*input.margine)+
                       '" x2="'+dim_staffa+'" '+col_staffa+' />';
        }
        else
        {
          if(input.j==input.totj-1) // ultima zavorra 
          {
            sDis += '<line y1="0" x1="'+parseFloat(input.dimensione.H-2*input.margine-dim_staffa)+
                        '" y2="0" x2="'+parseFloat(input.dimensione.H-2*input.margine)+'" '+col_staffa+' />';

            sDis += '<line y1="'+parseFloat(input.dimensione.H-2*input.margine)+
                        '" x1="'+parseFloat(input.dimensione.H-2*input.margine-dim_staffa)+
                        '" y2="'+parseFloat(input.dimensione.H-2*input.margine)+
                        '" x2="'+parseFloat(input.dimensione.H-2*input.margine)+'" '+col_staffa+' />';
          }
          
        }
      }  
      
      sDis = this.svgGoToPos({x:parseFloat(input.posizione.x+1*input.margine), y: parseFloat(input.posizione.y+input.margine)}, '', sDis);
      
      out.svg = sDis;

      // cover zones
      if(typeof input.settings == 'undefined') 
          {
              input.settings = {};
              input.settings.carica_coverZones = true;
          }
      
      this.lista_coverZones.push(this.creaCoverZone({posizione: this.cloneMyObj(input.posizione), 
                                               dimensione:input.dimensione,
                                              tipo: "zavorre",
                                              settings: input.settings},
                                              'rect'
                                            ));  
                                              
                                              

                                    
                                               

      return this.cloneMyObj(out);
  }
      
      
     

  CalcolaZavorramento(){

      let isSolution          = false;
      this.zavorramento.zavorre=[];
      let n_strati            = (this.smOBJ.optionals.pedana.ballast.T*3<=10)?3:(this.smOBJ.optionals.pedana.ballast.T*2<=10)?2:1;
      console.log('n_strati: ', n_strati);

      let peso_struttura_base = this.calcolaPesoAttuale();
      let areaVirtuale        = parseFloat(this.smOBJ.dimensioni.nominali.larghezza*this.smOBJ.dimensioni.nominali.sporgenza/10000);
      let pesoMQ              = (this.smOBJ.optionals.pedana.ballast.TIPO_BALLAST.split('-')[0]==4)?this.getAutomaticBallast():this.smOBJ.optionals.pedana.ballast.required;

      let peso_richiesto      = parseFloat(pesoMQ*areaVirtuale);

      if(peso_richiesto<=0) return 0;

      console.log('PESO RICHIESTO: '+peso_richiesto+' kg');
      this.zavorramento.peso_richiesto        = peso_richiesto;
      
      console.log('PESO STRUTTURA BASE: '+Math.floor(peso_struttura_base)+' kg');
      this.zavorramento.peso_struttura_base   = peso_struttura_base;

      let peso_da_aggiungere = parseFloat(peso_richiesto-peso_struttura_base);
      console.log('ZAVORRAMENTO RICHIESTO: '+Math.floor(peso_da_aggiungere)+' kg');
      this.zavorramento.peso_da_aggiungere    = peso_da_aggiungere;

      let n_zavorre = Math.ceil(peso_da_aggiungere/this.smOBJ.optionals.pedana.ballast.WEIGHT);
      console.log('N ZAVORRE RICHIESTE: '+Math.ceil(n_zavorre));
      this.zavorramento.n_zavorre             = n_zavorre;

      this.zavorramento.zavorre               = [];
       
      // se la zavorra non è quadrata, devo scegliere il lato di orientamento più conveniente (quello che, a parità di peso, richiede lunghezza totale minore 
      // in quanto questa è legata ai profili da aggiungere)
      let misRifZavorra = {W:0, H:0};
      let margineBallast= 1; //
      let maxDimW = parseFloat(n_zavorre/n_strati*(this.smOBJ.optionals.pedana.ballast.W+2*margineBallast)); 
      let maxDimH = parseFloat(n_zavorre/n_strati*(this.smOBJ.optionals.pedana.ballast.H+2*margineBallast));
      let lunghezza_minima = 0; 
      if(maxDimH<maxDimW)
      {
        lunghezza_minima = maxDimH;
        misRifZavorra = {W:parseFloat(this.smOBJ.optionals.pedana.ballast.W+2*margineBallast), H:parseFloat(this.smOBJ.optionals.pedana.ballast.H+2*margineBallast)};
      }
      else
      {
        lunghezza_minima = maxDimW;
        misRifZavorra = {W:parseFloat(this.smOBJ.optionals.pedana.ballast.H+2*margineBallast), H:parseFloat(this.smOBJ.optionals.pedana.ballast.W+2*margineBallast)};
      }

      // definisco le lunghezze disponibili:
      // se non c'è addossamento, le dimensioni disponibili sono quelle tra tra i nodi interni.
      // altrimenti mi metto parallalo al lato di addossamento
      let tmp_l_rif_h = parseFloat(0);
      let tmp_l_rif_w = parseFloat(0);

      // verticale
      let start_h                 = this.getInfoNodo('AD_A1*');
      //start_h.nodo.posizione.y    += start_h.nodo.geometric[3].start_profiles[1];  // 3 -> da sotto, 0->x, 1->y
      let stop_h                  = this.getInfoNodo('BC_A1*');
      //stop_h.nodo.posizione.y     += stop_h.nodo.geometric[1].start_profiles[1];  // 1 -> da sopra 
      tmp_l_rif_h                 = parseFloat(stop_h.nodo.posizione.y-start_h.nodo.posizione.y);
      tmp_l_rif_h                 -= 2*this.cost.piastra_su_profilo_esterno;  
      //tmp_l_rif_h                 -= start_h.nodo.geometric[3].start_profiles[1];  // 3 -> da sotto, 0->x, 1->y
      //tmp_l_rif_h                 += stop_h.nodo.geometric[1].start_profiles[1];  // 1 -> da sopra 

      //console.log(start_h.nodo.posizione);
      //console.log(stop_h.nodo.posizione);
      
       
      // orizzontale
      let start_w                 = this.getInfoNodo('AB_A1*');
      //start_w.nodo.posizione.x    += start_w.nodo.geometric[0].start_profiles[0];  // 0 -> da destra, 0->x, 1->y
      let stop_w                  = this.getInfoNodo('CD_A1*');
      //stop_w.nodo.posizione.x     += stop_w.nodo.geometric[2].start_profiles[0];  // 2 -> da sinistra 
      tmp_l_rif_w                 = parseFloat(stop_w.nodo.posizione.x-start_w.nodo.posizione.x);
      tmp_l_rif_w                 -=2*this.cost.piastra_su_profilo_esterno; 
      //tmp_l_rif_w                 -= start_w.nodo.geometric[0].start_profiles[0];  // 0 -> da destra, 0->x, 1->y
      //tmp_l_rif_w                 += stop_w.nodo.geometric[2].start_profiles[0];  // 2 -> da sinistra

      //console.log(start_w.nodo.posizione);
      //console.log(stop_w.nodo.posizione);

      //console.log('tmp_l_rif_w: ', tmp_l_rif_w);
      //console.log('tmp_l_rif_h: ', tmp_l_rif_h);

      if(!this.checkType('A',1)||!this.checkType('B',1)||!this.checkType('C',1)||!this.checkType('D',1))
      {
         if(!this.checkType('A',1)&&!this.checkType('D',1)|| !this.checkType('B',1)&&!this.checkType('C',1) )
          {
              // se ci sono gambe intermedie, mi attacco a quei profili interni, altrimenti devo estendermi verso fuori
              if(this.lista_nodi.filter((el)=>{return el.etk.split('_')[0]=='AB' && el.enabled;}).length<2)
                 start_w = (this.offset.d>0)?this.getInfoNodo('AB_A1-d*'):this.getInfoNodo('AB_A1*');
              else
                 start_w = this.getInfoNodo('AB_A1*');
          

              if(this.lista_nodi.filter((el)=>{return el.etk.split('_')[0]=='CD' && el.enabled;}).length<2)
                  stop_w = (this.offset.b>0)?this.getInfoNodo('CD_A1-b*'):this.getInfoNodo('CD_A1*'); 
              else
                  stop_w  = this.getInfoNodo('CD_A1*');

              
              //start_w.nodo.posizione.x += start_w.nodo.geometric[0].start_profiles[0];  // 0 -> da destra, 0->x, 1->y
              //stop_w.nodo.posizione.x  -= stop_w.nodo.geometric[2].start_profiles[0];  // 2 -> da sinistra 
              tmp_l_rif_w =  parseFloat(stop_w.nodo.posizione.x-start_w.nodo.posizione.x);
              tmp_l_rif_w -=2*this.cost.piastra_su_profilo_esterno;
              //tmp_l_rif_w -= start_w.nodo.geometric[0].start_profiles[0];  // 0 -> da destra, 0->x, 1->y
              //tmp_l_rif_w += stop_w.nodo.geometric[2].start_profiles[0];  // 2 -> da sinistra
                              
          }

          if(!this.checkType('A',1)&&!this.checkType('B',1)|| !this.checkType('C',1)&&!this.checkType('D',1) )
          {
              // se ci sono gambe intermedie, mi attacco a quei profili interni, altrimenti devo estendermi verso fuori
              if(this.lista_nodi.filter((el)=>{return el.etk.split('_')[0]=='AD' && el.enabled;}).length<2)
                  start_h = (this.offset.a>0)?this.getInfoNodo('AD_A1-a*'):this.getInfoNodo('AD_A1*');
              else
                  start_h = this.getInfoNodo('AD_A1*');
          

              if(this.lista_nodi.filter((el)=>{return el.etk.split('_')[0]=='BC' && el.enabled;}).length<2)
                  stop_h = (this.offset.b>0)?this.getInfoNodo('BC_A1-c*'):this.getInfoNodo('BC_A1*'); 
              else
                  stop_h  = this.getInfoNodo('BC_A1*');

              //start_h.nodo.posizione.y += start_h.nodo.geometric[3].start_profiles[1];  // 3 -> da sotto, 0->x, 1->y
              //stop_h.nodo.posizione.y  -= stop_h.nodo.geometric[1].start_profiles[1];  // 1 -> da sopra 
              tmp_l_rif_h = parseFloat(stop_h.nodo.posizione.y-start_h.nodo.posizione.y);
              tmp_l_rif_h -=2*this.cost.piastra_su_profilo_esterno;
              //tmp_l_rif_h -= start_h.nodo.geometric[3].start_profiles[1];  // 3 -> da sotto, 0->x, 1->y
              //tmp_l_rif_h += stop_h.nodo.geometric[1].start_profiles[1];  // 1 -> da sopra 
                              
          }  
      }

      // start_h, stop_h sono i nodi di riferimento per lo spazio verticale a disposizione
      // start_w, stop_w sono i nodi di riferimento per lo spazio orizzontale a disposizione

      //console.log('tmp_l_rif_w: ', tmp_l_rif_w);
      //console.log('tmp_l_rif_h: ', tmp_l_rif_h);


      // ci sto?
      let corsie_h      = true;
      let corsie_w      = true;


      // testo la soluzione più conveniente
      let n_zav_per_row = n_strati*Math.floor(tmp_l_rif_w/(misRifZavorra.W+this.cost.w_profilo_interno));
      let n_zav_row     = Math.ceil(n_zavorre/n_zav_per_row);
      console.log('n_zav_per_row: ', n_zav_per_row);
      console.log('n_zav_row: ', n_zav_row);


      // quante zavorre ci stanno per colonna
      let n_zav_per_col = n_strati*Math.floor(tmp_l_rif_h/(misRifZavorra.H+this.cost.w_profilo_interno));
      // quante colonne mi servirebbero
      let n_zav_col     = Math.ceil(n_zavorre/n_zav_per_col);

      console.log('n_zav_per_col: ', n_zav_per_col);
      console.log('n_zav_col: ', n_zav_col);
      
      if(n_zav_col*(misRifZavorra.W+this.cost.w_profilo_interno)>tmp_l_rif_w)
          {
              console.log('Non ci sto con il numero di colonne');
              console.log(n_zav_col*(misRifZavorra.W+this.cost.w_profilo_interno), tmp_l_rif_w);
              corsie_h = false; 
          } 

      if(n_zav_row*(misRifZavorra.H+this.cost.w_profilo_interno)>tmp_l_rif_h)
          {
              console.log('Non ci sto con il numero di righe');
              console.log(n_zav_row*(misRifZavorra.H+this.cost.w_profilo_interno), tmp_l_rif_h);
              corsie_w = false; 
          } 
      

      

      /* de-commentare questa parte se voglio bilanciare le zavorre
      // devo privilegiare un numero di corsie pari, a meno di non essere in un adossamento
      if(this.checkType('A',1)&&this.checkType('B',1)&&this.checkType('C',1)&&this.checkType('D',1))
      {
          let tmp_n_zav_row         = (n_zav_row%2==0)?n_zav_row:n_zav_row+1;
          let tmp_n_zav_col         = (n_zav_col%2==0)?n_zav_col:n_zav_col+1;
          // ci sto?
          if(tmp_n_zav_col*(misRifZavorra.W+this.cost.w_profilo_interno)<tmp_l_rif_w) n_zav_col = tmp_n_zav_col;
          if(tmp_n_zav_row*(misRifZavorra.H+this.cost.w_profilo_interno)<tmp_l_rif_h) n_zav_row = tmp_n_zav_row;
      }
      */    



      // addossate su AD, BC       
      if(!this.checkType('A',1)&&!this.checkType('D',1)|| !this.checkType('B',1)&&!this.checkType('C',1) )
          {
              corsie_h = false;
              corsie_w = true;
          }    
      
      // addossate su AB, CD    
      if(!this.checkType('A',1)&&!this.checkType('B',1)|| !this.checkType('C',1)&&!this.checkType('D',1) )
          {
              corsie_w = false;
              corsie_h = true;
          }


      // ci sto?

      //console.log('corsie_h ', corsie_h);
      //console.log('corsie_w ', corsie_w);

      if(n_zav_col*(misRifZavorra.W+this.cost.w_profilo_interno)>tmp_l_rif_w && corsie_h)
          {
              console.log('Non ci sto con il numero di colonne');
              console.log(n_zav_col*(misRifZavorra.W+this.cost.w_profilo_interno), tmp_l_rif_w);                
              corsie_h = false;    
          }
       
          
           
      if(n_zav_row*(misRifZavorra.H+this.cost.w_profilo_interno)>tmp_l_rif_h && corsie_w)
          {
              console.log('Non ci sto con il numero di righe');
              console.log(n_zav_row*(misRifZavorra.H+this.cost.w_profilo_interno), tmp_l_rif_h); 
              corsie_w = false;           
          }
      

              


      //console.log('corsie_h ', corsie_h);
      //console.log('corsie_w ', corsie_w);
      //console.log('n_zav_col*tmp_l_rif_h ', n_zav_col*tmp_l_rif_h);
      //console.log('n_zav_row*tmp_l_rif_w ', n_zav_row*tmp_l_rif_w);

      // ottimizzazione costo alluminio
      if(n_zav_col*tmp_l_rif_h<=n_zav_row*tmp_l_rif_w && corsie_h) 
      {
          corsie_w = false;
          corsie_h = true;
          isSolution = true;
      }
      else
      {
          if(corsie_w)
          {
              corsie_h = false;
              corsie_w = true;
              isSolution = true;
          }
          else
          {
              //console.log('Non esiste soluzione')
          }
         
      }
      


      // decisione
      if(isSolution)
      {
          if(corsie_w)
              {
                  console.log('scelgo la direzione orizzontale');
                  console.log('numero di corsie orizzontali: ', n_zav_row);
                  console.log('numero zavorre per corsia: ', n_zav_per_row);
                  console.log('numero di zavorre massime: ', parseFloat(n_zav_row*n_zav_per_row));
              }      
              else
              {
                  console.log('scelgo la direzione verticale');
                  console.log('numero di corsie verticali: ', n_zav_col);
                  console.log('numero zavorre per corsia: ', n_zav_per_col);
                  console.log('numero di zavorre massime: ', parseFloat(n_zav_col*n_zav_per_col));
              }
      }
      else
      {
          console.log('Non esiste soluzione')
      }

      if(isSolution)
      {
         // devo piazzere i link:
         // prima creo nuovi nodi e poi i relativi link ==> lista_linkTraNodi.push(this.linkNodi
         if(corsie_h) // corsie verticali, quindi devo dividere lo spazio orizzontale secondo il numero di corsie
         {
            let n_punti = {};
            let step    = parseFloat(misRifZavorra.W+this.cost.w_profilo_interno);
            let pDx     = 0;
            let pSx     = 0;
          
          

            for(let i=0;i<n_zav_col;i++)
            {


              if((!this.checkType('A',1)&&!this.checkType('B',1)|| !this.checkType('C',1)&&!this.checkType('D',1)) )
              {
                 if((!this.checkType('A',1)&&!this.checkType('B',1)))
                  {
                      n_punti = ({x:parseFloat(stop_w.nodo.posizione.x-(++pDx)*step-this.cost.w_profilo_interno),
                                  y:parseFloat(start_h.nodo.posizione.y)});
                  }
                  else
                  {
                      n_punti   =({x:parseFloat(start_w.nodo.posizione.x+(++pSx)*step),
                                  y:parseFloat(start_h.nodo.posizione.y)});
                  }    
              }
              else
              {
                  if(i%2==0)
                  {
                      
                      n_punti   =({x:parseFloat(start_w.nodo.posizione.x+(++pSx)*step),
                                  y:parseFloat(start_h.nodo.posizione.y)});
                  }
                  else
                  {
                      
                      n_punti = ({x:parseFloat(stop_w.nodo.posizione.x-(++pDx)*step-this.cost.piastra_nodo),
                                  y:parseFloat(start_h.nodo.posizione.y)});
                  }
              }


              
              let cloned_node_start = this.cloneMyObj(start_h.nodo);
              cloned_node_start.etk = 'Z0_'+i;
              cloned_node_start.posizione.x = parseFloat(n_punti.x);
              cloned_node_start.isgamba = false;
              cloned_node_start.enabled = true;
              cloned_node_start.posType = 'TL';
              cloned_node_start.tipo = 'zavorramento';               
              cloned_node_start= this.paramNodo(cloned_node_start);
              cloned_node_start.svg += this.svgGoToPos(cloned_node_start.posizione, cloned_node_start.etk, this.svgNodoSEMPLICE(cloned_node_start));



              let cloned_node_stop  = this.cloneMyObj(stop_h.nodo);
              cloned_node_stop.etk = 'Z1_'+i;
              cloned_node_stop.posizione.x = parseFloat(n_punti.x);
              cloned_node_stop.isgamba = false;
              cloned_node_stop.enabled = true;
              cloned_node_stop.posType = 'BL';
              cloned_node_stop.tipo = 'zavorramento';
              cloned_node_stop = this.paramNodo(cloned_node_stop); 
              cloned_node_stop.svg += this.svgGoToPos(cloned_node_stop.posizione, cloned_node_stop.etk, this.svgNodoSEMPLICE(cloned_node_stop));
              
              
              this.lista_nodi.push(this.cloneMyObj(cloned_node_start));
              this.lista_nodi.push(this.cloneMyObj(cloned_node_stop));
              
              let tmpLink = this.getMainProfiles(this.linkNodi(cloned_node_start.etk, cloned_node_stop.etk, 'ver', 0, 'interno zavorre'));
              this.lista_linkTraNodi.push(tmpLink); 

              // piazzo già le zavorre
              let spaziatura_h = parseFloat((tmp_l_rif_h-misRifZavorra.H*n_zav_per_col/n_strati)/(n_zav_per_col/n_strati+1));
              //console.log('spaziatura_h: ', spaziatura_h);
              for(let j=0; j<n_zav_per_col/n_strati;j++)
              {
                  let pos_zavorra = {};


                  if((!this.checkType('A',1)&&!this.checkType('B',1)|| !this.checkType('C',1)&&!this.checkType('D',1)) )
                  {
                  if((!this.checkType('A',1)&&!this.checkType('B',1)))
                      {
                          pos_zavorra = {x:parseFloat(cloned_node_start.posizione.x+this.cost.w_profilo_interno),
                                      y:parseFloat(this.cost.w_profilo_interno+cloned_node_start.posizione.y+spaziatura_h+j*(misRifZavorra.H+spaziatura_h))};  
                      }
                      else
                      {
                          pos_zavorra = {x:parseFloat(cloned_node_start.posizione.x-misRifZavorra.W),
                                      y:parseFloat(this.cost.w_profilo_interno+cloned_node_start.posizione.y+spaziatura_h+j*(misRifZavorra.H+spaziatura_h))};
                      }    
                  }
                  else
                  {
                      if(i%2==0)
                          pos_zavorra = {x:parseFloat(cloned_node_start.posizione.x+this.cost.start_piastra_nodo-misRifZavorra.W),
                                         y:parseFloat(cloned_node_start.posizione.y+cloned_node_start.geometric[3].start_profiles[1]+spaziatura_h+j*(misRifZavorra.H+spaziatura_h))};
                      else
                          pos_zavorra = {x:parseFloat(cloned_node_start.posizione.x+this.cost.w_profilo_interno+this.cost.start_piastra_nodo),
                                         y:parseFloat(cloned_node_start.posizione.y+cloned_node_start.geometric[3].start_profiles[1]+spaziatura_h+j*(misRifZavorra.H+spaziatura_h))};   
                  } 





          

                  this.zavorramento.zavorre.push(this.creaZavorra({posizione:pos_zavorra,
                                                                   dimensione: misRifZavorra,
                                                                   margine: margineBallast,
                                                                   i:i, 
                                                                   j:j,
                                                                   totj:n_zav_per_col/n_strati,
                                                                   dir:'hor'
                                                                   }));                                                                      
              }
                

            }
            // carico porta zavorre 
            let porta_zavorra = n_zav_col*(n_zav_per_col/n_strati+1)*2;
            //console.log('colonne | zav_per_colonna | porta');
            //console.log(n_zav_col, n_zav_per_col, porta_zavorra);
            this.insert4BOM({name:'PORTA ZAVORRE', n: porta_zavorra,   gruppo:'ALL', lunghezza:0, codifica:'ALL'});
            
         }
         else
         {
            let n_punti = {};
            let step    = parseFloat(2+misRifZavorra.H+this.cost.w_profilo_interno);
            let pDW     = 0;
            let pUP     = 0;
          
          

            for(let i=0;i<n_zav_row;i++)
            {
              if((!this.checkType('A',1)&&!this.checkType('D',1)|| !this.checkType('B',1)&&!this.checkType('C',1)) )
              {
                 if((!this.checkType('A',1)&&!this.checkType('D',1)))
                  {
                      n_punti = ({x:parseFloat(stop_h.nodo.posizione.x),
                                  y:parseFloat(stop_h.nodo.posizione.y-(++pUP)*step-this.cost.piastra_su_profilo_esterno)});
                  }
                  else
                  {
                      n_punti   =({x:parseFloat(start_h.nodo.posizione.x),
                                  y:parseFloat(start_h.nodo.posizione.y+(++pDW)*step)});
                  }    
              }
              else
              {
                  if(i%2==0)
                  {
                      n_punti   =({x:parseFloat(start_h.nodo.posizione.x),
                                  y:parseFloat(start_h.nodo.posizione.y+(++pDW)*step)});
                  }
                  else
                  {
                      n_punti = ({x:parseFloat(stop_h.nodo.posizione.x),
                                  y:parseFloat(stop_h.nodo.posizione.y-(++pUP)*step-this.cost.piastra_su_profilo_esterno)});
                  }
              }
              
              
              let cloned_node_start = this.cloneMyObj(start_w.nodo);
              cloned_node_start.etk = 'Z3_'+i;
              cloned_node_start.posizione.y = parseFloat(n_punti.y);
              cloned_node_start.isgamba = false;
              cloned_node_start.enabled = true;                
              cloned_node_start.posType = 'TR';
              cloned_node_start.tipo    = 'zavorramento';               
              cloned_node_start         = this.paramNodo(cloned_node_start);               
              cloned_node_start.svg += this.svgGoToPos(cloned_node_start.posizione, cloned_node_start.etk, this.svgNodoVIRTUALE(cloned_node_start));


              let cloned_node_stop  = this.cloneMyObj(stop_w.nodo);
              cloned_node_stop.etk = 'Z4_'+i;
              cloned_node_stop.posizione.y = parseFloat(n_punti.y);
              cloned_node_stop.isgamba = false;
              cloned_node_stop.enabled = true;
              cloned_node_stop.posType = 'BR';
              cloned_node_stop.tipo = 'zavorramento';               
              cloned_node_stop= this.paramNodo(cloned_node_stop);                
              cloned_node_stop.svg += this.svgGoToPos(cloned_node_stop.posizione, cloned_node_stop.etk, this.svgNodoVIRTUALE(cloned_node_stop));
              
              
              
              this.lista_nodi.push(this.cloneMyObj(cloned_node_start));
              this.lista_nodi.push(this.cloneMyObj(cloned_node_stop));
              
              let tmpLink = this.getMainProfiles(this.linkNodi(cloned_node_start.etk, cloned_node_stop.etk, 'hor', 0, 'interno zavorre'));
              this.lista_linkTraNodi.push(tmpLink); 

              // piazzo già le zavorre
              let spaziatura_w = parseFloat((tmp_l_rif_w-misRifZavorra.W*n_zav_per_row/n_strati)/(n_zav_per_row/n_strati));
              console.log('spaziatura_w: ', spaziatura_w);
              for(let j=0; j<n_zav_per_row/n_strati;j++)
              {
                  let pos_zavorra = {};

                  if((!this.checkType('A',1)&&!this.checkType('D',1)|| !this.checkType('B',1)&&!this.checkType('C',1)) )
                  {
                      if((!this.checkType('A',1)&&!this.checkType('D',1)))
                      {
                         pos_zavorra = {y:parseFloat(cloned_node_start.posizione.y+this.cost.w_profilo_interno),
                                     x:parseFloat(this.cost.w_profilo_interno+cloned_node_start.posizione.x+spaziatura_w+j*(misRifZavorra.W+spaziatura_w))};   
                      }
                      else
                      {
                         pos_zavorra = {y:parseFloat(cloned_node_start.posizione.y-misRifZavorra.H),
                                     x:parseFloat(this.cost.w_profilo_interno+cloned_node_start.posizione.x+spaziatura_w+j*(misRifZavorra.W+spaziatura_w))};
                      }    
                  }
                  else
                  {
                      
                      if(i%2==0)
                          pos_zavorra = {y:parseFloat(cloned_node_start.posizione.y-misRifZavorra.H+3),
                                        x:parseFloat(this.cost.piastra_su_profilo_esterno+cloned_node_start.posizione.x+spaziatura_w+j*(misRifZavorra.W+spaziatura_w))};
                      else
                          pos_zavorra = {y:parseFloat(cloned_node_start.posizione.y+this.cost.w_profilo_interno+4),
                                        x:parseFloat(this.cost.piastra_su_profilo_esterno+cloned_node_start.posizione.x+spaziatura_w+j*(misRifZavorra.W+spaziatura_w))};   
                  }


                  this.zavorramento.zavorre.push(this.creaZavorra({posizione:pos_zavorra,
                                                                   dimensione: misRifZavorra,
                                                                   margine: margineBallast,
                                                                   i:i, 
                                                                   j:j,
                                                                   totj:n_zav_per_row/n_strati,
                                                                   dir:'ver'
                                                                   })); 
              }
                

            }

            let porta_zavorra = n_zav_row*(n_zav_per_row/n_strati+1)*2;
            this.insert4BOM({name:'PORTA ZAVORRE', n: porta_zavorra,   gruppo:'ALL', lunghezza:0, codifica:'ALL'});
         }



      }
          

     return isSolution;
  }

  CalcolaZavorramentoMaxi(){

      let isSolution          = false;
      this.zavorramento.zavorre=[];
      let n_strati            = 1;
      let tmp                 = this.cloneMyObj(this.smOBJ.optionals.pedana.ballast);
      this.smOBJ.optionals.pedana.ballast.WEIGHT  = 80;
      this.smOBJ.optionals.pedana.ballast.W       = 50;
      this.smOBJ.optionals.pedana.ballast.H       = 50;


      let peso_struttura_base = this.calcolaPesoAttuale();
      let areaVirtuale        = parseFloat(this.smOBJ.dimensioni.nominali.larghezza*this.smOBJ.dimensioni.nominali.sporgenza/10000);
      let pesoMQ              = (this.smOBJ.optionals.pedana.ballast.TIPO_BALLAST.split('-')[0]==4)?this.getAutomaticBallast():this.smOBJ.optionals.pedana.ballast.required;

      let peso_richiesto      = parseFloat(pesoMQ*areaVirtuale);

      if(peso_richiesto<=0) return 0;

      console.log('PESO RICHIESTO: '+peso_richiesto+' kg');
      this.zavorramento.peso_richiesto        = peso_richiesto;
      
      console.log('PESO STRUTTURA BASE: '+Math.floor(peso_struttura_base)+' kg');
      this.zavorramento.peso_struttura_base   = peso_struttura_base;

      let peso_da_aggiungere = parseFloat(peso_richiesto-peso_struttura_base);
      console.log('ZAVORRAMENTO RICHIESTO: '+Math.floor(peso_da_aggiungere)+' kg');
      this.zavorramento.peso_da_aggiungere    = peso_da_aggiungere;

      let n_zavorre = Math.ceil(peso_da_aggiungere/this.smOBJ.optionals.pedana.ballast.WEIGHT);
      console.log('N ZAVORRE RICHIESTE: '+Math.ceil(n_zavorre));
      this.zavorramento.n_zavorre             = n_zavorre;

      this.zavorramento.zavorre               = [];
       
      // se la zavorra non è quadrata, devo scegliere il lato di orientamento più conveniente (quello che, a parità di peso, richiede lunghezza totale minore 
      // in quanto questa è legata ai profili da aggiungere)
      let misRifZavorra = {W:0, H:0};
      let margineBallast= 1; //
      let maxDimW = parseFloat(n_zavorre/n_strati*(this.smOBJ.optionals.pedana.ballast.W+2*margineBallast)); 
      let maxDimH = parseFloat(n_zavorre/n_strati*(this.smOBJ.optionals.pedana.ballast.H+2*margineBallast));
      let lunghezza_minima = 0; 
      if(maxDimH<maxDimW)
      {
        lunghezza_minima = maxDimH;
        misRifZavorra = {W:parseFloat(this.smOBJ.optionals.pedana.ballast.W+2*margineBallast), H:parseFloat(this.smOBJ.optionals.pedana.ballast.H+2*margineBallast)};
      }
      else
      {
        lunghezza_minima = maxDimW;
        misRifZavorra = {W:parseFloat(this.smOBJ.optionals.pedana.ballast.H+2*margineBallast), H:parseFloat(this.smOBJ.optionals.pedana.ballast.W+2*margineBallast)};
      }

      // definisco le lunghezze disponibili:
      // se non c'è addossamento, le dimensioni disponibili sono quelle tra tra i nodi interni.
      // altrimenti mi metto parallalo al lato di addossamento
      let tmp_l_rif_h = parseFloat(0);
      let tmp_l_rif_w = parseFloat(0);

      // verticale
      let start_h                 = this.getInfoNodo('AD_A1*');
      //start_h.nodo.posizione.y    += start_h.nodo.geometric[3].start_profiles[1];  // 3 -> da sotto, 0->x, 1->y
      let stop_h                  = this.getInfoNodo('BC_A1*');
      //stop_h.nodo.posizione.y     += stop_h.nodo.geometric[1].start_profiles[1];  // 1 -> da sopra 
      tmp_l_rif_h                 = parseFloat(stop_h.nodo.posizione.y-start_h.nodo.posizione.y);
      tmp_l_rif_h                 -= 2*this.cost.piastra_su_profilo_esterno;  
      //tmp_l_rif_h                 -= start_h.nodo.geometric[3].start_profiles[1];  // 3 -> da sotto, 0->x, 1->y
      //tmp_l_rif_h                 += stop_h.nodo.geometric[1].start_profiles[1];  // 1 -> da sopra 

      //console.log(start_h.nodo.posizione);
      //console.log(stop_h.nodo.posizione);
      
       
      // orizzontale
      let start_w                 = this.getInfoNodo('AB_A1*');
      //start_w.nodo.posizione.x    += start_w.nodo.geometric[0].start_profiles[0];  // 0 -> da destra, 0->x, 1->y
      let stop_w                  = this.getInfoNodo('CD_A1*');
      //stop_w.nodo.posizione.x     += stop_w.nodo.geometric[2].start_profiles[0];  // 2 -> da sinistra 
      tmp_l_rif_w                 = parseFloat(stop_w.nodo.posizione.x-start_w.nodo.posizione.x);
      tmp_l_rif_w                 -=2*this.cost.piastra_su_profilo_esterno; 
      //tmp_l_rif_w                 -= start_w.nodo.geometric[0].start_profiles[0];  // 0 -> da destra, 0->x, 1->y
      //tmp_l_rif_w                 += stop_w.nodo.geometric[2].start_profiles[0];  // 2 -> da sinistra

      //console.log(start_w.nodo.posizione);
      //console.log(stop_w.nodo.posizione);

      //console.log('tmp_l_rif_w: ', tmp_l_rif_w);
      //console.log('tmp_l_rif_h: ', tmp_l_rif_h);

      if(!this.checkType('A',1)||!this.checkType('B',1)||!this.checkType('C',1)||!this.checkType('D',1))
      {
         if(!this.checkType('A',1)&&!this.checkType('D',1)|| !this.checkType('B',1)&&!this.checkType('C',1) )
          {
              // se ci sono gambe intermedie, mi attacco a quei profili interni, altrimenti devo estendermi verso fuori
              if(this.lista_nodi.filter((el)=>{return el.etk.split('_')[0]=='AB' && el.enabled;}).length<2)
                 start_w = (this.offset.d>0)?this.getInfoNodo('AB_A1-d*'):this.getInfoNodo('AB_A1*');
              else
                 start_w = this.getInfoNodo('AB_A1*');
          

              if(this.lista_nodi.filter((el)=>{return el.etk.split('_')[0]=='CD' && el.enabled;}).length<2)
                  stop_w = (this.offset.b>0)?this.getInfoNodo('CD_A1-b*'):this.getInfoNodo('CD_A1*'); 
              else
                  stop_w  = this.getInfoNodo('CD_A1*');

              
              //start_w.nodo.posizione.x += start_w.nodo.geometric[0].start_profiles[0];  // 0 -> da destra, 0->x, 1->y
              //stop_w.nodo.posizione.x  -= stop_w.nodo.geometric[2].start_profiles[0];  // 2 -> da sinistra 
              tmp_l_rif_w =  parseFloat(stop_w.nodo.posizione.x-start_w.nodo.posizione.x);
              tmp_l_rif_w -=2*this.cost.piastra_su_profilo_esterno;
              //tmp_l_rif_w -= start_w.nodo.geometric[0].start_profiles[0];  // 0 -> da destra, 0->x, 1->y
              //tmp_l_rif_w += stop_w.nodo.geometric[2].start_profiles[0];  // 2 -> da sinistra
                              
          }

          if(!this.checkType('A',1)&&!this.checkType('B',1)|| !this.checkType('C',1)&&!this.checkType('D',1) )
          {
              // se ci sono gambe intermedie, mi attacco a quei profili interni, altrimenti devo estendermi verso fuori
              if(this.lista_nodi.filter((el)=>{return el.etk.split('_')[0]=='AD' && el.enabled;}).length<2)
                  start_h = (this.offset.a>0)?this.getInfoNodo('AD_A1-a*'):this.getInfoNodo('AD_A1*');
              else
                  start_h = this.getInfoNodo('AD_A1*');
          

              if(this.lista_nodi.filter((el)=>{return el.etk.split('_')[0]=='BC' && el.enabled;}).length<2)
                  stop_h = (this.offset.b>0)?this.getInfoNodo('BC_A1-c*'):this.getInfoNodo('BC_A1*'); 
              else
                  stop_h  = this.getInfoNodo('BC_A1*');

              //start_h.nodo.posizione.y += start_h.nodo.geometric[3].start_profiles[1];  // 3 -> da sotto, 0->x, 1->y
              //stop_h.nodo.posizione.y  -= stop_h.nodo.geometric[1].start_profiles[1];  // 1 -> da sopra 
              tmp_l_rif_h = parseFloat(stop_h.nodo.posizione.y-start_h.nodo.posizione.y);
              tmp_l_rif_h -=2*this.cost.piastra_su_profilo_esterno;
              //tmp_l_rif_h -= start_h.nodo.geometric[3].start_profiles[1];  // 3 -> da sotto, 0->x, 1->y
              //tmp_l_rif_h += stop_h.nodo.geometric[1].start_profiles[1];  // 1 -> da sopra 
                              
          }  
      }

      // start_h, stop_h sono i nodi di riferimento per lo spazio verticale a disposizione
      // start_w, stop_w sono i nodi di riferimento per lo spazio orizzontale a disposizione

      //console.log('tmp_l_rif_w: ', tmp_l_rif_w);
      //console.log('tmp_l_rif_h: ', tmp_l_rif_h);


      // ci sto?
      let corsie_h      = true;
      let corsie_w      = true;


      // testo la soluzione più conveniente
      let n_zav_per_row = n_strati*Math.floor(tmp_l_rif_w/(misRifZavorra.W+this.cost.w_profilo_interno));
      let n_zav_row     = Math.ceil(n_zavorre/n_zav_per_row);
      console.log('n_zav_per_row: ', n_zav_per_row);
      console.log('n_zav_row: ', n_zav_row);


      // quante zavorre ci stanno per colonna
      let n_zav_per_col = n_strati*Math.floor(tmp_l_rif_h/(misRifZavorra.H+this.cost.w_profilo_interno));
      // quante colonne mi servirebbero
      let n_zav_col     = Math.ceil(n_zavorre/n_zav_per_col);

      console.log('n_zav_per_col: ', n_zav_per_col);
      console.log('n_zav_col: ', n_zav_col);
      
      if(n_zav_col*(misRifZavorra.W+this.cost.w_profilo_interno)>tmp_l_rif_w)
          {
              console.log('Non ci sto con il numero di colonne');
              console.log(n_zav_col*(misRifZavorra.W+this.cost.w_profilo_interno), tmp_l_rif_w);
              corsie_h = false; 
          } 

      if(n_zav_row*(misRifZavorra.H+this.cost.w_profilo_interno)>tmp_l_rif_h)
          {
              console.log('Non ci sto con il numero di righe');
              console.log(n_zav_row*(misRifZavorra.H+this.cost.w_profilo_interno), tmp_l_rif_h);
              corsie_w = false; 
          } 
      

      

      /* de-commentare questa parte se voglio bilanciare le zavorre
      // devo privilegiare un numero di corsie pari, a meno di non essere in un adossamento
      if(this.checkType('A',1)&&this.checkType('B',1)&&this.checkType('C',1)&&this.checkType('D',1))
      {
          let tmp_n_zav_row         = (n_zav_row%2==0)?n_zav_row:n_zav_row+1;
          let tmp_n_zav_col         = (n_zav_col%2==0)?n_zav_col:n_zav_col+1;
          // ci sto?
          if(tmp_n_zav_col*(misRifZavorra.W+this.cost.w_profilo_interno)<tmp_l_rif_w) n_zav_col = tmp_n_zav_col;
          if(tmp_n_zav_row*(misRifZavorra.H+this.cost.w_profilo_interno)<tmp_l_rif_h) n_zav_row = tmp_n_zav_row;
      }
      */    



      // addossate su AD, BC       
      if(!this.checkType('A',1)&&!this.checkType('D',1)|| !this.checkType('B',1)&&!this.checkType('C',1) )
          {
              corsie_h = false;
              corsie_w = true;
          }    
      
      // addossate su AB, CD    
      if(!this.checkType('A',1)&&!this.checkType('B',1)|| !this.checkType('C',1)&&!this.checkType('D',1) )
          {
              corsie_w = false;
              corsie_h = true;
          }


      // ci sto?

      //console.log('corsie_h ', corsie_h);
      //console.log('corsie_w ', corsie_w);

      if(n_zav_col*(misRifZavorra.W+this.cost.w_profilo_interno)>tmp_l_rif_w && corsie_h)
          {
              console.log('Non ci sto con il numero di colonne');
              console.log(n_zav_col*(misRifZavorra.W+this.cost.w_profilo_interno), tmp_l_rif_w);                
              corsie_h = false;    
          }
       
          
           
      if(n_zav_row*(misRifZavorra.H+this.cost.w_profilo_interno)>tmp_l_rif_h && corsie_w)
          {
              console.log('Non ci sto con il numero di righe');
              console.log(n_zav_row*(misRifZavorra.H+this.cost.w_profilo_interno), tmp_l_rif_h); 
              corsie_w = false;           
          }
      

              


      //console.log('corsie_h ', corsie_h);
      //console.log('corsie_w ', corsie_w);
      //console.log('n_zav_col*tmp_l_rif_h ', n_zav_col*tmp_l_rif_h);
      //console.log('n_zav_row*tmp_l_rif_w ', n_zav_row*tmp_l_rif_w);

      // ottimizzazione costo alluminio
      if(n_zav_col*tmp_l_rif_h<=n_zav_row*tmp_l_rif_w && corsie_h) 
      {
          corsie_w = false;
          corsie_h = true;
          isSolution = true;
      }
      else
      {
          if(corsie_w)
          {
              corsie_h = false;
              corsie_w = true;
              isSolution = true;
          }
          else
          {
              //console.log('Non esiste soluzione')
          }
         
      }
      


      // decisione
      if(isSolution)
      {
          if(corsie_w)
              {
                  console.log('scelgo la direzione orizzontale');
                  console.log('numero di corsie orizzontali: ', n_zav_row);
                  console.log('numero zavorre per corsia: ', n_zav_per_row);
                  console.log('numero di zavorre massime: ', parseFloat(n_zav_row*n_zav_per_row));
              }      
              else
              {
                  console.log('scelgo la direzione verticale');
                  console.log('numero di corsie verticali: ', n_zav_col);
                  console.log('numero zavorre per corsia: ', n_zav_per_col);
                  console.log('numero di zavorre massime: ', parseFloat(n_zav_col*n_zav_per_col));
              }
      }
      else
      {
          console.log('Non esiste soluzione')
      }

      if(isSolution)
      {
         // devo piazzere i link:
         // prima creo nuovi nodi e poi i relativi link ==> lista_linkTraNodi.push(this.linkNodi
         if(corsie_h) // corsie verticali, quindi devo dividere lo spazio orizzontale secondo il numero di corsie
         {
            let n_punti = {};
            let step    = parseFloat(misRifZavorra.W+this.cost.w_profilo_interno);
            let pDx     = 0;
            let pSx     = 0;
          
          

            for(let i=0;i<n_zav_col;i++)
            {


              if((!this.checkType('A',1)&&!this.checkType('B',1)|| !this.checkType('C',1)&&!this.checkType('D',1)) )
              {
                 if((!this.checkType('A',1)&&!this.checkType('B',1)))
                  {
                      n_punti = ({x:parseFloat(stop_w.nodo.posizione.x-(++pDx)*step-this.cost.w_profilo_interno),
                                  y:parseFloat(start_h.nodo.posizione.y)});
                  }
                  else
                  {
                      n_punti   =({x:parseFloat(start_w.nodo.posizione.x+(++pSx)*step),
                                  y:parseFloat(start_h.nodo.posizione.y)});
                  }    
              }
              else
              {
                  if(i%2==0)
                  {
                      
                      n_punti   =({x:parseFloat(start_w.nodo.posizione.x+(++pSx)*step),
                                  y:parseFloat(start_h.nodo.posizione.y)});
                  }
                  else
                  {
                      
                      n_punti = ({x:parseFloat(stop_w.nodo.posizione.x-(++pDx)*step-this.cost.piastra_nodo),
                                  y:parseFloat(start_h.nodo.posizione.y)});
                  }
              }


              
              let cloned_node_start = this.cloneMyObj(start_h.nodo);
              cloned_node_start.etk = 'Z0_'+i;
              cloned_node_start.posizione.x = parseFloat(n_punti.x);
              cloned_node_start.isgamba = false;
              cloned_node_start.enabled = true;
              cloned_node_start.posType = 'TL';
              cloned_node_start.tipo = 'zavorramento';               
              cloned_node_start= this.paramNodo(cloned_node_start);
              cloned_node_start.svg += this.svgGoToPos(cloned_node_start.posizione, cloned_node_start.etk, this.svgNodoSEMPLICE(cloned_node_start));



              let cloned_node_stop  = this.cloneMyObj(stop_h.nodo);
              cloned_node_stop.etk = 'Z1_'+i;
              cloned_node_stop.posizione.x = parseFloat(n_punti.x);
              cloned_node_stop.isgamba = false;
              cloned_node_stop.enabled = true;
              cloned_node_stop.posType = 'BL';
              cloned_node_stop.tipo = 'zavorramento';
              cloned_node_stop = this.paramNodo(cloned_node_stop); 
              cloned_node_stop.svg += this.svgGoToPos(cloned_node_stop.posizione, cloned_node_stop.etk, this.svgNodoSEMPLICE(cloned_node_stop));
              
              
              this.lista_nodi.push(this.cloneMyObj(cloned_node_start));
              this.lista_nodi.push(this.cloneMyObj(cloned_node_stop));
              
              let tmpLink = this.getMainProfiles(this.linkNodi(cloned_node_start.etk, cloned_node_stop.etk, 'ver', 0, 'interno zavorre'));
              this.lista_linkTraNodi.push(tmpLink); 

              // piazzo già le zavorre
              let spaziatura_h = parseFloat((tmp_l_rif_h-misRifZavorra.H*n_zav_per_col/n_strati)/(n_zav_per_col/n_strati+1));
              //console.log('spaziatura_h: ', spaziatura_h);
              for(let j=0; j<n_zav_per_col/n_strati;j++)
              {
                  let pos_zavorra = {};


                  if((!this.checkType('A',1)&&!this.checkType('B',1)|| !this.checkType('C',1)&&!this.checkType('D',1)) )
                  {
                  if((!this.checkType('A',1)&&!this.checkType('B',1)))
                      {
                          pos_zavorra = {x:parseFloat(cloned_node_start.posizione.x+this.cost.w_profilo_interno),
                                      y:parseFloat(this.cost.w_profilo_interno+cloned_node_start.posizione.y+spaziatura_h+j*(misRifZavorra.H+spaziatura_h))};  
                      }
                      else
                      {
                          pos_zavorra = {x:parseFloat(cloned_node_start.posizione.x-misRifZavorra.W),
                                      y:parseFloat(this.cost.w_profilo_interno+cloned_node_start.posizione.y+spaziatura_h+j*(misRifZavorra.H+spaziatura_h))};
                      }    
                  }
                  else
                  {
                      if(i%2==0)
                          pos_zavorra = {x:parseFloat(cloned_node_start.posizione.x+this.cost.start_piastra_nodo-misRifZavorra.W),
                                         y:parseFloat(cloned_node_start.posizione.y+cloned_node_start.geometric[3].start_profiles[1]+spaziatura_h+j*(misRifZavorra.H+spaziatura_h))};
                      else
                          pos_zavorra = {x:parseFloat(cloned_node_start.posizione.x+this.cost.w_profilo_interno+this.cost.start_piastra_nodo),
                                         y:parseFloat(cloned_node_start.posizione.y+cloned_node_start.geometric[3].start_profiles[1]+spaziatura_h+j*(misRifZavorra.H+spaziatura_h))};   
                  } 





          

                  this.zavorramento.zavorre.push(this.creaZavorra({posizione:pos_zavorra,
                                                                   dimensione: misRifZavorra,
                                                                   margine: margineBallast,
                                                                   i:i, 
                                                                   j:j,
                                                                   totj:n_zav_per_col/n_strati,
                                                                   dir:'hor'
                                                                   }));                                                                      
              }
                

            }
            // carico porta zavorre 
            let porta_zavorra = n_zav_col*(n_zav_per_col/n_strati+1)*2;
            //console.log('colonne | zav_per_colonna | porta');
            //console.log(n_zav_col, n_zav_per_col, porta_zavorra);
            this.insert4BOM({name:'PORTA ZAVORRE', n: porta_zavorra,   gruppo:'ALL', lunghezza:0, codifica:'ALL'});
            
         }
         else
         {
            let n_punti = {};
            let step    = parseFloat(2+misRifZavorra.H+this.cost.w_profilo_interno);
            let pDW     = 0;
            let pUP     = 0;
          
          

            for(let i=0;i<n_zav_row;i++)
            {
              if((!this.checkType('A',1)&&!this.checkType('D',1)|| !this.checkType('B',1)&&!this.checkType('C',1)) )
              {
                 if((!this.checkType('A',1)&&!this.checkType('D',1)))
                  {
                      n_punti = ({x:parseFloat(stop_h.nodo.posizione.x),
                                  y:parseFloat(stop_h.nodo.posizione.y-(++pUP)*step-this.cost.piastra_su_profilo_esterno)});
                  }
                  else
                  {
                      n_punti   =({x:parseFloat(start_h.nodo.posizione.x),
                                  y:parseFloat(start_h.nodo.posizione.y+(++pDW)*step)});
                  }    
              }
              else
              {
                  if(i%2==0)
                  {
                      n_punti   =({x:parseFloat(start_h.nodo.posizione.x),
                                  y:parseFloat(start_h.nodo.posizione.y+(++pDW)*step)});
                  }
                  else
                  {
                      n_punti = ({x:parseFloat(stop_h.nodo.posizione.x),
                                  y:parseFloat(stop_h.nodo.posizione.y-(++pUP)*step-this.cost.piastra_su_profilo_esterno)});
                  }
              }
              
              
              let cloned_node_start = this.cloneMyObj(start_w.nodo);
              cloned_node_start.etk = 'Z3_'+i;
              cloned_node_start.posizione.y = parseFloat(n_punti.y);
              cloned_node_start.isgamba = false;
              cloned_node_start.enabled = true;                
              cloned_node_start.posType = 'TR';
              cloned_node_start.tipo    = 'zavorramento';               
              cloned_node_start         = this.paramNodo(cloned_node_start);               
              cloned_node_start.svg += this.svgGoToPos(cloned_node_start.posizione, cloned_node_start.etk, this.svgNodoVIRTUALE(cloned_node_start));


              let cloned_node_stop  = this.cloneMyObj(stop_w.nodo);
              cloned_node_stop.etk = 'Z4_'+i;
              cloned_node_stop.posizione.y = parseFloat(n_punti.y);
              cloned_node_stop.isgamba = false;
              cloned_node_stop.enabled = true;
              cloned_node_stop.posType = 'BR';
              cloned_node_stop.tipo = 'zavorramento';               
              cloned_node_stop= this.paramNodo(cloned_node_stop);                
              cloned_node_stop.svg += this.svgGoToPos(cloned_node_stop.posizione, cloned_node_stop.etk, this.svgNodoVIRTUALE(cloned_node_stop));
              
              
              
              this.lista_nodi.push(this.cloneMyObj(cloned_node_start));
              this.lista_nodi.push(this.cloneMyObj(cloned_node_stop));
              
              let tmpLink = this.getMainProfiles(this.linkNodi(cloned_node_start.etk, cloned_node_stop.etk, 'hor', 0, 'interno zavorre'));
              this.lista_linkTraNodi.push(tmpLink); 

              // piazzo già le zavorre
              let spaziatura_w = parseFloat((tmp_l_rif_w-misRifZavorra.W*n_zav_per_row/n_strati)/(n_zav_per_row/n_strati));
              console.log('spaziatura_w: ', spaziatura_w);
              for(let j=0; j<n_zav_per_row/n_strati;j++)
              {
                  let pos_zavorra = {};

                  if((!this.checkType('A',1)&&!this.checkType('D',1)|| !this.checkType('B',1)&&!this.checkType('C',1)) )
                  {
                      if((!this.checkType('A',1)&&!this.checkType('D',1)))
                      {
                         pos_zavorra = {y:parseFloat(cloned_node_start.posizione.y+this.cost.w_profilo_interno),
                                     x:parseFloat(this.cost.w_profilo_interno+cloned_node_start.posizione.x+spaziatura_w+j*(misRifZavorra.W+spaziatura_w))};   
                      }
                      else
                      {
                         pos_zavorra = {y:parseFloat(cloned_node_start.posizione.y-misRifZavorra.H),
                                     x:parseFloat(this.cost.w_profilo_interno+cloned_node_start.posizione.x+spaziatura_w+j*(misRifZavorra.W+spaziatura_w))};
                      }    
                  }
                  else
                  {
                      
                      if(i%2==0)
                          pos_zavorra = {y:parseFloat(cloned_node_start.posizione.y-misRifZavorra.H+3),
                                        x:parseFloat(this.cost.piastra_su_profilo_esterno+cloned_node_start.posizione.x+spaziatura_w+j*(misRifZavorra.W+spaziatura_w))};
                      else
                          pos_zavorra = {y:parseFloat(cloned_node_start.posizione.y+this.cost.w_profilo_interno+4),
                                        x:parseFloat(this.cost.piastra_su_profilo_esterno+cloned_node_start.posizione.x+spaziatura_w+j*(misRifZavorra.W+spaziatura_w))};   
                  }


                  this.zavorramento.zavorre.push(this.creaZavorra({posizione:pos_zavorra,
                                                                   dimensione: misRifZavorra,
                                                                   margine: margineBallast,
                                                                   i:i, 
                                                                   j:j,
                                                                   totj:n_zav_per_row/n_strati,
                                                                   dir:'ver'
                                                                   })); 
              }
                

            }

            let porta_zavorra = n_zav_row*(n_zav_per_row/n_strati+1)*2;
            this.insert4BOM({name:'PORTA ZAVORRE', n: porta_zavorra,   gruppo:'ALL', lunghezza:0, codifica:'ALL'});
         }



      }
          
     //this.smOBJ.optionals.pedana.ballast.WEIGHT = tmp;
     return isSolution;
  }


disegna_TVALL_TUBOLARE_MOD(info, inversione, tipo, cavo4teste=false)
{
let dimensioni = {w:144.34, h:16.097}; //width="144.34mm" height="16.097mm"
let invH = 1;
let invW = 1;
if(inversione.W == true) {invW = -1;}
if(inversione.H == true) {invH = -1;}

info.scale = 1;
console.log(this.cloneMyObj(info));

////console.log(info.scale);
//info.scale *= (info.scale<1)?0.65:1.3;
//let info = setupCurrentScale(dimensioni, dim_target);
//let info = {pos:{x:0, y:0}, scale:1};
let sDis = '';
sDis += '<g id="TVALL" >';
//sDis += this.ScriviLabel(info.pos, etk, obj);
sDis += '<g transform="translate('+parseFloat(info.pos.x-0*dimensioni.w/2*info.scale*invW)+' '+parseFloat(info.pos.y-0*dimensioni.h/2*info.scale*invH)+')"><g transform="scale('+info.scale+')">';
sDis += '<g transform="scale('+invW+','+invH+')">';
sDis +='<g transform="translate(-25.122 -23.06)"><rect x="25.137" y="23.075" width="144.31" height="16.067" style="fill:#999999;stroke-width:.029755;stroke:#000000"/><g transform="translate(106.13 -.021793)"><rect x="24.949" y="23.998" width="37.307" height="14.266" style="fill:#999999;stroke-width:.11692;stroke:#000000"/><g transform="translate(-1.0583 .10078)"><circle cx="26.872" cy="24.833" r=".73022" style="fill:#666666;stroke-width:.1;stroke:#666666"/><circle cx="44.689" cy="24.833" r=".73022" style="fill:#666666;stroke-width:.1;stroke:#666666"/><circle cx="62.507" cy="24.833" r=".73022" style="fill:#666666;stroke-width:.1;stroke:#666666"/></g><g transform="translate(-1.0583 12.331)"><circle cx="26.872" cy="24.833" r=".73022" style="fill:#666666;stroke-width:.1;stroke:#666666"/><circle cx="44.689" cy="24.833" r=".73022" style="fill:#666666;stroke-width:.1;stroke:#666666"/><circle cx="62.507" cy="24.833" r=".73022" style="fill:#666666;stroke-width:.1;stroke:#666666"/></g><g transform="translate(-20.638 .52917)"><rect x="47.747" y="24.38" width="12.797" height="4.0346" style="fill:#999999;stroke-width:.081648;stroke:#000000"/><circle cx="54.839" cy="25.594" r=".73022" style="fill:#ececec;stroke-width:.1;stroke:#666666"/><circle cx="56.701" cy="25.594" r=".73022" style="fill:#ececec;stroke-width:.1;stroke:#666666"/><circle cx="58.563" cy="25.594" r=".73022" style="fill:#ececec;stroke-width:.1;stroke:#666666"/><g transform="matrix(1.6364 0 0 .96429 -3.3427 -18.837)" style="stroke-width:.071553"><rect x="31.545" y="45.274" width=".73022" height="1.6065" style="fill:#ececec;stroke-width:.071553;stroke:#000000"/><rect x="32.276" y="45.274" width=".73022" height="1.6065" style="fill:#ececec;stroke-width:.071553;stroke:#000000"/><rect x="33.006" y="45.274" width=".73022" height="1.6065" style="fill:#ececec;stroke-width:.071553;stroke:#000000"/><rect x="33.736" y="45.274" width=".73022" height="1.6065" style="fill:#ececec;stroke-width:.071553;stroke:#000000"/></g></g><rect x="-80.469" y="23.624" width="103.64" height="8.9525" style="fill:#999999;stroke-width:.075215;stroke:#000000"/><g transform="translate(-.58432)"><rect x="-64.874" y="31.52" width="7.7358" height="1.065" style="fill:#999999;stroke-width:.1;stroke:#000000"/><rect x="1.0128" y="31.52" width="7.7358" height="1.065" style="fill:#999999;stroke-width:.1;stroke:#000000"/><rect x="-31.931" y="31.52" width="7.7358" height="1.065" style="fill:#999999;stroke-width:.1;stroke:#000000"/></g></g>';
let sDisLED   = '<g transform="matrix(-1 0 0 1 193.61 -40.261)"><path d="m24.149 68.999h-10.363v-9.6351l-0.09354-7.6706" style="fill:none;stroke:#000000"/><ellipse cx="13.879" cy="50.01" rx="1.601" ry="1.601" style="fill:#000000;stroke-width:.97842;stroke:#000000"/></g>';
let sDisSTRIP = '<g transform="rotate(180 96.904 52.824)"><path d="m24.149 68.999h-10.363v-9.6351l-0.09354-27.094" style="fill:none;stroke:#000000"/><ellipse cx="13.806" cy="32.85" rx="1.601" ry="1.601" style="fill:#000000;stroke-width:.97842;stroke:#000000"/><ellipse cx="13.806" cy="41.981" rx="1.601" ry="1.601" style="fill:#000000;stroke-width:.97842;stroke:#000000"/><ellipse cx="13.806" cy="51.112" rx="1.601" ry="1.601" style="fill:#000000;stroke-width:.97842;stroke:#000000"/><ellipse cx="13.806" cy="60.243" rx="1.601" ry="1.601" style="fill:#000000;stroke-width:.97842;stroke:#000000"/></g>';
let sDisMOT   = '<g transform="matrix(-1 0 0 1 189.37 -41.319)"><g transform="translate(.52917 -2.1167)"><path d="m19.398 68.999h-5.6127v-9.6351" style="fill:none;stroke:#000000"/><ellipse cx="13.879" cy="60.593" rx="1.601" ry="1.601" style="fill:#000000;stroke-width:.97842;stroke:#000000"/></g></g>';
let sDisExtra = '<g transform="matrix(-1 0 0 1 204.19 -40.184)"><path d="m34.512 68.999h-20.726v-9.6351l-0.09354-27.094" style="fill:none;stroke:#0000ff"/><ellipse cx="13.806" cy="32.85" rx="1.601" ry="1.601" style="fill:#0000ff;stroke-width:.97842;stroke:#0000ff"/><ellipse cx="13.806" cy="41.981" rx="1.601" ry="1.601" style="fill:#0000ff;stroke-width:.97842;stroke:#0000ff"/><ellipse cx="13.806" cy="51.112" rx="1.601" ry="1.601" style="fill:#0000ff;stroke-width:.97842;stroke:#0000ff"/><ellipse cx="13.806" cy="60.243" rx="1.601" ry="1.601" style="fill:#0000ff;stroke-width:.97842;stroke:#0000ff"/></g>';

let sDisPOWER = '<circle cx="'+parseFloat(25)+'" cy="'+parseFloat(32)+'" r="0.31" stroke="black" stroke-width=".1" fill="black" />';
sDisPOWER     += '<circle cx="'+parseFloat(5)+'" cy="'+parseFloat(32)+'" r="2" stroke="black" stroke-width=".1" fill="black" />';
sDisPOWER     += '<line x1="'+parseFloat(5)+'" y1="'+parseFloat(32)+'" x2="'+parseFloat(25)+'" y2="'+parseFloat(32)+'" style="stroke:black;stroke-width:" />';
sDisPOWER     += '<text x="'+parseFloat(15)+'" y="'+parseFloat(25)+'" fill="black" font-size="0.51em" text-anchor="middle" alignment-baseline="middle" ></text>';
sDis += sDisMOT+sDisPOWER;
if(cavo4teste==true) sDis += sDisSTRIP;
sDis = (tipo==1)?(sDis+sDisLED):(sDis+sDisExtra);
sDis += '</g>';
sDis += '</g></g></g>';
sDis += '</g>';

let out = {};
out.sDis = sDis;
out.connettoreSX1 = {x:parseFloat(info.pos.x-dimensioni.w/2*info.scale), y:parseFloat(info.pos.y+0.30*dimensioni.h*info.scale)};
out.connettoreSX2 = {x:parseFloat(info.pos.x-dimensioni.w/2*info.scale), y:parseFloat(info.pos.y-0.30*dimensioni.h*info.scale)};

let uscite = [{x:148.622, y:-7.060}, {x:153.442, y:-14.435}, {x:153.442, y:21.195}, {x:153.442, y:30.327}, {x:153.442, y:39.455}, {x:153.442, y:48.583},
              {x:163.847, y:-31.81}, {x:163.847, y:-22.691}, {x:163.847, y:-13.527}, {x:163.847, y:-4.63}
             ];
if(inversione== true) // minverto uscite 2 e 3
    uscite = [{x:148.622, y:-7.060}, {x:153.442, y:-14.435}, {x:153.442, y:30.327}, {x:153.442, y:21.195}, {x:153.442, y:39.455}, {x:153.442, y:48.583},
              {x:163.847, y:-31.81}, {x:163.847, y:-22.691}, {x:163.847, y:-13.527}, {x:163.847, y:-4.63}
             ];
for(let i=0;i<uscite.length;i++)
{
  uscite[i].x = parseFloat(info.pos.x+uscite[i].x*info.scale*invW-dimensioni.w/2*info.scale*invW);
  uscite[i].y = parseFloat(info.pos.y+uscite[i].y*info.scale*invH-dimensioni.h/2*info.scale*invH);
}
out.uscite = uscite.slice(0);

let ingressi = [{x:-23, y:9}];

for(let i=0;i<ingressi.length;i++)
{
  ingressi[i].x = parseFloat(info.pos.x+ingressi[i].x*info.scale*invW-dimensioni.w/2*info.scale*invW);
  ingressi[i].y = parseFloat(info.pos.y+ingressi[i].y*info.scale*invH-dimensioni.h/2*info.scale*invH);
}

out.ingressi = ingressi.slice(0);

return out;
}

disegna_CENTRALINA_GENERICA(info, inversione, tipo)
{
let invW = 1;
let invH = 1;
if(inversione==true)
{
  invH = -1;
  invW = -1;
}
let dimensioni = {w:152.58, h:64.464}; //width="152.58mm" height="64.464mm"
//info.scale = 1;

//info.scale *= 0.65;
//let info = setupCurrentScale(dimensioni, dim_target);
//let info = {pos:{x:0, y:0}, scale:1};
let sDis = '';
sDis += '<g id="CU" >';
//sDis += this.ScriviLabel(info.pos, etk, obj);
sDis += '<g transform="translate('+parseFloat(info.pos.x-dimensioni.w/2*info.scale*invW)+' '+parseFloat(info.pos.y-dimensioni.h/2*info.scale*invH)+')"><g transform="scale('+info.scale+')">';
sDis += '<g transform="scale('+invW+','+invH+')">';
sDis += '<g transform="translate(-11.092 -40.596)"><g transform="matrix(-1 0 0 1 234.26 -.37418)"><g transform="translate(66.649 .012177)"><rect x="19.414" y="64.439" width="54.939" height="19.001" rx="1" ry="1" style="fill:#cccccc;stroke-width:.1;stroke:#000000"/><g transform="translate(.52917 .02781)"><circle cx="20.827" cy="65.83" r="1.1683" style="fill:#666666;stroke-width:.1;stroke:#000000"/><circle cx="20.827" cy="81.995" r="1.1683" style="fill:#666666;stroke-width:.1;stroke:#000000"/></g><g transform="translate(51.653 .02781)"><circle cx="20.827" cy="65.83" r="1.1683" style="fill:#666666;stroke-width:.1;stroke:#000000"/><circle cx="20.827" cy="81.995" r="1.1683" style="fill:#666666;stroke-width:.1;stroke:#000000"/></g></g><path d="m141.05 73.952h15.189" style="fill:none;stroke-width:2;stroke:#000000"/><g transform="matrix(.68243 0 0 .68243 141.88 -3.3198)"><rect x="21.067" y="96.965" width="98.105" height="32.534" rx="1" ry="1" style="fill:#808080;stroke-width:.029351;stroke:#000000"/><rect x="28.595" y="97.561" width="83.048" height="31.342" style="fill:#b3b3b3;stroke-width:.026506;stroke:#000000"/><g transform="translate(.52917 .85)"><g transform="translate(-34.336 -14.684)"><circle cx="56.29" cy="116.81" r="2.9766" style="fill:#ffffff;stroke-width:.026458;stroke:#ffffff"/><rect x="50.681" y="113.85" width="6.7453" height="5.9178" rx=".99976" ry="1.147" style="fill:#ffffff;stroke-width:.028333;stroke:#ffffff"/></g><g transform="translate(-34.336 5.8208)"><circle cx="56.29" cy="116.81" r="2.9766" style="fill:#ffffff;stroke-width:.026458;stroke:#ffffff"/><rect x="50.681" y="113.85" width="6.7453" height="5.9178" rx=".99976" ry="1.147" style="fill:#ffffff;stroke-width:.028333;stroke:#ffffff"/></g></g><g transform="matrix(-1 0 0 1 139.83 .85)"><g transform="translate(-34.336 -14.684)"><circle cx="56.29" cy="116.81" r="2.9766" style="fill:#ffffff;stroke-width:.026458;stroke:#ffffff"/><rect x="50.681" y="113.85" width="6.7453" height="5.9178" rx=".99976" ry="1.147" style="fill:#ffffff;stroke-width:.028333;stroke:#ffffff"/></g><g transform="translate(-34.336 5.8208)"><circle cx="56.29" cy="116.81" r="2.9766" style="fill:#ffffff;stroke-width:.026458;stroke:#ffffff"/><rect x="50.681" y="113.85" width="6.7453" height="5.9178" rx=".99976" ry="1.147" style="fill:#ffffff;stroke-width:.028333;stroke:#ffffff"/></g></g></g>';

let connessione1 = '<g transform="translate(61.863 -7.6769)">';
connessione1 += '<path d="m24.149 81.254-10.363-0.04677v-21.843l-0.09354-8.5727" style="fill:none;stroke:#000000"/>';
connessione1 += '<ellipse cx="13.806" cy="51.112" rx="1.601" ry="1.601" style="fill:#000000;stroke-width:.97842;stroke:#000000"/>';
connessione1 += '<ellipse cx="13.806" cy="60.243" rx="1.601" ry="1.601" style="fill:#000000;stroke-width:.97842;stroke:#000000"/>';
connessione1 += '</g>';



let connessione2 = '<g transform="matrix(1 0 0 -1 61.863 154.83)">';
connessione2 += '<path d="m24.149 81.254-10.363-0.04677v-21.843l-0.09354-8.5727" style="fill:none;stroke:#000000"/>';
connessione2 += '<ellipse cx="13.806" cy="51.112" rx="1.601" ry="1.601" style="fill:#000000;stroke-width:.97842;stroke:#000000"/>';
connessione2 += '<ellipse cx="13.806" cy="60.243" rx="1.601" ry="1.601" style="fill:#000000;stroke-width:.97842;stroke:#000000"/>';
connessione2 += '</g>';

//if(tipo==0 || tipo==-1) sDis += connessione1;
//if(tipo==0 || tipo==1)  sDis += connessione2;
sDis += '</g></g>';
/*
let sDisPOWER = '<circle cx="'+parseFloat(0)+'" cy="'+parseFloat(32)+'" r="0.31" stroke="black" stroke-width=".1" fill="black" />';
sDisPOWER     += '<circle cx="'+parseFloat(-30)+'" cy="'+parseFloat(32)+'" r="2" stroke="black" stroke-width=".1" fill="black" />';
sDisPOWER     += '<line x1="'+parseFloat(-30)+'" y1="'+parseFloat(32)+'" x2="'+parseFloat(0)+'" y2="'+parseFloat(32)+'" style="stroke:black;stroke-width:2" />';
sDisPOWER     += '<text x="'+parseFloat(-15)+'" y="'+parseFloat(25)+'" fill="black" font-size="0.51em" text-anchor="middle" alignment-baseline="middle" ></text>';
*/
let sDisPOWER = '<circle cx="'+parseFloat(0)+'" cy="'+parseFloat(32)+'" r="0.31" stroke="black" stroke-width=".1" fill="black" />';
sDisPOWER     += '<circle cx="'+parseFloat(-30)+'" cy="'+parseFloat(32)+'" r="0.31" stroke="black" stroke-width=".1" fill="black" />';
sDisPOWER     += '<circle cx="'+parseFloat(-30)+'" cy="'+parseFloat(11)+'" r="2" stroke="black" stroke-width=".1" fill="black" />';

sDisPOWER     += '<line x1="'+parseFloat(-30)+'" y1="'+parseFloat(32)+'" x2="'+parseFloat(0)+'" y2="'+parseFloat(32)+'" style="stroke:black;stroke-width:2" />';
sDisPOWER     += '<line x1="'+parseFloat(-30)+'" y1="'+parseFloat(32)+'" x2="'+parseFloat(-30)+'" y2="'+parseFloat(11)+'" style="stroke:black;stroke-width:2" />';

sDisPOWER     += '<text x="'+parseFloat(-15)+'" y="'+parseFloat(25)+'" fill="black" font-size="0.51em" text-anchor="middle" alignment-baseline="middle" ></text>';
sDis += sDisPOWER;


let sDis1Out = '<circle cx="'+parseFloat(140)+'" cy="'+parseFloat(32)+'" r="0.31" stroke="black" stroke-width=".1" fill="black" />';
sDis1Out     += '<circle cx="'+parseFloat(170)+'" cy="'+parseFloat(32)+'" r="0.31" stroke="black" stroke-width=".1" fill="black" />';
sDis1Out     += '<circle cx="'+parseFloat(170)+'" cy="'+parseFloat(53)+'" r="2" stroke="black" stroke-width=".1" fill="black" />';

sDis1Out     += '<line x1="'+parseFloat(140)+'" y1="'+parseFloat(32)+'" x2="'+parseFloat(170)+'" y2="'+parseFloat(32)+'" style="stroke:black;stroke-width:2" />';
sDis1Out     += '<line x1="'+parseFloat(170)+'" y1="'+parseFloat(32)+'" x2="'+parseFloat(170)+'" y2="'+parseFloat(53)+'" style="stroke:black;stroke-width:2" />';

if(tipo==1)
{
  sDis1Out     += '<circle cx="'+parseFloat(170)+'" cy="'+parseFloat(65)+'" r="2" stroke="black" stroke-width=".1" fill="black" />';
  sDis1Out     += '<line x1="'+parseFloat(170)+'" y1="'+parseFloat(65)+'" x2="'+parseFloat(170)+'" y2="'+parseFloat(53)+'" style="stroke:black;stroke-width:2" />';

  sDis1Out     += '<circle cx="'+parseFloat(170)+'" cy="'+parseFloat(77)+'" r="2" stroke="black" stroke-width=".1" fill="black" />';
  sDis1Out     += '<line x1="'+parseFloat(170)+'" y1="'+parseFloat(77)+'" x2="'+parseFloat(170)+'" y2="'+parseFloat(53)+'" style="stroke:black;stroke-width:2" />';

  sDis1Out     += '<circle cx="'+parseFloat(170)+'" cy="'+parseFloat(89)+'" r="2" stroke="black" stroke-width=".1" fill="black" />';
  sDis1Out     += '<line x1="'+parseFloat(170)+'" y1="'+parseFloat(89)+'" x2="'+parseFloat(170)+'" y2="'+parseFloat(53)+'" style="stroke:black;stroke-width:2" />';
}

sDis += sDis1Out;

sDis += '</g>';
sDis += '</g></g>';
sDis += '</g>';

//let uscite = [{x:146.125, y:32}, {x:146.125, y:10.70},  {x:146.125, y:52.132}, {x:146.125, y:61.322}, {x:146.125, y:0.966},  {x:146.125, y:10.70}];

/*
let uscite = [{x:170, y:53}, {x:170, y:65}, {x:170, y:77}, {x:170, y:89},
            {x:170, y:53}, {x:170, y:65}, {x:170, y:77}, {x:170, y:89}
           ];
*/
let uscite = [{x:170, y:53}, {x:170, y:65}, {x:170, y:89}, {x:170, y:77},
              {x:170, y:53}, {x:170, y:65}, {x:170, y:89}, {x:170, y:77}
             ];


if(inversione==true) // sambio le uscite 3 e 4
   uscite = [{x:170, y:53}, {x:170, y:65}, {x:170, y:89}, {x:170, y:77},
             {x:170, y:53}, {x:170, y:65}, {x:170, y:89}, {x:170, y:77}
            ];
for(let i=0;i<uscite.length;i++)
{
  uscite[i].x = parseFloat(info.pos.x+uscite[i].x*info.scale*invW-dimensioni.w/2*info.scale*invW);
  uscite[i].y = parseFloat(info.pos.y+uscite[i].y*info.scale*invH-dimensioni.h/2*info.scale*invH);
}

let ingressi = [{x:-30, y:11}];  //y:11/32

for(let i=0;i<ingressi.length;i++)
{
  ingressi[i].x = parseFloat(info.pos.x+ingressi[i].x*info.scale*invW-dimensioni.w/2*info.scale*invW);
  ingressi[i].y = parseFloat(info.pos.y+ingressi[i].y*info.scale*invH-dimensioni.h/2*info.scale*invH);
}


let out = {};
out.sDis = sDis;
out.uscite = uscite.slice(0);
out.ingressi = ingressi.slice(0);


return out;
}

contaLEDstripSuLato(lato)
{
  let out = {};
  let lista = this.cloneMyObj(this.lista_stripLED.filter((el)=>{return el.lato==lato;}));
  out.n     = lista.length;
  out.lista = this.cloneMyObj(lista);
  return out;
}

contaCentralineLED()
{
  return this.lista_stripLED.length>4?2:1;;
}

PosizionaPOWERINPUT(lista_pref)
{
let pos230V = {};
let dimQ = parseFloat(30/this.grafica.scala);

let ang230V   = lista_pref[0];
for(let i=0;i<lista_pref.length;i++)
{
  if(lista_pref[i]=='A' && this.smOBJ.electronics.powsource.a==1)
  {
    ang230V   = lista_pref[i];
    break;
  }
  else
  {
    if(lista_pref[i]=='B' && this.smOBJ.electronics.powsource.b==1)
    {
      ang230V   = lista_pref[i];
      break;
    }
    else
    {
      if(lista_pref[i]=='C' && this.smOBJ.electronics.powsource.c==1)
      {
        ang230V   = lista_pref[i];
        break;
      }
      else
      {
        if(lista_pref[i]=='A' && this.smOBJ.electronics.powsource.d==1)
        {
          ang230V   = lista_pref[i];
          break;
        }
        else
        {
          ang230V   = lista_pref[0];
        }
      }
    }
  }
}

switch(ang230V)
{
  case 'A':
    pos230V.x = parseFloat(-this.smOBJ.optionals.pedana.d-dimQ/2);
    pos230V.y = parseFloat(-this.smOBJ.optionals.pedana.a-dimQ/2);
  break;

  case 'B':
    pos230V.x = parseFloat(-this.smOBJ.optionals.pedana.a-dimQ/2);
    pos230V.y = parseFloat(this.smOBJ.dimensioni.nominali.sporgenza+this.smOBJ.optionals.pedana.c+dimQ/2);
  break;

  case 'C':
    pos230V.x = parseFloat(this.smOBJ.dimensioni.nominali.larghezza+this.smOBJ.optionals.pedana.b+dimQ/2);
    pos230V.y = parseFloat(this.smOBJ.dimensioni.nominali.sporgenza+this.smOBJ.optionals.pedana.c+dimQ/2);
  break;

  case 'D':
    pos230V.x = parseFloat(this.smOBJ.dimensioni.nominali.largezza+this.smOBJ.optionals.pedana.b+dimQ/2);
    pos230V.y = parseFloat(-this.smOBJ.optionals.pedana.a-dimQ/2);
  break;
}

let out = {};
out.pos230V = this.cloneMyObj(pos230V);
out.ang230V = this.cloneMyObj(ang230V);

// console.log(out);
return out;
}


ControllaSettingLEDRGBPerimetrali()
{
let out = {}
out.lista   = [];
out.tipo    = '';
out.potenza = 0;

let l_led_sporgenza = this.smOBJ.dimensioni.nominali.sporgenza;
let l_led_larghezza = this.smOBJ.dimensioni.nominali.larghezza;

let lista = [{etk:'AB', lled:l_led_sporgenza}, {etk:'BC', lled:l_led_larghezza}, {etk:'CD', lled:l_led_sporgenza}, {etk:'AD', lled:l_led_larghezza}];
let lista_tipo = ['','','RGB', '4000K', '3000K'];
for(let j=2;j<5;j++)
{
  for(let i=0;i<lista.length;i++)
  {
    if(this.CheckLINKoptionsNOLOG(lista[i].etk, {strip:j})==1)
    {
      out.lista.push(lista[i].etk);
      out.tipo = lista_tipo[j];
      out.potenza += 6.8*lista[i].lled/100;
    }
  }
}
return out;
}

CheckCharsJolly(source)
{
return (source =='*'||source =='-1'||source ==-1||typeof(source) === "undefined");
}


RLINKoptionsEq(linkS, linkT)
{
let linkTstrip = ""+linkT.strip;
let linkSstrip = ""+linkS.strip;

let linkTspot = ""+linkT.spot;
let linkSspot = ""+linkS.spot;

let linkTspout = ""+linkT.spout;
let linkSspout = ""+linkS.spout;

//return angleT.top===angleS.top&&angleT.type===angleS.type&&angleT.opt===angleS.opt;
return linkTstrip==linkSstrip&&linkTspot==linkSspot&&linkTspout==linkSspout;
}

MeetLINKoptions(str_link, link_options)  //
{
let linkS = {};

switch(str_link)
{
  case "AB":
    linkS =  this.cloneMyObj(iLINK_AB);
  break;
  case "BC":
    linkS =  this.cloneMyObj(iLINK_BC);
  break;
  case "CD":
    linkS =  this.cloneMyObj(iLINK_CD);
  break;
  case "AD":
    linkS =  this.cloneMyObj(iLINK_AD);
  break;
}


let linkT =  Object.assign({}, link_options);;

// se jolly, forzo l'angolo test a copiare quello sorgente
if(this.CheckCharsJolly(linkT.strip))   linkT.strip = linkS.strip;
if(this.CheckCharsJolly(linkT.spot))    linkT.spot  = linkS.spot;
if(this.CheckCharsJolly(linkT.spout))   linkT.spout = linkS.spout;


return this.RLINKoptionsEq(linkS, linkT);
}

CheckLINKoptionsNOLOG(str_link, obj)
{

if (typeof(obj.strip) === "undefined") obj.strip  = -1;
if (typeof(obj.spot)  === "undefined") obj.spot   = -1;
if (typeof(obj.spout) === "undefined") obj.spout  = -1;


let out = false;
out = this.MeetLINKoptions(str_link, obj);
return (out)?1:0;
}




ForzaLunghezzaSuCOMPONENTS_FLAG(strRif, lunghezza)
{
//Array.prototype.findIndexBy = function(key, value) {return this.findIndex(item => item[key] === value)}
//let indice = COMPONENTS_FLAG.findIndexBy('name', strRif);
for(let i=0; i<this.COMPONENTS_FLAG.length;i++)
{
  if(this.COMPONENTS_FLAG[i].name === strRif)
  {
     this.COMPONENTS_FLAG[i].lunghezza = lunghezza;
  }
}

}



CalcolaPotenzeRichieste()
{
this.potenza = {};


{
  this.potenza.ledspot_lame         = 0;
  this.potenza.ledspot_perimetrali  = 0;

  // led su lame
  this.potenza.ledspot_lame               = 0;
  this.potenza.ledspot_lame_tipo          = '';

  // led su perimetro
  this.potenza.ledspot_perimetrali        = 0;
  this.potenza.ledspot_perimetrali_tipo   = 0;

  // led strip su perimetro
  this.potenza.ledstrip                   = this.ControllaSettingLEDRGBPerimetrali().potenza;
  this.potenza.ledstrip_tipo              = this.ControllaSettingLEDRGBPerimetrali().tipo;
  this.potenza.ledstripWHITE              = (this.ControllaSettingLEDRGBPerimetrali().tipo!='RGB')?this.ControllaSettingLEDRGBPerimetrali().potenza:0;
  this.potenza.ledstripRGB                = (this.ControllaSettingLEDRGBPerimetrali().tipo=='RGB')?this.ControllaSettingLEDRGBPerimetrali().potenza:0;

  // schuko
  this.potenza.schuko                     = [];

  // usb
  this.potenza.usb                        = [];
  this.potenza.usb_info                   = {};


  // aries
  this.potenza.aries                      = [];
  this.potenza.aries_info                 = {};

  // screen
  this.potenza.screen                     = [];
  this.potenza.screen_info                = {};
}

//let test = ImpostaValoriElettronicaGamba('A', 'USB', [{lato:'1', x:3.5, h:40}, {lato:'1', x:3.5, h:55}]);

// definizione del tipo di layout
let conf = 0;
if(this.potenza.ledstripWHITE>0)        conf += 8;
if(this.potenza.ledspot_lame>0)         conf += 4;
if(this.potenza.ledspot_perimetrali>0)  conf += 2;
if(this.potenza.ledstripRGB>0)          conf += 1;


//let alimentatore_aggiuntivo = false;
let cavo_multitesta         = false;

let cavo_4_teste_WHITE      = false;
let cavo_4_teste_WHITE_agg  = false;
let cavo_4_teste_RGB        = false;
let cavo_4_teste_WHITE_std  = false;
let cavo_4_teste_WHITE_std_agg  = false;
let cavo_5_teste            = false;
let adattatore_JST_campanella = false;
let alimentatore_base       = false; //PB4
let alimentatore_aggiuntivo = false; //PB4
let cavo_4_teste_WHITE_indipendenti  = false;

let alimentatore_per_ARIES  = (this.potenza.aries.length>0)?true:false;

switch(conf)
{
  case 0:  // nessun led
    if(this.smOBJ.modello == "SWAY")
    {
      alimentatore_per_ARIES = false;
    }
  break;

  case 1: // solo strip RGB
      if(this.smOBJ.modello == "SWAY"){
        cavo_4_teste_RGB        = true;
        alimentatore_per_ARIES  = false; //
      }
      else {
        alimentatore_base = true;
        cavo_4_teste_RGB = true;
      }
  break;

  case 2: // solo perimetrali
      if(this.smOBJ.modello == "SWAY"){
         cavo_4_teste_WHITE = true;
      }
      else {
        alimentatore_base = true;
        cavo_4_teste_WHITE= true;
      }
      alimentatore_per_ARIES  = false; //
  break;

  case 3: // perimetrali + strip RGB
       cavo_multitesta = true;

       if(this.smOBJ.modello == "SWAY"){
         adattatore_JST_campanella = true;
         cavo_4_teste_WHITE_std    = true;
         cavo_4_teste_RGB          = true;
       }
       else {
         alimentatore_base         = true;
         cavo_5_teste              = true;
         adattatore_JST_campanella = true;
         cavo_4_teste_WHITE_std    = true;
       }
  break;

  case 4: // solo lame
      if(this.smOBJ.modello == "SWAY"){

      }
      else {
        alimentatore_base          = true;
        cavo_4_teste_WHITE         = true;
        adattatore_JST_campanella  = true;
      }
      alimentatore_per_ARIES  = false; //
  break;

  case 5: // lame + strip RGB
      if(this.smOBJ.modello == "SWAY"){
        cavo_4_teste_RGB           = true;
      }
      else {
        alimentatore_base          = true;
        cavo_5_teste               = true;
        adattatore_JST_campanella  = true;
      }
  break;

  case 6: // lame + perimetrali
      if(this.smOBJ.modello == "SWAY"){
        cavo_4_teste_WHITE = true;
      }
      else {
        alimentatore_base          = true;
        cavo_4_teste_WHITE_indipendenti = true;
        adattatore_JST_campanella  = true;
        cavo_4_teste_WHITE_std     = false; //true;
      }
  break;

  case 7: // lame + perimetrali + strip RGB

      if(this.smOBJ.modello == "SWAY"){
         cavo_4_teste_WHITE        = true;
         cavo_4_teste_RGB          = true;
         alimentatore_aggiuntivo   = true;
      }
      else {
        alimentatore_base          = true;
        cavo_4_teste_WHITE_indipendenti = true;
        adattatore_JST_campanella  = true;
        cavo_4_teste_WHITE_std     = false; //true;
        cavo_4_teste_RGB           = true;
        alimentatore_aggiuntivo    = true;
      }
  break;

  case 8: // solo strip WHITE
      if(this.smOBJ.modello == "SWAY"){
        cavo_4_teste_WHITE = true;
      }
      else {
        alimentatore_base          = true;
        cavo_4_teste_WHITE         = true;
      }
      alimentatore_per_ARIES  = false; //
  break;

  case 9: // impossibile
  break;

  case 10: // perimetrali + strip WHITE
      cavo_multitesta = true;
      if(this.smOBJ.modello == "SWAY"){
        adattatore_JST_campanella = true;
        cavo_4_teste_WHITE_std    = true;
        cavo_4_teste_WHITE        = true;
      }
      else {
        alimentatore_base          = true;
        cavo_4_teste_WHITE_indipendenti = true;
        cavo_4_teste_WHITE_std     = true;
        cavo_4_teste_WHITE_std_agg = true;
      }
  break;

  case 11: // impossibile
  break;

  case 12: // lame + strip WHITE
      if(this.smOBJ.modello == "SWAY"){
        cavo_4_teste_WHITE        = true;
      }
      else {
        alimentatore_base          = true;
        cavo_4_teste_WHITE_indipendenti = true;
        cavo_4_teste_WHITE_std     = true;
        adattatore_JST_campanella  = true;
      }
  break;

  case 13: // impossibile
  break;

  case 14: // lame + perimetrali + strip WHITE
      if(this.smOBJ.modello == "SWAY"){
        cavo_4_teste_WHITE       = true;  // per TVAL
        cavo_4_teste_WHITE_agg   = true;  // per pb4
        alimentatore_aggiuntivo  = true;
      }
      else {
        alimentatore_base          = true;
        cavo_4_teste_WHITE_indipendenti = true;
        cavo_4_teste_WHITE_std     = true;
        adattatore_JST_campanella  = true;
        cavo_4_teste_WHITE         = true;
        alimentatore_aggiuntivo    = true;
      }
  break;

  case 15: // impossibile
  break;

  default:
}

this.potenza.conf                         = conf;
this.potenza.alimentatore_aggiuntivo      = alimentatore_aggiuntivo;
this.potenza.cavo_multitesta              = cavo_multitesta;

this.potenza.cavo_4_teste_WHITE         = cavo_4_teste_WHITE;
this.potenza.cavo_4_teste_WHITE_agg     = cavo_4_teste_WHITE_agg;
this.potenza.cavo_4_teste_RGB           = cavo_4_teste_RGB;
this.potenza.cavo_4_teste_WHITE_std     = cavo_4_teste_WHITE_std;
this.potenza.cavo_4_teste_WHITE_std_agg = cavo_4_teste_WHITE_std_agg;
this.potenza.cavo_5_teste               = cavo_5_teste;
this.potenza.adattatore_JST_campanella  = adattatore_JST_campanella;
this.potenza.alimentatore_base          = alimentatore_base; //PB4
//this.potenza.alimentatore_aggiuntivo    = alimentatore_aggiuntivo; //PB4
this.potenza.cavo_4_teste_WHITE_indipendenti  = cavo_4_teste_WHITE_indipendenti;
this.potenza.alimentatore_per_ARIES     = alimentatore_per_ARIES; //

}

genera_svgCablaggi()
{

 let sDis = '';

 let n_centraline= this.contaCentralineLED();
 
 if(this.lista_stripLED.length>8) 
  {
      this.svgCablaggio = '';
      return 0;
  }


//////////////////////////////////////////





    if(this.lista_stripLED.length>0)
    {






        let centralinaTVALL = {};
        let centralinaTVALL2 = {};
        let cavo4teste = true; 
        let cambio_connettore = 0;



        let contatore_spostamenti     = {A:0, B:0, C:0, D:0, tot:0};
        let contatore_outs_centraline = {centralina_1:0, centralina_2:0};


        let tmpstr = 'C.U. RGB MASTER';

        if(this.smOBJ.electronics.type==5) // NEXTA
          {


            centralinaTVALL = this.disegna_TVALL_TUBOLARE_MOD({pos:{x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza/2),
                                                               y:parseFloat(this.smOBJ.dimensioni.nominali.sporgenza+(this.smOBJ.optionals.pedana.c))},
                                                              scale:1+0*45/this.grafica.scala}, {W:true, H:false}, cambio_connettore, cavo4teste);

            centralinaTVALL2 = this.disegna_TVALL_TUBOLARE_MOD({pos:{x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza/2),
                                                                y:parseFloat(this.smOBJ.optionals.pedana.c)},
                                                              scale:1+0*45/this.grafica.scala}, {W:true, H:false}, cambio_connettore, cavo4teste);
            tmpstr = 'NEXTA LED';
            
            if(this.potenza.cavo_4_teste_WHITE==true)
            {
               this.USINGComponents('CAVO 4 TESTE WHITE TVALL', 1, true);  
            }
            

            if(cavo_4_teste_RGB==true)
            {
              this.USINGComponents('CAVO 4 TESTE RGB TVALL', 1, true);  //
            }
              

            if(n_centraline==2)
            {
              
              if(this.potenza.cavo_4_teste_WHITE==true)
              {
                  this.USINGComponents('CAVO 4 TESTE WHITE TVALL', 1, true);  //
              }

              if(this.potenza.cavo_4_teste_RGB==true)
              {
                  this.USINGComponents('CAVO 4 TESTE RGB TVALL', 1, true);  //
              }
              
            }

          }
        else
          {
            centralinaTVALL   = this.disegna_CENTRALINA_GENERICA({pos:{x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza/2),
                                                               y:parseFloat(15/this.grafica.scala+this.smOBJ.dimensioni.nominali.sporgenza+(this.smOBJ.optionals.pedana.c))}, 
                                                               scale:0.25/this.grafica.scala}, false, 1);
            centralinaTVALL2  = this.disegna_CENTRALINA_GENERICA({pos:{x:parseFloat(this.smOBJ.dimensioni.nominali.larghezza/2),
                                                                  y:parseFloat(15/this.grafica.scala+this.smOBJ.dimensioni.nominali.sporgenza+(this.smOBJ.optionals.pedana.c))}, 
                                                              scale:0.25/this.grafica.scala}, true, 1);
            tmpstr = 'C.U. RGB MASTER';
             switch(this.smOBJ.electronics.type)
              {
                case '2':
                  tmpstr = 'CU RGB IO 240W';
                break;
                case '3':
                  tmpstr = 'CU RGB RTS 240W';
                break;
                case '4':
                  tmpstr = 'CU RGB RX 240W';
                break;
              }

            if(parseFloat(this.smOBJ.control_type.rgb.split('-')[0])==3) tmpstr = 'C.U. RGB SLAVE';

          }

        let pos1 = {x:parseFloat(centralinaTVALL.ingressi[0].x+centralinaTVALL.uscite[0].x)/2,
                    y:parseFloat(centralinaTVALL.ingressi[0].y+centralinaTVALL.uscite[0].y)/2};

                    
        sDis += this.PallinaOggetto(pos1,
                                     {R:20, angle:45, scala:1},
                                     this.USINGComponents(tmpstr, 1, true).pallinatura);  //
        

        
        let xTMP =this.DisegnaCollegamento230VAC_NEW(centralinaTVALL, {power:240, etk: tmpstr, unionAllowed:true, pref:['C', 'B', 'D', 'A'], inverti_regola:false}, '', {dx:0, dy:1.51}, 0, 0);
        let lunghezza_cavo_230 = xTMP.lunghezza_cm;
        sDis += xTMP.sDis;
       


        sDis += centralinaTVALL.sDis;

       
        if(n_centraline==2)
         {
           let pos2 = {x:parseFloat(centralinaTVALL2.ingressi[0].x+centralinaTVALL2.uscite[0].x)/2,
                       y:parseFloat(centralinaTVALL2.ingressi[0].y+centralinaTVALL2.uscite[0].y)/2};

           if(this.smOBJ.control_type.codifica_radio.tipo==5) // NEXTA
           {
              tmpstr = 'NEXTA LED';
           }
           else
           {
              if(tmpstr == 'C.U. RGB MASTER')  tmpstr = 'C.U. RGB SLAVE';
           }


          sDis += this.PallinaOggetto(pos2,
                                        {R:20, angle:45, scala:1},
                                        this.USINGComponents(tmpstr, 1, true).pallinatura);

          xTMP =this.DisegnaCollegamento230VAC_NEW(centralinaTVALL2, dimensioni, {power:240, etk: tmpstr, unionAllowed:true, pref:['D', 'A', 'C', 'B'], inverti_regola:false}, '', {dx:0, dy:1.51}, 0, 0);
          lunghezza_cavo_230 += xTMP.lunghezza_cm;
          sDis += xTMP.sDis;
          sDis += centralinaTVALL2.sDis;

          // cavo sincronizzazione
          if(this.smOBJ.control_type.codifica_radio.tipo!==5)
          {

           let posMedia = {x:parseFloat(pos1.x+pos2.x)/2,
                            y:parseFloat(pos1.y+pos2.y)/2};
           sDis += '<line   x1="'+pos1.x+'" y1="'+pos1.y+'" x2="'+pos2.x+'" y2="'+pos2.y+'" style="fill:'+coloreCavo+';stroke-width:'+parseFloat(1*spessoreCavo)+';stroke:silver"  />';
           let lunghezza_cavo_sync =  (Math.abs(pos1.x-pos2.x)+Math.abs(pos1.y-pos2.y));
           tmpstr = 'Prolunga Std 1m';
           if(lunghezza_cavo_sync>100) tmpstr = 'Prolunga Std 1m';
           if(lunghezza_cavo_sync>300) tmpstr = 'Prolunga Std 5m';
           if(lunghezza_cavo_sync>500) tmpstr = 'Prolunga Std 7m';
           sDis += this.PallinaOggetto( posMedia,
                                          {R:20, angle:-45, scala:1},
                                          this.USINGComponents(tmpstr, 1, true).pallinatura);
          }

         }


         this.USINGComponents('Cavo 230Vac', 1, true);
          this.ForzaLunghezzaSuCOMPONENTS_FLAG('Cavo 230Vac', parseInt(lunghezza_cavo_230/10)/10);
       



        ///////////////////////////// AD /////////////////////////////////////
        if(this.contaLEDstripSuLato('AD').n>0)
        {
          if(this.contaLEDstripSuLato('AD').n>1)
          {
              sDis += this.calcolaMigliorPercorso('AD',
                                              this.contaLEDstripSuLato('AD').lista[0].nodi.start.nodo.posizione,
                                              'A',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;
              sDis += this.calcolaMigliorPercorso('AD',
                                              this.contaLEDstripSuLato('AD').lista[1].nodi.stop.nodo.posizione,
                                              'D',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;    
          }
          else
          {
              sDis += this.calcolaMigliorPercorso('AD',
                                              this.contaLEDstripSuLato('AD').lista[0].nodi.stop.nodo.posizione,
                                              'D',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;

          }
          
        }

        
        //////////////////////////////// fine AD

        ///////////////////////////// BC /////////////////////////////////////
        if(this.contaLEDstripSuLato('BC').n>0)
        {
          if(this.contaLEDstripSuLato('BC').n>1)
          {
              sDis += this.calcolaMigliorPercorso('BC',
                                              this.contaLEDstripSuLato('BC').lista[0].nodi.start.nodo.posizione,
                                              'B',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;
              sDis += this.calcolaMigliorPercorso('BC',
                                              this.contaLEDstripSuLato('BC').lista[1].nodi.stop.nodo.posizione,
                                              'C',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;    
          }
          else
          {
              sDis += this.calcolaMigliorPercorso('BC',
                                              this.contaLEDstripSuLato('BC').lista[0].nodi.start.nodo.posizione,
                                              'B',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;

          }
          
        }
        //////////////////////////////// fine BC

        ///////////////////////////// AB /////////////////////////////////////
        if(this.contaLEDstripSuLato('AB').n>0)
        {
          if(this.contaLEDstripSuLato('AB').n>1)
          {
              sDis += this.calcolaMigliorPercorso('AB',
                                              this.contaLEDstripSuLato('AB').lista[0].nodi.start.nodo.posizione,
                                              'A',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;
              sDis += this.calcolaMigliorPercorso('AB',
                                              this.contaLEDstripSuLato('BC').lista[1].nodi.stop.nodo.posizione,
                                              'B',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;    
          }
          else
          {
              sDis += this.calcolaMigliorPercorso('AB',
                                              this.contaLEDstripSuLato('AB').lista[0].nodi.stop.nodo.posizione,
                                              'B',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;

          }
          
        }
        //////////////////////////////// fine AB

        ///////////////////////////// CD /////////////////////////////////////
        if(this.contaLEDstripSuLato('CD').n>0)
        {
          if(this.contaLEDstripSuLato('CD').n>1)
          {
              sDis += this.calcolaMigliorPercorso('CD',
                                              this.contaLEDstripSuLato('CD').lista[0].nodi.start.nodo.posizione,
                                              'D',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;
              sDis += this.calcolaMigliorPercorso('CD',
                                              this.contaLEDstripSuLato('CD').lista[1].nodi.stop.nodo.posizione,
                                              'C',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;    
          }
          else
          {
              sDis += this.calcolaMigliorPercorso('CD',
                                              this.contaLEDstripSuLato('CD').lista[0].nodi.stop.nodo.posizione,
                                              'D',
                                              contatore_spostamenti,
                                              contatore_outs_centraline,
                                              centralinaTVALL, centralinaTVALL2).sDis;

          }
          
        }
        //////////////////////////////// fine CD

    }











//if(settings.vedi_Elettronica_LEDstrip==false) sDis = '';
//if(illuminati.length==0) sDis = '';
let out  = sDis;
return out;
}



DisegnaCollegamento230VAC_NEW(centralina, power, tipo, delta, partenzaCentralina)
{
let sDis    = '';

let coloreCavo        = "black";
let spessoreCavo      = 0.69;



let tmppow  = this.PosizionaPOWERINPUT(power.pref);
let pos230V = tmppow.pos230V;
let ang230V = tmppow.ang230V;



let linea   = 0;
// cerco se in quest'angolo c'è già un'uscita
let filter = this.POWER_LINE_LIST.filter( el => {return el.ang === ang230V;} );
////console.log(filter);

let found = false;
for(let i=0;i<filter.length;i++)
{
  if(power.unionAllowed && (parseFloat(filter[i].power+1*power.power)<=1500))
  {
    linea = filter[i].linea;
    ////console.log('linea: '+linea);
    let index = this.POWER_LINE_LIST.findIndex(el=> {return el.linea==linea});
    ////console.log('index: '+index);
    this.POWER_LINE_LIST[index].power+= 1*power.power;
    this.POWER_LINE_LIST[index].etk += '; '+power.etk;
    found = true;
    break;
  }
}

if(found==false)
{
  power.ang   = ang230V;
  power.linea = parseInt(this.POWER_LINE_LIST.length+1);
  this.POWER_LINE_LIST.push(power);
  linea       = power.linea;
}

//delta = {dx:0, dy:0};

let input230VAC = this.disegna_230VAC({pos:pos230V, line_number:linea, delta:delta});
sDis += input230VAC.sDis;

// collegamento 230VAC
let collegamento230VAC      = [];
let spY                     = 5;


let offsetYCentralina       = 0;


// parto dalla centralina
collegamento230VAC.push({x:parseFloat(centralina.ingressi[0].x), y:parseFloat(centralina.ingressi[0].y)});

// inserisco punti di passaggio intermedi

if(power.pref[0]=='A')
{
  if(ang230V!=power.pref[0])
  {
     if(ang230V=='B')
     {
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[0]);
     }
     if(ang230V=='D')
     {
       collegamento230VAC.push({x:parseFloat(centralina.ingressi[partenzaCentralina].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[0]);
     }
     if(ang230V=='C')
     {
       collegamento230VAC.push({x:parseFloat(centralina.ingressi[partenzaCentralina].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[0]);
     }
  }
  else
  {
    collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
    collegamento230VAC.push(input230VAC.uscite[0]);
  }
}

if(power.pref[0]=='D')
{
  if(ang230V!=power.pref[0])
  {
     if(ang230V=='C')
     {
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[0]);
     }
     if(ang230V=='A')
     {
       collegamento230VAC.push({x:parseFloat(centralina.ingressi[partenzaCentralina].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[0]);
     }
     if(ang230V=='B')
     {
       collegamento230VAC.push({x:parseFloat(centralina.ingressi[partenzaCentralina].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[0]);
     }
  }
  else
  {
    collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
    collegamento230VAC.push(input230VAC.uscite[0]);
  }
}

if(power.pref[0]=='B')
{
  if(ang230V!=power.pref[0])
  {
     if(ang230V=='A')
     {
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[1].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[1]);
     }
     if(ang230V=='C')
     {
       collegamento230VAC.push({x:parseFloat(centralina.ingressi[partenzaCentralina].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[1].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[1]);
     }
     if(ang230V=='D')
     {
       collegamento230VAC.push({x:parseFloat(centralina.ingressi[partenzaCentralina].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[1].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[1]);
     }
  }
  else
  {
    collegamento230VAC.push({x:parseFloat(input230VAC.uscite[1].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
    collegamento230VAC.push(input230VAC.uscite[1]);
  }
}

if(power.pref[0]=='C')
{
  if(ang230V!=power.pref[0])
  {
     if(ang230V=='D')
     {
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[0]);
     }
     if(ang230V=='B')
     {
       collegamento230VAC.push({x:parseFloat(centralina.ingressi[partenzaCentralina].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[0]);
     }
     if(ang230V=='A')
     {
       collegamento230VAC.push({x:parseFloat(centralina.ingressi[partenzaCentralina].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
       collegamento230VAC.push(input230VAC.uscite[0]);
     }
  }
  else
  {
    collegamento230VAC.push({x:parseFloat(input230VAC.uscite[0].x), y:parseFloat(centralina.ingressi[partenzaCentralina].y)});
    collegamento230VAC.push(input230VAC.uscite[0]);
  }
}



let sommatore_distanza = 0;

for(let i=1;i<collegamento230VAC.length;i++)
{
  sDis += '<line   x1="'+collegamento230VAC[i-1].x+'" y1="'+collegamento230VAC[i-1].y+'" x2="'+collegamento230VAC[i].x+'" y2="'+collegamento230VAC[i].y+'" style="fill:'+coloreCavo+';stroke-width:'+parseFloat(2*spessoreCavo)+';stroke:'+coloreCavo+'"  />';
  sommatore_distanza += Math.abs(collegamento230VAC[i-1].x-collegamento230VAC[i].x)+Math.abs(collegamento230VAC[i-1].y-collegamento230VAC[i].y);
  //console.log(sommatore_distanza);
}

if(tipo=='')
{
  
  sDis += this.PallinaOggetto( collegamento230VAC[1] ,
                               {R:9, angle:45, scala:1},
                               this.USINGComponents('Cavo 230Vac', 1, false).pallinatura);  //



  if(found==false && power.unionAllowed==true)
  {
    //if(((STRUTTURA_GENERALE.control_type.motorizzazione.split('-')[0]!=1 && STRUTTURA_GENERALE.control_type.motorizzazione.split('-')[0]!=5) || STRUTTURA_GENERALE.potenza.alimentatore_aggiuntivo==true))
    if(((this.smOBJ.electronics.type!=1 && this.smOBJ.electronics.type!=5) || this.potenza.alimentatore_aggiuntivo==true))
    {
      //if(this.smOBJ.modello!=="ECO JOY")
      if(this.smOBJ.modello!=="ECO JOY")
      sDis += this.PallinaOggetto( collegamento230VAC[0] ,
                                  {R:9, angle:135, scala:1},
                                  this.USINGComponents('Scatola Derivazione D40', 1, true).pallinatura);  //
    }
  }


  sDis += this.PallinaOggetto( collegamento230VAC[collegamento230VAC.length-1] ,
                              {R:9, angle:135, scala:1},
                              this.USINGComponents('Connettore WATERPROOF', 1, true).pallinatura);  //

                              

}

let out = {sDis:sDis, lunghezza_cm:parseFloat(sommatore_distanza)};
return out;
}

disegna_230VAC(info)
{
let dimensioni          = {w:50.1, h:50}; //width="50.006mm" height="49.742mm"
let scale               = 0.30/this.grafica.scala;  // da dimensioni di creazione svg a dimensioni su A4   (SVG230->A4)
// dimensioni.scale --> da dimensioni pergola a dimensioni A4                           (PERGOLA->A4)
let restoreScale        = parseFloat(1/info.scale) ; // da A4 a pergola                 (A4->PERGOLA)


let dimensioni_su_A4    = {w:parseFloat(scale*dimensioni.w), h:parseFloat(scale*dimensioni.h)};
let dimensioni_su_Perg  = {w:parseFloat(restoreScale*dimensioni_su_A4.w), h:parseFloat(restoreScale*dimensioni_su_A4.h)};

let offX = parseFloat(info.delta.dx*dimensioni_su_A4.w);
let offY = parseFloat(info.delta.dy*dimensioni_su_A4.h);

let sDis = '';

sDis += '<g id="230Vac" transform="translate('+parseFloat(info.pos.x-dimensioni_su_A4.w/2+offX)+' '+parseFloat(info.pos.y-dimensioni_su_A4.h/2+offY)+')" ><g transform="scale('+scale+')" ><g transform="translate(-46.872 -29.655)"><path transform="scale(.26458)" d="m177.15 112.08v188h189v-188zm1 1h187v186h-187zm93.043 25.721c-0.62044-0.0437-1.2426 0.0693-1.8613 0.36524-5.877 2.8118-9.9173 14.488-13.031 19.914-10.357 18.043-20.987 35.931-31.301 54-2.7433 4.806-13.453 17.934-9.8066 23.566 3.3237 5.134 19.557 2.4336 24.957 2.4336h62c5.977 0 18.601 2.3857 23.682-1.0293 6.175-4.149-4.2509-16.851-6.6699-20.971-11.48-19.546-22.623-39.313-33.861-59-2.2185-3.8867-8.1098-18.857-14.107-19.279zm-0.043 9.2793 31.281 54 16.719 30h-96l26.15-47zm-5 20-9 34 14-7-3 22h-1l-1-3h-1l2 13 9-11-4 1 8-31-15 8 11-26z" fill="#1e1d05"/><path d="m47.193 54.547v-24.535h49.363v49.071h-49.363zm38.702 8.6383c1.1924-0.56174 1.0989-1.7538-0.31802-4.0527-1.7505-2.8402-2.6946-4.4541-6.3987-10.938-2.0648-3.6146-4.139-7.3266-4.6094-8.2489-0.57076-1.1192-1.103-1.9328-1.6003-2.4462-0.6604-0.68183-0.81317-0.76933-1.3431-0.76933-0.92032 0-1.6738 0.86302-2.9746 3.4069-0.58206 1.1383-2.3183 4.2385-3.8584 6.8892-1.54 2.6507-3.4456 5.9367-4.2346 7.3022-0.78898 1.3655-1.7568 2.9621-2.1507 3.548-2.0712 3.0807-2.2818 4.9429-0.61247 5.4148 0.23375 0.06608 5.3211 0.09395 11.305 0.06194 5.9841-0.03201 11.636 0.0027 12.56 0.07709 2.0423 0.16452 3.5522 0.07738 4.2353-0.24442z" fill="#ff0"/><path d="m59.662 60.791c0.15711-0.26105 1.6514-2.9391 3.3207-5.9513 1.6693-3.0121 4.2946-7.6125 5.8341-10.223 1.5394-2.6105 2.8659-4.8673 2.9476-5.0149 0.1238-0.22369 0.84441 0.93466 4.3155 6.9371 3.9544 6.8381 8.2937 14.507 8.2937 14.657 0 0.0382-5.6244 0.06947-12.499 0.06947h-12.499zm12.298-1.8774c0.52211-0.64456 1.0468-1.3102 1.166-1.4792 0.21087-0.29896 0.20228-0.30493-0.31746-0.22058l-0.5342 0.08669 0.197-0.68272c0.54844-1.9007 1.8339-7.0976 1.7959-7.2606-0.02873-0.12329-0.63598 0.1317-1.784 0.74913-0.95727 0.51482-1.7698 0.90672-1.8056 0.87089-0.03583-0.03584 0.5338-1.4781 1.2659-3.2051 0.73205-1.727 1.331-3.1763 1.331-3.2207 0-0.04441-0.62181-0.08074-1.3818-0.08074h-1.3818l-0.14376 0.54766c-0.07907 0.30122-0.61131 2.3127-1.1828 4.4699-0.57144 2.1572-1.0091 3.9521-0.97266 3.9886 0.03648 0.03648 0.86192-0.33249 1.8343-0.81994 0.97239-0.48744 1.768-0.86417 1.768-0.83716 0 0.26035-0.76324 5.4385-0.80825 5.4835-0.03291 0.03292-0.12578-0.11357-0.20636-0.32552s-0.23762-0.38536-0.34897-0.38536c-0.17217 0-0.17297 0.19118-0.0054 1.2779 0.31372 2.0343 0.35397 2.2275 0.4628 2.2213 0.0566-0.0032 0.53009-0.53326 1.0522-1.1778z" fill="#ff0"/><text x="60.169701" y="68.415115" fill="#000000" font-family="sans-serif" font-size="5.143px" stroke-width=".12858" style="line-height:1.25" xml:space="preserve"><tspan x="60.169701" y="68.415115" font-family="sans-serif" font-weight="bold" stroke-width=".12858">230 Vac</tspan></text><text x="59.493862" y="75.040207" fill="#000000" font-family="sans-serif" font-size="6.35px" stroke-width=".12858" style="line-height:1.25" xml:space="preserve"><tspan x="59.493862" y="75.040207" fill="#ff0000" font-family="sans-serif" font-size="6.35px" font-weight="bold" stroke-width=".12858">LINE '+info.line_number+'</tspan></text></g></g></g>';


let uscite = [{x:23.324, y:-3.359}, {x:23.324, y:50.087}, {x:-3.135, y:23.191}, {x:49.782, y:23.191}];
for(let i=0;i<uscite.length;i++)
{
  uscite[i].x = parseFloat(info.pos.x+uscite[i].x*scale-dimensioni.w/2*scale+offX);
  uscite[i].y = parseFloat(info.pos.y+uscite[i].y*scale-dimensioni.h/2*scale+offY);
}


let out = {};
out.sDis = sDis;
out.uscite = uscite.slice(0);

return out;
}




calcolaMigliorPercorso(lato,
                              punto_collegamento_LED,
                              angolo,
                              contatore_spostamenti,
                              contatore_outs_centraline,
                              centralina1, centralina2)
{

  let illuminati = [];
  for(let i=0;i<this.lista_stripLED.length;i++)
  {
      illuminati.push(this.lista_stripLED[i].lato);
  }

  let centralina_1    = JSON.parse(JSON.stringify(centralina1));
  let centralina_2    = JSON.parse(JSON.stringify(centralina2));

  //console.log(contatore_outs_centraline);

  let coloreCavo      = "blue";
  let spessoreCavo    = 0.26/this.grafica.scala;
  let offsetAng       = 3/this.grafica.scala;

  let out             = {};
  let sDis            = '';

  let spostmento_ini  = 2/this.grafica.scala;
  let step_spostamento= 2/this.grafica.scala;

  let sporgenza = parseFloat(this.smOBJ.dimensioni.nominali.sporgenza);
  let larghezza = parseFloat(this.smOBJ.dimensioni.nominali.larghezza);


  let angAP = {x:parseFloat(-this.smOBJ.optionals.pedana.d-offsetAng),
               y:parseFloat(-this.smOBJ.optionals.pedana.a-offsetAng)};

  let angBP = {x:parseFloat(-this.smOBJ.optionals.pedana.d-offsetAng),
               y:parseFloat(sporgenza+this.smOBJ.optionals.pedana.c+offsetAng)};

  let angCP = {x:parseFloat(larghezza+this.smOBJ.optionals.pedana.b+offsetAng),
               y:parseFloat(sporgenza+this.smOBJ.optionals.pedana.c+offsetAng)};

  let angDP = {x:parseFloat(larghezza+this.smOBJ.optionals.pedana.b+offsetAng),
               y:parseFloat(-this.smOBJ.optionals.pedana.a+offsetAng)};

  let posAngoloAdiacente   = {};
  let posInLineaConUscita  = {};
  let contUscitaAttiva     = 0;

  let collegamento         = [];

  let ini_counter = (this.smOBJ.electronics.type==5)?2:0;
  collegamento.push(punto_collegamento_LED); //perimAD.cavi.dx;
  switch(angolo)
  {
      case 'A':
          posAngoloAdiacente      = {x:parseFloat(angAP.x-(contatore_spostamenti.A)*step_spostamento-spostmento_ini),
                                     y:parseFloat(punto_collegamento_LED.y)};
          contatore_spostamenti.A++;
          contatore_spostamenti.B++;
      break;
      case 'B':
          posAngoloAdiacente      = {x:parseFloat(angBP.x-(contatore_spostamenti.B)*step_spostamento-spostmento_ini),
                                     y:parseFloat(punto_collegamento_LED.y)};
          contatore_spostamenti.A++;
          contatore_spostamenti.B++;
      break;
      case 'C':
          posAngoloAdiacente      = {x:parseFloat(angCP.x+(contatore_spostamenti.C)*step_spostamento+spostmento_ini),
                                     y:parseFloat(punto_collegamento_LED.y)};
          contatore_spostamenti.C++;
          contatore_spostamenti.D++;
      break;
      case 'D':
          posAngoloAdiacente      = {x:parseFloat(angDP.x+(contatore_spostamenti.D)*step_spostamento+spostmento_ini),
                                     y:parseFloat(punto_collegamento_LED.y)};
          contatore_spostamenti.C++;
          contatore_spostamenti.D++;
      break;
  }


  collegamento.push(posAngoloAdiacente);
  let usaCentralina = {};
  if(this.contaCentralineLED()==1)
  {
      usaCentralina = JSON.parse(JSON.stringify(centralina_1));
      contUscitaAttiva = contatore_outs_centraline.centralina_1;
      contatore_outs_centraline.centralina_1++;
  }
  else
  {
      if(parseFloat(contatore_outs_centraline.centralina_1)<parseInt(ini_counter+4) && parseFloat(contatore_outs_centraline.centralina_2)<parseInt(ini_counter+4))
      {
          let distanza_cent_1 = calcolaPercorsoCavo(posAngoloAdiacente, centralina_1.uscite[ini_counter+contatore_outs_centraline.centralina_1]);
          let distanza_cent_2 = calcolaPercorsoCavo(posAngoloAdiacente, centralina_2.uscite[ini_counter+contatore_outs_centraline.centralina_2]);

          if(distanza_cent_1<distanza_cent_2)
          {
              usaCentralina = JSON.parse(JSON.stringify(centralina_1));
              contUscitaAttiva = contatore_outs_centraline.centralina_1;
              contatore_outs_centraline.centralina_1++;
          }
          else
          {
              usaCentralina = JSON.parse(JSON.stringify(centralina_2));
              contUscitaAttiva = contatore_outs_centraline.centralina_2;
              contatore_outs_centraline.centralina_2++;
          }
      }
      else
      {
          if(parseFloat(contatore_outs_centraline.centralina_1+1)<parseInt(ini_counter+4))
          {
              usaCentralina = JSON.parse(JSON.stringify(centralina_1));
              contUscitaAttiva = contatore_outs_centraline.centralina_1;
              contatore_outs_centraline.centralina_1++;
          }
          else
          {
              usaCentralina = JSON.parse(JSON.stringify(centralina_2));
              contUscitaAttiva = contatore_outs_centraline.centralina_2;
              contatore_outs_centraline.centralina_2++;
          }
      }
  }

  posInLineaConUscita        = {x:parseFloat(posAngoloAdiacente.x),
                                y:parseFloat(usaCentralina.uscite[ini_counter+contUscitaAttiva].y)};
  collegamento.push(posInLineaConUscita);
  collegamento.push(usaCentralina.uscite[ini_counter+contUscitaAttiva]);

  let sommatore_distanza = 0;
  for(let i=1;i<collegamento.length;i++)
  {
    if(illuminati.includes(lato))
    {
      sDis += '<line   x1="'+collegamento[i-1].x+'" y1="'+collegamento[i-1].y+'" x2="'+collegamento[i].x+'" y2="'+collegamento[i].y+'" style="fill:'+coloreCavo+';stroke-width:'+parseFloat(2*spessoreCavo)+';stroke:'+coloreCavo+'"  />';
      sommatore_distanza += Math.abs(collegamento[i-1].x-collegamento[i].x)+Math.abs(collegamento[i-1].y-collegamento[i].y);
    }
  }
  sommatore_distanza = sommatore_distanza;

  let tmpstr = 'Prolunga RGB 1m';
  if(sommatore_distanza>100) tmpstr = 'Prolunga RGB 3m';
  if(sommatore_distanza>300) tmpstr = 'Prolunga RGB 5m';
  if(sommatore_distanza>500) tmpstr = 'Prolunga RGB 7m';

  if(this.smOBJ.electronics.side.ab>2 || this.smOBJ.electronics.side.ad>2 || this.smOBJ.electronics.side.bc>2 || this.smOBJ.electronics.side.cd>2)
  {
    tmpstr = 'Prolunga Std 1m';
    if(sommatore_distanza>100) tmpstr = 'Prolunga Std 1m';
    if(sommatore_distanza>300) tmpstr = 'Prolunga Std 5m';
    if(sommatore_distanza>500) tmpstr = 'Prolunga Std 7m';
  }

  
  if(illuminati.includes(lato))
  {
    sDis += this.PallinaOggetto( posInLineaConUscita,
                                   {R:20, angle:-45, scala:1},
                                   this.USINGComponents(tmpstr, 1, true).pallinatura);  //
  }
  

 out.sDis = sDis;
 return out;
}

  caricaElementiPerMartinetti()
  {
     let lista = {};
     lista.basi               = [];
     lista.prolunghe          = [];
     lista.antirumore         = [];
     lista.basiPremium        = [];
     lista.prolunghePremium   = [];

     lista.antirumore.push({min:0.1, max:0.1, smeup:'111487', etk:'T0',     pezzi: 0, scatola:120});
     lista.antirumore.push({min:0.2, max:0.2, smeup:'111483', etk:'T1',     pezzi: 0, scatola:180});
     
     
     lista.basi.push({min:0.3, max:0.3, smeup:'111482', etk:'T2',     pezzi: 0, scatola:80});
     lista.basi.push({min:1.1, max:2.1, smeup:'111478', etk:'B1',     pezzi: 0, scatola:30}); // considero tappetino T0 obbligatorio, quindi +0.1
     lista.basi.push({min:2.0, max:3.8, smeup:'111479', etk:'B2',     pezzi: 0, scatola:30}); // considero tappetino T1 obbligatorio, quindi +0.2
     lista.basi.push({min:3.7, max:6.2, smeup:'111480', etk:'B3',     pezzi: 0, scatola:30}); // considero tappetino T1 obbligatorio, quindi +0.2
     lista.basi.push({min:0.0, max:0.1, smeup:'111487', etk:'T0',     pezzi: 0, scatola:120});

     //lista.prolunghe.push({min:0.3, max:0.3, smeup:'111482', etk:'T2', pezzi: 0, scatola:30});
     lista.prolunghe.push({min:2.5, max:2.5, smeup:'111484', etk:'P0', pezzi: 0, scatola:30});
     lista.prolunghe.push({min:5.0, max:5.0, smeup:'111485', etk:'P1', pezzi: 0, scatola:30});
     lista.prolunghe.push({min:10,  max:10,  smeup:'111486', etk:'P2', pezzi: 0, scatola:30}); 
     
     // componenti premium. si possono utilizzare solo su mattonelle
     lista.basiPremium.push({min:0.3,   max:0.3,  smeup:'111482', etk:'T2',     pezzi: 0, scatola:80});
     lista.basiPremium.push({min:3.7,   max:6.0,  smeup:'111501', etk:'S1',     pezzi: 0, scatola:25}); 
     lista.basiPremium.push({min:6.0,   max:9.4,  smeup:'111495', etk:'S2',     pezzi: 0, scatola:25}); 
     lista.basiPremium.push({min:9.4,   max:15.0, smeup:'111496', etk:'S3',     pezzi: 0, scatola:20}); 
     lista.basiPremium.push({min:15.0,  max:27.0, smeup:'111497', etk:'S4',     pezzi: 0, scatola:15});

     lista.prolunghePremium.push({min:12.0, max:12.0, smeup:'111500', etk:'X0', pezzi: 0, scatola:20});   // attenzione: compatibile solo con 111497

    


     return this.cloneMyObj(lista);
  }


  codificaMartinetto(input, premium=false)
  {
    let num = 0;
    let str = '';
    if(premium==false)
    {
      if((input.i!==-1))
      {
        num += parseFloat(this.ElementiPerMartinetti.basi[input.i].max);
        str += this.ElementiPerMartinetti.basi[input.i].etk;
      }
      if((input.j1!==-1))
      {
        num += parseFloat(this.ElementiPerMartinetti.prolunghe[input.j1].max);
        str += '+' + this.ElementiPerMartinetti.prolunghe[input.j1].etk;
      }
      if((input.j2!==-1))
      {
        num += parseFloat(this.ElementiPerMartinetti.prolunghe[input.j2].max);
        str += '+' + this.ElementiPerMartinetti.prolunghe[input.j2].etk;
      }
      if((input.j3!==-1))
      {
        num += parseFloat(this.ElementiPerMartinetti.prolunghe[input.j3].max);
        str += '+' + this.ElementiPerMartinetti.prolunghe[input.j3].etk;
      }
    }
    else
    {
      if((input.i!==-1))
      {
        num += parseFloat(this.ElementiPerMartinetti.basiPremium[input.i].max);
        str += this.ElementiPerMartinetti.basiPremium[input.i].etk;
      }
      if((input.j1!==-1))
      {
        num += parseFloat(this.ElementiPerMartinetti.prolunghePremium[input.j1].max);
        str += '+' + this.ElementiPerMartinetti.prolunghePremium[input.j1].etk;
      }
    }    

    

    //num += (input.i!==-1)? parseFloat(this.ElementiPerMartinetti.basi[input.i].max):0;
    //num += (input.j1!==-1)?parseFloat(this.ElementiPerMartinetti.prolunghe[input.j1].max):0;
    //num += (input.j2!==-1)?parseFloat(this.ElementiPerMartinetti.prolunghe[input.j2].max):0;
    //num += (input.j3!==-1)?parseFloat(this.ElementiPerMartinetti.prolunghe[input.j3].max):0;
    
    return {num:num, str:str};
  }


svgMartinettoInLegenda(posizione, indice)
{
 
 

  let sDis   = '';

 
 
  let font_size = 2/this.grafica.scala;
  let mis_rif   = 2/this.grafica.scala;
  let tmp = this.mappaColoriAltezze(this.codificaElementiMartinetti[indice]); 
  if(tmp.indice>=0)
  {
    sDis += '<g transform="translate('+parseFloat(posizione.x -mis_rif/2)+' '+parseFloat(posizione.y-mis_rif/2) +')">'
    sDis += '<circle r="'+parseFloat(mis_rif)+'" cx="'+parseFloat(mis_rif/2)+'" cy="'+parseFloat(mis_rif/2)+'"';
    sDis += 'style="fill:'+tmp.colore+';stroke:'+tmp.colore+';stroke-width:0.51;fill-opacity:0.91;stroke-opacity:0.9" />';
  
    sDis += '<circle r="'+parseFloat(0.9*mis_rif)+'" cx="'+parseFloat(mis_rif/2)+'" cy="'+parseFloat(mis_rif/2)+'"';
    sDis += 'style="fill:'+tmp.colore+';stroke:black;stroke-width:0.51;fill-opacity:0.91;stroke-opacity:0.9" />';

    sDis += '<text font-weight="normal" font-family="Verdana, sans-serif"  font-size="'+   //text-anchor="middle" alignment-baseline="middle"
                      parseFloat(font_size)+'px" x="'+parseFloat(1.5*mis_rif)+
                      '" y="'+parseFloat(1.5*mis_rif)+
                      '" fill="black">'+parseInt(tmp.indice+1)+'</text>';

    sDis += '<text font-weight="bold" font-family="Verdana, sans-serif"  font-size="'+   //text-anchor="middle" alignment-baseline="middle"
                  parseFloat(font_size)+'px" x="'+parseFloat(3*mis_rif)+
                  '" y="'+parseFloat(mis_rif)+
                  '" fill="black"> &#8680; &nbsp;'+this.codificaElementiMartinetti[indice].str+'</text>';                  

    sDis += '</g>';
  }
 

 return sDis;
}

svgElementiMartinettoInLegenda(posizione, lista, indice)
{

  let sDis   = '';

 
  let font_size = 2/this.grafica.scala;

  if(lista[indice].pezzi>0)
  {

    sDis += '<g transform="translate('+parseFloat(posizione.x)+' '+parseFloat(posizione.y) +')">'
    
    sDis += '<text font-weight="normal" font-family="Verdana, sans-serif"  font-size="'+   //text-anchor="middle" alignment-baseline="middle"
                      parseFloat(font_size)+'px" x="'+parseFloat(0)+
                      '" y="'+parseFloat(5)+
                      '" fill="black">'+lista[indice].etk+'</text>';

    sDis += '<text font-weight="bold" font-family="Verdana, sans-serif"  font-size="'+   //text-anchor="middle" alignment-baseline="middle"
                  parseFloat(font_size)+'px" x="'+parseFloat(26)+
                  '" y="'+parseFloat(5)+
                  '" fill="black"> &#8680; &nbsp;'+lista[indice].pezzi+' pcs</text>';                  

    sDis += '</g>';
  }
 

 return sDis;
}




  svgLegendaMartinetti()
  {

    let n = this.codificaElementiMartinetti.length;
    let max_col   = 4;
    let n_col     = (n>max_col)?max_col:n;
    let n_row     = Math.ceil(n/n_col);
    let h_row     = 6/this.grafica.scala;

    
   


    let offset= {x:20/this.grafica.scala, y:10/this.grafica.scala};
    let h     = parseFloat(n_row*h_row);

    let sDis = '';
    let start = {x:this.grafica.piano.vertici.vA1.x-offset.x,
                 y:this.grafica.piano.vertici.vA1.y+offset.y,
                };

    let dim   = {W:parseFloat(this.grafica.piano.vertici.vA2.x-this.grafica.piano.vertici.vA1.x+2*offset.x),
                 H:h
                };
    let w_col     = parseFloat(dim.W/n_col);            
   

    ///// combinazione martinetti
    sDis += '<rect width="'+dim.W+'" height="'+dim.H+'" x="'+start.x+'" y="'+start.y+'" style="fill:silver;stroke:none;stroke-width:1;opacity:1" />';

    let indice    = 0;
    for(let j=0;j<n_row;j++) 
    {
      for(let i=0; i<n_col;i++)
      
      {
        let posizione = { x:parseFloat(start.x+i*w_col+w_col/6),
                          y:parseFloat(start.y+j*h_row+h_row/2)
                        }; 
        if(indice<n)  sDis += this.svgMartinettoInLegenda(posizione, indice);
        indice++;
      }
    }

    ///// Elementi martinetti 
    let lista = [];
    this.ElementiPerMartinetti.basi[0].pezzi += this.ElementiPerMartinetti.prolunghe[0].pezzi;  // tappeto

    for(let i=0;i<this.ElementiPerMartinetti.basi.length;i++)
    {
      if(this.ElementiPerMartinetti.basi[i].pezzi>0)
        lista.push(this.cloneMyObj(this.ElementiPerMartinetti.basi[i]));
    }
    for(let i=1;i<this.ElementiPerMartinetti.prolunghe.length;i++)
    {
      if(this.ElementiPerMartinetti.prolunghe[i].pezzi>0)
        lista.push(this.cloneMyObj(this.ElementiPerMartinetti.prolunghe[i]));
    }
    for(let i=0;i<this.ElementiPerMartinetti.basiPremium.length;i++)
    {
      if(this.ElementiPerMartinetti.basiPremium[i].pezzi>0)
        lista.push(this.cloneMyObj(this.ElementiPerMartinetti.basiPremium[i]));
    }
    for(let i=0;i<this.ElementiPerMartinetti.prolunghePremium.length;i++)
    {
      if(this.ElementiPerMartinetti.prolunghePremium[i].pezzi>0)
        lista.push(this.cloneMyObj(this.ElementiPerMartinetti.prolunghePremium[i]));
    }

    //console.log(this.cloneMyObj(lista));
  
    n         = lista.length; 
    max_col   = 4;
    n_col     = (n>max_col)?max_col:n;
    n_row     = Math.ceil(n/n_col);
    h_row     = 6/this.grafica.scala;
   
    offset= {x:20/this.grafica.scala, y:10/this.grafica.scala};
    h     = parseFloat(n_row*h_row);

    
    start = {x:this.grafica.piano.vertici.vA1.x-offset.x,
             y:this.grafica.piano.vertici.vA1.y+offset.y+dim.H+offset.y/2,
                };

    dim   = {W:parseFloat(this.grafica.piano.vertici.vA2.x-this.grafica.piano.vertici.vA1.x+2*offset.x),
             H:h
            };

    w_col     = parseFloat(dim.W/max_col); 
    sDis += '<rect width="'+dim.W+'" height="'+dim.H+'" x="'+start.x+'" y="'+start.y+'" style="fill:silver;stroke:none;stroke-width:1;opacity:0.51" />';

    indice    = 0;
    for(let j=0;j<n_row;j++)
    {
      for(let i=0; i<n_col;i++)
      {          
        let posizione = { x:parseFloat(start.x+i*w_col+w_col/6),
                          y:parseFloat(start.y+j*h_row+h_row/2)
                        }; 
        if(indice<n)  
        {
          sDis += this.svgElementiMartinettoInLegenda(posizione, lista, indice++);
        }  
          
          
      }
    }


    return sDis;
  }



  calcolaElementiAltezza(altezza, premium=false)
  {
     let tmp_base         = this.cloneMyObj(this.ElementiPerMartinetti.basi);
     let tmp_prol         = this.cloneMyObj(this.ElementiPerMartinetti.prolunghe);

     let tmp_basePremium  = this.cloneMyObj(this.ElementiPerMartinetti.basiPremium);
     let tmp_prolPremium  = this.cloneMyObj(this.ElementiPerMartinetti.prolunghePremium);
     
     

     for(let i=0;i<tmp_base.length;i++) {tmp_base[i].pezzi = 0; tmp_base[i].margine = parseFloat(tmp_base[i].max-tmp_base[i].min);}
     for(let i=0;i<tmp_prol.length;i++) {tmp_prol[i].pezzi = 0; tmp_prol[i].margine = parseFloat(tmp_prol[i].max-tmp_prol[i].min);}

     for(let i=0;i<tmp_basePremium.length;i++) {tmp_basePremium[i].pezzi = 0; tmp_basePremium[i].margine = parseFloat(tmp_basePremium[i].max-tmp_basePremium[i].min);}
     for(let i=0;i<tmp_prolPremium.length;i++) {tmp_prolPremium[i].pezzi = 0; tmp_prolPremium[i].margine = parseFloat(tmp_prolPremium[i].max-tmp_prolPremium[i].min);}

     let ottimo = {n_pezzi:100, errore:1000, i:-1, j1:-1, j2:-1, j3:-1, found:false};



     if(altezza>=0)
     {
         
        if(premium==false)
        {
            for(let i=0;i<tmp_base.length;i++)
            {
              if(altezza>=tmp_base[i].min)
              {
                if(altezza>tmp_base[i].max)
                {
                    // non basta l'elemento base, devo usare le prolunghe
                    for(let j1=0;j1<tmp_prol.length;j1++)
                    {
                      if(altezza>=parseFloat(tmp_base[i].min+tmp_prol[j1].min))
                      {
                          if(altezza<=parseFloat(tmp_base[i].max+tmp_prol[j1].min))
                          {
                            // altezza compresa nell'intervallo, è una soluzione
                            if(ottimo.n_pezzi>2 || !ottimo.found)
                              {
                                ottimo.errore    = 0;
                                ottimo.n_pezzi   = 2;
                                ottimo.i         = i;
                                ottimo.j1        = j1;
                                ottimo.j2        = -1;
                                ottimo.j3        = -1;
                                ottimo.found     = true;
                              } 
                          }
                          else
                          {
                            // non mi basta la prolunga, provo ad aggiungere
                            for(let j2=0;j2<tmp_prol.length;j2++)
                              {
                                if(altezza>=parseFloat(tmp_base[i].min+tmp_prol[j1].min+tmp_prol[j2].min))
                                {
                                    if(altezza<=parseFloat(tmp_base[i].max+tmp_prol[j1].min+tmp_prol[j2].min))
                                      {
                                        // altezza compresa nell'intervallo, è una soluzione
                                        if(ottimo.n_pezzi>3 || !ottimo.found)
                                          {
                                            ottimo.errore    = 0;
                                            ottimo.n_pezzi   = 3;
                                            ottimo.i         = i;
                                            ottimo.j1        = j1;
                                            ottimo.j2        = j2;
                                            ottimo.j3        = -1;
                                            ottimo.found     = true;
                                          } 
                                      } 
                                      else
                                      {
                                        // non mi basta la prolunga, provo ad aggiungere
                                          for(let j3=0;j3<tmp_prol.length;j3++)
                                            {
                                              if(altezza>=parseFloat(tmp_base[i].min+tmp_prol[j1].min+tmp_prol[j2].min+tmp_prol[j3].min))
                                              {
                                                  if(altezza<=parseFloat(tmp_base[i].max+tmp_prol[j1].min+tmp_prol[j2].min+tmp_prol[j3].min))
                                                    {
                                                      // altezza compresa nell'intervallo, è una soluzione
                                                      if(ottimo.n_pezzi>4 || !ottimo.found)
                                                        {
                                                          ottimo.errore    = 0;
                                                          ottimo.n_pezzi   = 4;
                                                          ottimo.i         = i;
                                                          ottimo.j1        = j1;
                                                          ottimo.j2        = j2;
                                                          ottimo.j3        = j3;
                                                          ottimo.found     = true;
                                                        } 
                                                    } 
                                                    else
                                                    {
                                                      // non mi basta la prolunga, ma mi fermo qui

                                                    } 
                                              }
                                              else
                                              {
                                                // questa prolunga non va bene perché sforo come altezza
                                              }
                                            } 

                                      } 
                                }
                                else
                                {
                                  // questa prolunga non va bene perché sforo come altezza
                                }
                              } 
                          }
                      }
                      else
                      {
                        // questa prolunga non va bene perché sforo come altezza
                      }
                    }
                }
                else
                {
                  // altezza compresa nell'intervallo del martinetto base ===> è una soluzione
                  if(ottimo.n_pezzi>1 || !ottimo.found)
                  {
                    ottimo.errore    = 0;
                    ottimo.n_pezzi   = 1;
                    ottimo.i         = i;
                    ottimo.j1        = -1;
                    ottimo.j2        = -1;
                    ottimo.j3        = -1;
                    ottimo.found     = true;
                  }
                }
              }
              else
              {
                // altezza sotto la misura minima del martinetto, non ho soluzione
              }
            }
        }
        else
        {
            for(let i=0;i<tmp_basePremium.length;i++)
            {
              if(altezza>=tmp_basePremium[i].min)
              {
                if(altezza>tmp_basePremium[i].max)
                {
                    // non basta l'elemento base, devo usare le prolunghe
                    // ma è compatibile solamente con la versione maggiore delle base
                    if(tmp_basePremium[i].etk=='S4')
                    {
                      for(let j1=0;j1<tmp_prolPremium.length;j1++)
                      {
                        if(altezza>=parseFloat(tmp_basePremium[i].min+tmp_prolPremium[j1].min))
                        {
                            if(altezza<=parseFloat(tmp_basePremium[i].max+tmp_prolPremium[j1].min))
                            {
                              // altezza compresa nell'intervallo, è una soluzione
                              if(ottimo.n_pezzi>2 || !ottimo.found)
                                {
                                  ottimo.errore    = 0;
                                  ottimo.n_pezzi   = 2;
                                  ottimo.i         = i;
                                  ottimo.j1        = j1;
                                  ottimo.j2        = -1;
                                  ottimo.j3        = -1;
                                  ottimo.found     = true;
                                } 
                            }
                            else
                            {
                              // non ho soluzione
                            }
                        }
                        else
                        {
                          // questa prolunga non va bene perché sforo come altezza
                        }
                      }
                    }
                    else
                      {
                        // non ho soluzione
                      }                       
                }
                else
                {
                  // altezza compresa nell'intervallo del martinetto base ===> è una soluzione
                  if(ottimo.n_pezzi>1 || !ottimo.found)
                  {
                    ottimo.errore    = 0;
                    ottimo.n_pezzi   = 1;
                    ottimo.i         = i;
                    ottimo.j1        = -1;
                    ottimo.j2        = -1;
                    ottimo.j3        = -1;
                    ottimo.found     = true;
                  }
                }
              }
              else
              {
                // altezza sotto la misura minima del martinetto, non ho soluzione
              }
            }
        }    
          
     }
     else
     {
        // altezza nulla, non metto martinetto
        
     }

     if(ottimo.found)
     {
       if(premium==false)
       {
          if(ottimo.i!==-1)
            {
              this.ElementiPerMartinetti.basi[ottimo.i].pezzi++;
              if(ottimo.i==1)              this.ElementiPerMartinetti.antirumore[0].pezzi++;  
              if(ottimo.i==2||ottimo.i==3) this.ElementiPerMartinetti.antirumore[1].pezzi++;  
            }   

          if(ottimo.j1!==-1)  this.ElementiPerMartinetti.prolunghe[ottimo.j1].pezzi++;
          if(ottimo.j2!==-1)  this.ElementiPerMartinetti.prolunghe[ottimo.j2].pezzi++;
          if(ottimo.j3!==-1)  this.ElementiPerMartinetti.prolunghe[ottimo.j3].pezzi++;

          let found = false;
          for(let i=0;i<this.codificaElementiMartinetti.length;i++)
          {
            if(JSON.stringify(this.codificaElementiMartinetti[i])==JSON.stringify(this.codificaMartinetto(ottimo)) )
            {
              found = true;
              break;
            }
          }
          if(!found) this.codificaElementiMartinetti.push(this.cloneMyObj(this.codificaMartinetto(ottimo)));
       }
       else
       {
          if(ottimo.i!==-1)
            {
              this.ElementiPerMartinetti.basiPremium[ottimo.i].pezzi++;            
            }   

          if(ottimo.j1!==-1)  this.ElementiPerMartinetti.prolunghePremium[ottimo.j1].pezzi++;
          
          let found = false;
          for(let i=0;i<this.codificaElementiMartinetti.length;i++)
          {
            if(JSON.stringify(this.codificaElementiMartinetti[i])==JSON.stringify(this.codificaMartinetto(ottimo, premium)) )
            {
              found = true;
              break;
            }
          }
          if(!found) this.codificaElementiMartinetti.push(this.cloneMyObj(this.codificaMartinetto(ottimo, premium)));

       } 
     }

     
     return this.cloneMyObj(this.codificaMartinetto(ottimo, premium));
  }




  preparaListaSVG(){

      let settings = {
              vedi_ingombri:      true,
              vedi_profili:       true,
              vedi_markerNodi:    true,
              vedi_profili:       true,
              vedi_etichette:     false,
              vedi_misure:        false,
              carica_coverZones:  true,
              vedi_piastreComp:   true,
              vedi_gambe:         true,
              vedi_zavorre:       true,
              vedi_quoteEsterne:  false,
              vedi_coverZones:    false,
              piazza_martinetti:  true,
              vedi_martinetti:    false,
              vedi_ricoprimento:  true,
              vedi_magatelli:     true,
              vedi_vetrate:       true,
              vedi_lattoneria:    false,
              vedi_ledStrip:      true,
              vedi_cablaggio:     false,
              vedi_powerLines:    false,
              vedi_componenti_elettronici: false,
              vedi_3D:            false,
              vedi_3D_martinetti: false             
                  };

      this.SVGgenerale('1', settings);
      
      settings.carica_coverZones   = false;
      settings.vedi_etichette      = true;
      settings.vedi_misure         = true;
      settings.vedi_quoteEsterne   = true;
      settings.vedi_zavorre        = false;
      settings.piazza_martinetti   = false;
      settings.vedi_ricoprimento   = false;
      settings.vedi_magatelli      = false;
      settings.vedi_vetrate        = false;
      settings.vedi_ledStrip       = false;
      
      this.SVGgenerale('2', settings);

      settings.vedi_etichette      = false;
      settings.vedi_misure         = false;
      settings.vedi_quoteEsterne   = false;
      settings.vedi_zavorre        = true;
      settings.vedi_martinetti     = true;
      settings.vedi_coverZones     = false;
      settings.vedi_magatelli      = true;
      settings.vedi_ricoprimento   = true;
      this.SVGgenerale('3', settings);

      settings.vedi_lattoneria     = true;
      this.SVGgenerale('4', settings);

      
      settings.vedi_zavorre        = false;
      settings.vedi_martinetti     = false;
      settings.vedi_coverZones     = false;
      settings.vedi_magatelli      = false;
      settings.vedi_lattoneria     = false;
      settings.vedi_ricoprimento   = true;
      settings.vedi_magatelli      = false;
      settings.vedi_vetrate        = false;
      settings.vedi_ledStrip       = true;
      settings.vedi_cablaggio      = true;
      if(this.lista_stripLED.length>0)
         this.SVGgenerale('5', settings);

      
      settings.vedi_markerNodi    = false;
      settings.vedi_ingombri      = false;
      settings.vedi_profili       = false;
      settings.vedi_etichette     = false;
      settings.vedi_misure        = false;
      settings.carica_coverZones  = false;
      settings.vedi_piastreComp   = false;
      settings.vedi_gambe         = false;
      settings.vedi_zavorre       = false;
      settings.vedi_quoteEsterne  = false;
      settings.vedi_coverZones    = false;
      settings.piazza_martinetti  = false;
      settings.vedi_martinetti    = false;
      settings.vedi_ricoprimento  = false;
      settings.vedi_magatelli     = false;
      settings.vedi_vetrate       = false;
      settings.vedi_lattoneria    = false;
      settings.vedi_ledStrip      = false;
      settings.vedi_cablaggio     = false;
      settings.vedi_powerLines    = true;
      settings.vedi_componenti_elettronici = false;
      if(this.lista_stripLED.length>0)
         this.SVGgenerale('6', settings);  

      settings.vedi_powerLines    = false;
      settings.vedi_componenti_elettronici = true;
      if(this.lista_stripLED.length>0)
         this.SVGgenerale('7', settings); 
        
      
      settings.vedi_componenti_elettronici = false;
      settings.vedi_3D_martinetti          = true;
      this.SVGgenerale('8', settings); 

      settings.vedi_3D_martinetti          = false;
      settings.vedi_3D                     = true;
      this.SVGgenerale('9', settings); 


  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////// Render grafici

render_PROLUNGA_RGB(dim_target, etk, obj)
{
let dimensioni = {w:84.989, h:47.622};
let info = this.setupCurrentScale(dimensioni, dim_target); 
let sDis = '';
sDis += '<g>';
//sDis += this.ScriviLabel(info.pos, etk, obj);
sDis += '<g transform="translate('+info.pos.x+' '+info.pos.y+')" ><g transform="scale('+info.scale+')" ><g transform="matrix(.74789 0 0 .74789 -30.972 -62.768)"><g transform="matrix(.35278 0 0 -.35278 86.693 113.61)"><path d="m0 0c14.134-12.741 16.458-36.902 37.558-45.107" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 91.085 116.86)"><path d="m0 0c6.816-11.948 12.403-25.408 27.103-31.125" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 104.81 118.97)"><path d="m0 0c8.285-3.128 12.292-6.466 15.651-9.654 2.613-2.481 6.059-4.375 9.08-5.8" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 114.04 122.93)"><path d="m0 0c-2.42 1.15-5.184 2.712-7.571 4.892-3.173 2.897-7.097 6.289-14.44 9.442" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 84.746 105.6)"><path d="m0 0c7.194-3.699 10.969-7.41 14.925-11.297 5.176-5.087 10.528-10.346 24.993-16.359 0.831-0.345 1.653-0.662 2.465-0.95m-86.149 61.606c-8.117-0.326-15.054-2.211-18.646-4.761-0.902-0.64-2.396-1.915-2.246-3.247 0.079-0.709 0.908-3.26 8.225-6.301 14.972-6.222 21.931-7.743 28.66-9.214 6.032-1.319 11.73-2.563 22.377-6.989 1.014-0.421 1.974-0.842 2.884-1.263m7.619 5.521c-2.386 2.27-3.232 4.336-4.062 6.362-1.492 3.643-3.033 7.406-16.407 14.027m69.047-57.927c3.521 3e-3 6.49 0.819 8.629 2.456 2.032 1.556 2.982 3.712 2.674 6.071-0.527 4.034-4.53 7.976-10.709 10.543-0.284 0.118-0.564 0.233-0.839 0.345m-41.37 18.464c1.13-0.662 2.472-1.362 4.075-2.116 11.001-5.168 16.404-6.231 22.126-7.357 4.74-0.932 9.641-1.896 17.706-5.248 7.772-3.23 12.656-8.354 13.4-14.058 0.513-3.936-1.081-7.639-4.373-10.159-1.695-1.297-5.368-3.377-11.484-3.376-2.004 0-4.27 0.222-6.815 0.77m-83.165 71.77c7.758-0.56 15.255-2.45 21.621-5.509 16.198-7.783 18.208-12.69 19.98-17.018 0.862-2.105 1.605-3.919 4.443-6.062m-76.284 11.176c-1.388 1.454-2.176 2.989-2.357 4.599-0.211 1.881 0.326 4.684 4.083 7.35 0.698 0.495 1.477 0.963 2.33 1.402m84.547-56.352c-4.393 3.057-7.333 5.947-10.081 8.647-3.902 3.835-7.618 7.487-15.045 11.113" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 92.34 115.77)"><path d="m0 0c2.617-1.418 5.664-2.874 9.28-4.377 7.375-3.065 14.094-3.893 18.863-2.444m-118.7 50.447c0.957-0.528 2.105-1.084 3.483-1.657 14.971-6.222 21.93-7.742 28.66-9.214 6.032-1.318 11.729-2.563 22.377-6.988m-55.406 26.733c-0.593-0.314-1.131-0.642-1.61-0.982m65.192-18.694c-0.776 1.221-1.259 2.399-1.735 3.563-1.542 3.765-3.137 7.66-17.801 14.706-7.797 3.746-16.582 5.236-24.502 5.236-5.002 0-9.66-0.595-13.503-1.59m115.31-46.828c-1.69 1.379-3.809 2.622-6.273 3.646-7.656 3.182-12.128 4.062-16.862 4.993-4.376 0.861-8.866 1.744-15.861 4.516m43.43-21.777c0.078 0.558 0.079 1.135 2e-3 1.725m2.073 6.391c1.26-1.826 2.052-3.785 2.317-5.819 0.055-0.426 0.086-0.849 0.093-1.268m-57.106 29.877c1.066-0.612 2.314-1.257 3.78-1.945 11.001-5.169 16.405-6.231 22.126-7.357 4.349-0.855 8.833-1.738 15.772-4.466m-95.967 44.336c9.66 0.087 19.234-1.908 27.086-5.681 0.527-0.253 1.039-0.503 1.537-0.751m-52.872-0.152c0.357 0.317 0.756 0.634 1.2 0.948 1.381 0.981 3.086 1.856 5.042 2.608m61.63-40.243c-1.733 0.933-6.553 3.256-8.792 4.187-10.282 4.273-15.791 5.477-21.624 6.753-6.92 1.512-14.076 3.076-29.413 9.449-6.832 2.84-10.508 6.169-10.926 9.896m135.44-55.126c-0.42-0.433-0.879-0.841-1.378-1.223-1.696-1.298-5.369-3.378-11.485-3.377-4.007 0-9.065 0.893-15.299 3.484-15.259 6.342-21.177 12.158-26.398 17.29-3.084 3.03-2.94 3.89-7.715 6.77" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 84.642 104.38)"><path d="m0 0c-8.224 4.278-9.631 7.714-10.997 11.047-1.541 3.766-3.136 7.66-17.8 14.706-7.797 3.747-16.582 5.236-24.501 5.236-9.181 0-17.198-2.003-21.155-4.811-0.903-0.641-2.396-1.916-2.247-3.248 0.08-0.708 0.908-3.26 8.226-6.301 14.971-6.222 21.93-7.743 28.66-9.214 6.032-1.318 11.73-2.563 22.377-6.988 5.08-2.111 8.786-4.215 11.785-6.34m2.421-1.835c2.278-1.84 4.174-3.704 6.115-5.611 5.176-5.086 10.528-10.346 24.993-16.358 9.449-3.927 17.821-4.181 22.395-0.681 2.033 1.556 2.982 3.712 2.674 6.071-0.526 4.034-4.529 7.976-10.709 10.543-7.656 3.182-12.128 4.062-16.862 4.994-5.677 1.117-11.546 2.271-22.825 7.539m4.179 2.957c9.274-4.142 14.253-5.121 19.5-6.153 4.741-0.933 9.641-1.897 17.707-5.249 7.772-3.23 12.655-8.353 13.399-14.058 0.514-3.935-1.08-7.638-4.372-10.158-1.696-1.298-5.369-3.378-11.484-3.377-4.008 0-9.066 0.893-15.3 3.484-15.259 6.342-21.177 12.158-26.398 17.289-1.825 1.794-3.61 3.548-5.752 5.278m-2.277 1.722c-2.782 1.968-6.211 3.912-10.887 5.855-10.282 4.273-15.792 5.477-21.625 6.752-6.92 1.513-14.075 3.077-29.412 9.451-6.832 2.839-10.508 6.168-10.926 9.895-0.212 1.881 0.326 4.684 4.083 7.35 4.566 3.242 12.673 5.338 21.685 5.61 10.12 0.297 20.228-1.704 28.45-5.655 16.198-7.783 18.207-12.689 19.98-17.018 1.316-3.214 2.356-5.751 11.003-9.814" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 90.392 103.74)"><path d="m0 0c-0.455 0.676-1.058 1.241-1.824 1.67-7.101 3.976-27.768-12.501-17.994-20.879 0.586-0.503 1.199-0.89 1.831-1.171" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 89.585 103.07)"><path d="m0 0c-0.224 0.177-0.466 0.339-0.728 0.485-7.1 3.976-27.768-12.501-17.994-20.879 0.587-0.503 1.199-0.89 1.832-1.171" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 102.23 132.09)"><path d="m0 0-4.642 2.442c-1.18 0.54-1.956 1.958-1.956 3.931 0 1.119 0.25 2.266 0.681 3.326 0.786 1.932 2.176 3.575 3.76 4.231 0.919 0.381 1.774 0.375 2.482 0.052l4.931-1.579" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 105.44 127.84)"><path d="m0 0c1.3 0.539 2.509 0.53 3.51 0.074l0.263-0.11 14.704-6.117" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 109.72 135.85)"><path d="m0 0-15.622 6.457c-1.668 0.762-2.766 2.768-2.766 5.557 0 1.582 0.354 3.204 0.963 4.703" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 103.25 132.76)"><path d="m0 0c-1.303 0.604-1.978 2.518-1.978 4.728 0 0.805 0.114 1.624 0.322 2.422l0.069 0.162-1.884 0.792" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 104.28 128.11)"><path d="m0 0c-1.312-0.551-2.503-1.724-3.383-3.189l-0.096-0.226-1.858 0.78" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 102.03 129.88)"><path d="m0 0c-0.236-0.837-0.367-1.702-0.367-2.552 0-2.146 0.832-3.689 2.098-4.276" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 104.52 127.86)"><path d="m0 0c-0.76 0.352-1.677 0.358-2.664-0.056-1.274-0.535-2.431-1.675-3.286-3.098" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 101.94 131.93)"><path d="m0 0c-1.231 0.57-2.041 2.071-2.041 4.159 0 0.784 0.115 1.582 0.323 2.357l0.013 0.03-1.943 0.816" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 103.77 127.62)"><path d="m0 0c-0.739 0.342-1.631 0.348-2.591-0.055-1.24-0.52-2.365-1.629-3.197-3.013l-0.057-0.135-1.927 0.809" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 100.65 129.33)"><path d="m0 0c-0.204-0.758-0.316-1.539-0.316-2.307 0-2.033 0.788-3.496 1.988-4.051" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 103.02 127.37)"><path d="m0 0c-0.72 0.333-1.59 0.34-2.525-0.053-1.181-0.496-2.256-1.54-3.06-2.847" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 105.94 127.71)"><path d="m0 0c-1.89-0.223-2.753-0.848-5.253-0.015" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 104.2 133.57)"><path d="m0 0c-1.719 0.726-3.191 2.936-5.586 4.206" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 104.74 131.31)"><path d="m0 0 7.274-3.013v1.048l4.187-5.054-4.187-1.584v1.048l-7.274 3.013z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 116.83 133.3)"><path d="m0 0 4.686-1.922c0.21-0.096 0.787-0.713 0.449-1.389-0.385-0.77-1.209-0.726-1.335-0.668l-5.391 2.211" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.39 134.06)"><path d="m0 0c-0.094 0.042-0.208 0.043-0.33-7e-3 -0.21-0.087-0.395-0.305-0.499-0.562-0.058-0.141-0.091-0.294-0.091-0.442 0-0.262 0.103-0.451 0.26-0.523" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 116.05 134.18)"><path d="m0 0 2.741-1.125c0.211-0.095 0.788-0.712 0.45-1.388-0.385-0.771-1.209-0.726-1.336-0.669l-2.765 1.135" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 116.93 134.66)"><path d="m0 0c-0.094 0.043-0.208 0.044-0.33-7e-3 -0.211-0.087-0.395-0.305-0.5-0.562-0.057-0.141-0.09-0.293-0.09-0.442 0-0.262 0.103-0.451 0.26-0.522" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.67 134.88)"><path d="m0 0 7.953-3.262c0.211-0.096 0.788-0.713 0.449-1.389-0.385-0.77-1.208-0.726-1.335-0.669l-7.648 3.138" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.39 136.11)"><path d="m0 0c-0.094 0.043-0.208 0.044-0.33-7e-3 -0.21-0.087-0.395-0.305-0.499-0.562-0.058-0.141-0.091-0.293-0.091-0.442 0-0.262 0.103-0.45 0.26-0.522" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.42 135.98)"><path d="m0 0 4.534-1.86c0.211-0.096 0.788-0.713 0.45-1.389-0.385-0.77-1.209-0.726-1.336-0.668l-3.734 1.531" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 116.93 136.71)"><path d="m0 0c-0.094 0.043-0.208 0.044-0.33-7e-3 -0.211-0.087-0.395-0.305-0.5-0.562-0.057-0.141-0.09-0.293-0.09-0.442 0-0.262 0.103-0.451 0.26-0.522" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.14 132.05)"><path d="m0 0c2.049-0.935 3.397-3.396 3.397-6.821 0-1.995-0.457-4.042-1.244-5.924-1.373-3.288-3.754-6.071-6.462-7.193-1.598-0.662-3.083-0.65-4.313-0.088" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.92 132.57)"><path d="m0 0c1.75-0.798 2.902-2.902 2.902-5.828 0-1.705-0.39-3.453-1.062-5.061-1.174-2.81-3.208-5.188-5.522-6.146-1.365-0.566-2.633-0.556-3.685-0.075" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 118.92 132.57)"><path d="m0 0c-1.051 0.479-2.318 0.488-3.682-0.077-2.348-0.972-4.409-3.409-5.573-6.274-0.64-1.572-1.011-3.274-1.011-4.932 0-2.925 1.15-5.028 2.899-5.827" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 112.71 137.7)"><path d="m0 0c-0.406 0.066-0.793 0.185-1.157 0.352-2.048 0.936-3.394 3.397-3.394 6.82 0 1.941 0.434 3.932 1.183 5.772 1.363 3.353 3.775 6.205 6.523 7.344 1.596 0.661 3.079 0.65 4.309 0.089 0.271-0.123 0.529-0.273 0.774-0.449" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 112.19 137.5)"><path d="m0 0c-1.678 1.125-2.745 3.411-2.745 6.458 0 1.94 0.434 3.932 1.183 5.771 1.363 3.354 3.775 6.206 6.523 7.344 1.304 0.54 2.532 0.632 3.608 0.342" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 112.02 136.64)"><path d="m0 0c-0.634 1.079-1 2.503-1 4.188 0 1.734 0.388 3.513 1.057 5.157 1.217 2.995 3.372 5.543 5.827 6.56 0.244 0.101 0.486 0.185 0.723 0.251" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 111.95 137.39)"><path d="m0 0c-0.406 0.067-0.792 0.185-1.157 0.352-2.047 0.936-3.393 3.397-3.393 6.82 0 1.941 0.433 3.932 1.182 5.772 1.363 3.354 3.775 6.206 6.523 7.344 1.597 0.661 3.079 0.65 4.31 0.089 0.27-0.123 0.529-0.273 0.773-0.448" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 111.43 137.19)"><path d="m0 0c-1.678 1.125-2.745 3.41-2.745 6.457 0 1.941 0.434 3.933 1.183 5.772 1.363 3.354 3.775 6.206 6.523 7.344 1.304 0.54 2.532 0.632 3.608 0.342" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 111.26 136.33)"><path d="m0 0c-0.634 1.079-1 2.503-1 4.188 0 1.734 0.388 3.514 1.057 5.157 1.218 2.996 3.373 5.543 5.827 6.56 0.245 0.101 0.486 0.185 0.724 0.251" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 111.18 137.08)"><path d="m0 0c-0.406 0.067-0.792 0.185-1.157 0.352-2.048 0.936-3.394 3.397-3.394 6.82 0 1.941 0.434 3.933 1.183 5.772 1.363 3.354 3.775 6.206 6.523 7.344 1.596 0.661 3.079 0.651 4.309 0.09 0.271-0.124 0.53-0.274 0.774-0.449" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 110.67 136.89)"><path d="m0 0c-1.678 1.125-2.745 3.41-2.745 6.457 0 1.941 0.434 3.933 1.183 5.772 1.363 3.354 3.775 6.206 6.523 7.344 1.304 0.54 2.532 0.632 3.608 0.342" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 110.5 136.03)"><path d="m0 0c-0.634 1.079-1 2.503-1 4.189 0 1.734 0.388 3.513 1.057 5.156 1.218 2.996 3.373 5.544 5.827 6.56 0.244 0.101 0.486 0.185 0.724 0.252" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 113.47 138.01)"><path d="m0 0c-0.406 0.067-0.792 0.185-1.157 0.352-2.048 0.936-3.394 3.397-3.394 6.82 0 1.941 0.434 3.933 1.183 5.772 1.363 3.354 3.775 6.206 6.523 7.344 1.596 0.661 3.079 0.651 4.309 0.09 0.271-0.124 0.53-0.274 0.774-0.449" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 112.95 137.81)"><path d="m0 0c-1.678 1.125-2.744 3.41-2.744 6.457 0 1.941 0.433 3.933 1.182 5.772 1.363 3.354 3.775 6.206 6.523 7.344 1.304 0.54 2.532 0.632 3.609 0.342" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 112.78 136.95)"><path d="m0 0c-0.634 1.079-1 2.503-1 4.189 0 1.734 0.388 3.513 1.057 5.156 1.217 2.996 3.372 5.544 5.827 6.56 0.244 0.101 0.486 0.185 0.724 0.252" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.23 138.31)"><path d="m0 0c-0.406 0.067-0.792 0.185-1.157 0.352-2.047 0.936-3.394 3.397-3.394 6.82 0 1.941 0.434 3.932 1.183 5.772 1.363 3.354 3.775 6.206 6.523 7.344 1.597 0.661 3.079 0.65 4.31 0.089 0.27-0.123 0.529-0.273 0.773-0.448" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 113.72 138.12)"><path d="m0 0c-1.678 1.125-2.745 3.41-2.745 6.457 0 1.941 0.434 3.933 1.183 5.772 1.363 3.354 3.775 6.206 6.523 7.344 1.304 0.54 2.532 0.632 3.608 0.342" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 113.54 137.26)"><path d="m0 0c-0.634 1.079-1 2.503-1 4.188 0 1.734 0.388 3.514 1.057 5.157 1.218 2.996 3.373 5.543 5.827 6.56 0.245 0.101 0.486 0.185 0.724 0.251" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.99 138.62)"><path d="m0 0c-0.405 0.067-0.792 0.185-1.157 0.352-2.047 0.936-3.393 3.397-3.393 6.82 0 1.941 0.433 3.933 1.182 5.773 1.364 3.353 3.775 6.205 6.523 7.343 1.597 0.661 3.079 0.651 4.31 0.09 0.27-0.124 0.529-0.274 0.773-0.449" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 114.48 138.42)"><path d="m0 0c-1.678 1.125-2.745 3.41-2.745 6.458 0 1.94 0.434 3.932 1.183 5.771 1.363 3.354 3.775 6.206 6.523 7.344 1.304 0.54 2.532 0.632 3.608 0.342" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.31 137.56)"><path d="m0 0c-0.634 1.079-0.999 2.503-0.999 4.189 0 1.734 0.387 3.513 1.056 5.156 1.218 2.996 3.373 5.544 5.827 6.56 0.245 0.101 0.486 0.185 0.724 0.252" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.75 138.93)"><path d="m0 0c-0.405 0.067-0.792 0.185-1.157 0.352-2.047 0.936-3.393 3.397-3.393 6.82 0 1.941 0.434 3.933 1.182 5.772 1.364 3.354 3.776 6.206 6.523 7.344 1.597 0.661 3.08 0.65 4.31 0.089 0.27-0.123 0.529-0.273 0.774-0.448" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 115.24 138.73)"><path d="m0 0c-1.678 1.125-2.744 3.41-2.744 6.458 0 1.94 0.433 3.932 1.182 5.771 1.363 3.354 3.775 6.206 6.523 7.344 1.304 0.54 2.532 0.632 3.609 0.342" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.07 137.87)"><path d="m0 0c-0.634 1.079-1 2.503-1 4.189 0 1.734 0.388 3.513 1.057 5.156 1.217 2.996 3.372 5.544 5.827 6.56 0.244 0.101 0.486 0.185 0.724 0.251" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 116.51 139.24)"><path d="m0 0c-0.406 0.066-0.792 0.185-1.157 0.352-2.047 0.936-3.393 3.397-3.393 6.82 0 1.941 0.433 3.932 1.182 5.772 1.363 3.354 3.775 6.206 6.523 7.344 1.596 0.661 3.079 0.65 4.309 0.089 0.271-0.123 0.53-0.273 0.774-0.448" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 116 139.04)"><path d="m0 0c-1.678 1.125-2.744 3.41-2.744 6.457 0 1.941 0.433 3.933 1.182 5.772 1.364 3.354 3.775 6.206 6.523 7.344 1.304 0.54 2.532 0.632 3.609 0.342" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 123.26 125.9)"><path d="m0 0c-0.867 0.362-1.855 0.816-2.947 1.335" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 121.32 127.35)"><path d="m0 0c1.089-0.51 2.095-0.969 3.01-1.358" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 125.21 131.34)"><path d="m0 0c-1.178-1.103-2.465-1.974-3.813-2.533-2.105-0.871-4.061-0.856-5.682-0.115l-19.248 8.143c-2.698 1.234-4.472 4.475-4.472 8.986 0 2.558 0.571 5.181 1.556 7.604 1.799 4.418 4.977 8.175 8.597 9.674 2.103 0.871 4.057 0.857 5.675 0.119l19.25-8.144c2.515-1.147 4.228-4.041 4.45-8.08" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 125.87 122.97)"><path d="m0 0c-1.62 0.739-3.574 0.753-5.676-0.118-3.62-1.5-6.798-5.257-8.595-9.674-0.986-2.424-1.557-5.047-1.557-7.605 0-4.51 1.773-7.753 4.471-8.985" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 125.48 123.91)"><path d="m0 0c-1.292 0.589-2.851 0.601-4.528-0.094-2.888-1.196-5.422-4.193-6.854-7.717-0.787-1.933-1.243-4.025-1.243-6.065 0-3.597 1.415-6.184 3.566-7.167" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 119.49 128.24)"><path d="m0 0-7.593 3.23c-0.611 0.252-1.105-0.18-1.105-0.966s0.494-1.628 1.105-1.881l7.593-3.23" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.83 130.6)"><path d="m0 0-8.306 3.509c-0.622 0.257 0.489-1.762 2.369-2.581l7.259-3.089" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 120.18 125.71)"><path d="m0 0-7.592 3.229c-0.61 0.253-1.317-0.092-1.578-0.77s0.023-1.433 0.633-1.686l7.592-3.229" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 121.72 123.56)"><path d="m0 0-7.519 3.201c-0.606 0.251-1.526-0.011-2.055-0.583-0.529-0.574-0.467-1.242 0.139-1.493l7.52-3.2" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 120.29 131.37)"><path d="m0 0c0.62-0.712 1.347-1.264 2.157-1.634" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.5 129.3)"><path d="m0 0c0.13-1.386 0.442-2.626 0.905-3.693" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.84 126.58)"><path d="m0 0c-0.502-1.516-0.839-3.087-0.976-4.653" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 121.05 124.3)"><path d="m0 0c-0.939-1.209-1.767-2.57-2.446-4.02" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 123.06 122.68)"><path d="m0 0c-1.339-0.555-2.618-1.419-3.789-2.511" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 125.06 122.64)"><path d="m0 0c-0.873 0.398-1.844 0.586-2.883 0.538" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 123.07 122.68)"><path d="m0 0-7.622 3.255c-0.612 0.254-0.489 0.615 0.274 0.805s1.879 0.138 2.491-0.116l7.622-3.255" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 138.36 130.47)"><path d="m0 0 4.418-1.831c1.439-0.656 2.385-2.385 2.385-4.789 0-1.401-0.32-2.838-0.873-4.159-0.964-2.308-2.636-4.263-4.536-5.05-1.122-0.464-2.164-0.456-3.028-0.061l-4.64 1.917" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 138.46 131.49)"><path d="m0 0c-0.07 0.173-0.229 0.269-0.586-0.039-2.161-1.813-3.72-5.079-3.72-8.169 0-2.409 0.947-4.14 2.389-4.796" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 136.82 130.81)"><path d="m0 0c-0.07 0.173-0.23 0.269-0.586-0.039-2.161-1.813-3.721-5.08-3.721-8.169 0-2.409 0.948-4.14 2.39-4.797" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 138.65 131.98)"><path d="m0 0c-0.294 0.121-0.489 0.464-0.489 0.948 0 0 0.018 0.25-0.052 0.424" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 139.99 131.15)"><path d="m0 0c-0.439 0.242-0.931 0.379-1.46 0.397-0.606 0.071-0.725-0.911-0.725-0.911 0-0.754-0.475-1.562-1.06-1.804-0.21-0.087-0.406-0.09-0.571-0.022" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 138.36 130.47)"><path d="m0 0c-0.44 0.242-0.932 0.378-1.46 0.397-0.606 0.07-0.725-0.911-0.725-0.911 0-0.377-0.119-0.767-0.311-1.094" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 136.82 130.81)"><path d="m0 0 4.63-1.932" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 139.74 132.05)"><path d="m0 0c0.212-0.097 0.351-0.352 0.351-0.706 0-0.206-0.047-0.418-0.128-0.613-0.142-0.34-0.389-0.628-0.669-0.744-0.165-0.069-0.319-0.067-0.447-9e-3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 139.74 132.05)"><path d="m0 0c-0.127 0.058-0.281 0.059-0.446-9e-3 -0.284-0.118-0.534-0.413-0.675-0.76-0.078-0.19-0.123-0.397-0.123-0.597 0-0.355 0.14-0.61 0.351-0.706" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 138.27 132.66)"><path d="m0 0c0.212-0.097 0.352-0.352 0.352-0.706 0-0.206-0.048-0.418-0.129-0.613-0.142-0.34-0.389-0.628-0.669-0.744-0.165-0.068-0.319-0.067-0.446-9e-3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 138.27 132.66)"><path d="m0 0c-0.127 0.058-0.281 0.06-0.446-9e-3 -0.284-0.118-0.534-0.413-0.675-0.76-0.077-0.19-0.122-0.397-0.122-0.597 0-0.355 0.139-0.61 0.351-0.706" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 138.27 134.73)"><path d="m0 0c0.212-0.097 0.352-0.352 0.352-0.706 0-0.207-0.048-0.419-0.129-0.613-0.142-0.34-0.389-0.628-0.669-0.744-0.165-0.069-0.319-0.068-0.446-9e-3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 138.27 134.73)"><path d="m0 0c-0.127 0.058-0.281 0.059-0.446-9e-3 -0.284-0.118-0.534-0.413-0.675-0.761-0.077-0.19-0.122-0.396-0.122-0.597 0-0.354 0.139-0.609 0.351-0.705" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 139.74 134.12)"><path d="m0 0c0.212-0.097 0.351-0.351 0.351-0.706 0-0.206-0.047-0.418-0.128-0.613-0.142-0.34-0.389-0.628-0.669-0.744-0.165-0.068-0.319-0.067-0.447-9e-3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 139.74 134.12)"><path d="m0 0c-0.127 0.058-0.281 0.06-0.446-9e-3 -0.284-0.118-0.534-0.413-0.675-0.76-0.078-0.19-0.123-0.397-0.123-0.597 0-0.355 0.14-0.61 0.351-0.706" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 134.02 135)"><path d="m0 0c-0.442 0.04-0.86 0.151-1.248 0.329l-3.511 1.396c-1.701 0.778-2.819 2.821-2.819 5.664 0 1.612 0.36 3.266 0.981 4.793 1.134 2.785 3.137 5.153 5.419 6.098 1.324 0.549 2.556 0.54 3.576 0.075l3.513-1.398c0.128-0.059 0.253-0.124 0.375-0.197" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 136.11 129.02)"><path d="m0 0c-1.021 0.466-2.253 0.475-3.578-0.074-2.282-0.946-4.284-3.313-5.417-6.098-0.622-1.528-0.982-3.181-0.982-4.793 0-2.843 1.118-4.887 2.818-5.663" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 136.58 135.61)"><path d="m0 0c-0.584-0.026-1.131 0.081-1.623 0.306l-3.149 1.253c-1.526 0.697-2.529 2.53-2.529 5.081 0 1.446 0.323 2.929 0.88 4.299 1.017 2.498 2.814 4.622 4.861 5.47 1.188 0.492 2.293 0.484 3.208 0.067l3.151-1.254c0.525-0.239 0.988-0.613 1.369-1.104" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 138.27 130.24)"><path d="m0 0c-0.916 0.418-2.021 0.426-3.209-0.067-2.047-0.848-3.844-2.972-4.86-5.47-0.557-1.37-0.88-2.853-0.88-4.299 0-2.55 1.002-4.384 2.528-5.081" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 137.78 130.08)"><path d="m0 0c-0.542 1.041-1.332 1.832-2.321 2.283-1.227 0.561-2.633 0.542-4.067-0.052-2.242-0.928-4.278-3.193-5.443-6.057-0.627-1.541-0.959-3.168-0.959-4.704 0-2.89 1.18-5.155 3.156-6.057 0.596-0.273 1.234-0.409 1.897-0.409 0.415 0 0.841 0.054 1.271 0.161" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 124.72 130.5)"><path d="m0 0-4.642 2.442c-1.18 0.539-1.956 1.957-1.956 3.931 0 1.118 0.25 2.266 0.681 3.325 0.786 1.933 2.176 3.576 3.76 4.232 0.919 0.381 1.774 0.375 2.482 0.052l4.931-1.58" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 127.93 126.26)"><path d="m0 0c1.3 0.539 2.509 0.53 3.51 0.074l0.263-0.11 14.38-5.983" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 132.03 134.19)"><path d="m0 0-15.133 6.254c-1.668 0.764-2.766 2.768-2.766 5.558 0 1.582 0.354 3.205 0.963 4.703" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 125.73 131.18)"><path d="m0 0c-1.303 0.604-1.978 2.519-1.978 4.728 0 0.805 0.114 1.624 0.322 2.422l0.069 0.162-1.884 0.792" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 126.77 126.53)"><path d="m0 0c-1.312-0.551-2.503-1.724-3.383-3.189l-0.095-0.226-1.859 0.78" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 124.52 128.29)"><path d="m0 0c-0.236-0.837-0.367-1.702-0.367-2.552 0-2.146 0.832-3.689 2.098-4.276" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 127.01 126.27)"><path d="m0 0c-0.76 0.352-1.677 0.358-2.664-0.056-1.274-0.535-2.431-1.675-3.286-3.098" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 124.42 130.34)"><path d="m0 0c-1.231 0.57-2.041 2.071-2.041 4.159 0 0.784 0.115 1.582 0.323 2.357l0.013 0.031-1.943 0.815" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 126.25 126.03)"><path d="m0 0c-0.739 0.342-1.631 0.348-2.591-0.055-1.24-0.52-2.365-1.629-3.197-3.013l-0.057-0.135-1.927 0.809" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 123.14 127.74)"><path d="m0 0c-0.204-0.758-0.316-1.539-0.316-2.307 0-2.033 0.788-3.496 1.988-4.051" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 125.51 125.79)"><path d="m0 0c-0.72 0.333-1.59 0.34-2.524-0.053-1.182-0.496-2.257-1.54-3.061-2.847" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 128.43 126.12)"><path d="m0 0c-1.89-0.223-2.753-0.848-5.253-0.015" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 126.69 131.99)"><path d="m0 0c-1.719 0.726-3.191 2.936-5.586 4.206" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 124.68 130.8)"><path d="m0 0c-0.713-0.561-1.467-1.016-2.247-1.339-1.672-0.692-3.226-0.681-4.514-0.092" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 125.48 123.91)"><path d="m0 0c1.838-0.838 3.137-2.85 3.471-5.664" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 123.91 130.35)"><path d="m0 0c-0.802-0.676-1.66-1.218-2.553-1.587-0.748-0.31-1.472-0.479-2.16-0.518" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 125.24 124.06)"><path d="m0 0c0.93-1.134 1.538-2.744 1.691-4.713" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 123.18 129.85)"><path d="m0 0c-0.929-0.865-1.944-1.55-3.007-1.991-0.351-0.145-0.696-0.259-1.035-0.343" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 124.53 123.93)"><path d="m0 0c0.664-1.078 1.092-2.464 1.209-4.095" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 122.45 129.33)"><path d="m0 0c-0.875-0.899-1.838-1.636-2.854-2.154" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 123.92 124.19)"><path d="m0 0c0.3-0.964 0.463-2.067 0.463-3.288" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 122.29 128.04)"><path d="m0 0c-0.79-1.276-1.728-2.411-2.765-3.322" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 123.19 124.7)"><path d="m0 0c0.016-0.257 0.023-0.52 0.023-0.788 0-0.605-0.04-1.213-0.116-1.822" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 121.49 127.54)"><path d="m0 0c-0.26-0.448-0.539-0.88-0.833-1.293" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g></g><rect y="-.1696" width="85.224" height="47.674" fill="none" stroke="#000" stroke-width=".26458"/></g></g>';
sDis += this.ScriviLabel(info.pos, etk, obj);
sDis += '</g>';
return sDis;
}
render_ProlungaStd(dim_target, etk, obj) {
  let dimensioni = {
      w: 75.1,
      h: 44.643
  };
  let info = this.setupCurrentScale(dimensioni, dim_target);
  let sDis = '';
  sDis += '<g>';
  //sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '<g transform="translate(' + info.pos.x + ' ' + info.pos.y + ')" ><g transform="scale(' + info.scale + ')" ><g transform="translate(-49.312 -100.16)"><g transform="matrix(.35278 0 0 -.35278 101.7 116.51)"><path d="m0 0c-8.229 3.1-16.062 6.601-23.408 10.449" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 93.133 114.51)"><path d="m0 0c7.11-3.671 14.685-7.042 22.651-10.042" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 60.582 113.85)"><path d="m0 0c-0.146-0.523-0.22-1.046-0.22-1.568" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 90.208 114.4)"><path d="m0 0c0 3.974-4.258 8.022-11.683 11.104-8.088 3.365-18.891 5.217-30.419 5.217-11.838 0-22.846-1.939-30.995-5.46-1.758-0.76-3.331-1.577-4.699-2.434" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 78.077 107.32)"><path d="m0 0c9.123-0.653 17.542-2.461 24.251-5.252 7.993-3.319 12.844-7.764 13.932-12.686" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 59.084 114.4)"><path d="m0 0c0 3.623 2 7.06 5.763 10.056" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 90.402 117.21)"><path d="m0 0c-2.495-2.687-6.291-5.096-11.25-7.087-8.502-3.414-19.653-5.295-31.401-5.295-12.033 0-23.384 1.962-31.964 5.527-9.133 3.792-14.162 9.057-14.162 14.821" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 89.721 115.8)"><path d="m0 0c0.909 1.304 1.383 2.641 1.383 3.972" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 60.505 114.4)"><path d="m0 0c0-3.973 4.256-8.02 11.679-11.103 8.101-3.365 18.904-5.218 30.419-5.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 91.774 113.02)"><path d="m0 0c0 3.975-4.258 8.022-11.683 11.104-8.088 3.365-18.891 5.217-30.419 5.217-11.838 0-22.846-1.939-30.995-5.46-7.055-3.049-11.103-7.008-11.103-10.861" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 60.649 113.02)"><path d="m0 0c0 5.617 4.807 10.787 13.533 14.558 8.642 3.734 20.217 5.791 32.593 5.791 12.046 0 23.397-1.962 31.964-5.525 9.135-3.793 14.165-9.057 14.165-14.824" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 93.194 113.02)"><path d="m0 0c0-5.893-5.23-11.239-14.728-15.053-8.501-3.415-19.654-5.296-31.401-5.296-12.032 0-23.384 1.963-31.964 5.527-9.133 3.794-14.162 9.058-14.162 14.822" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 62.07 113.02)"><path d="m0 0c0-3.972 4.257-8.019 11.68-11.103 8.101-3.365 18.904-5.218 30.419-5.218 11.246 0 21.864 1.778 29.9 5.005 7.754 3.114 12.201 7.239 12.201 11.316" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 89.133 112.37)"><path d="m0 0c-0.832 0.416-1.715 0.819-2.648 1.207-8.09 3.364-18.893 5.216-30.419 5.216-11.839 0-22.847-1.939-30.996-5.46-4.937-2.133-8.401-4.712-10.036-7.388" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 93.688 115.26)"><path d="m0 0c0.099-0.562 0.148-1.13 0.148-1.703" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 62.219 113.29)"><path d="m0 0c2.283 2.732 5.875 5.203 10.632 7.258 8.44 3.648 19.68 5.695 31.731 5.788" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 93.741 115.87)"><path d="m0 0c0-5.893-5.23-11.239-14.729-15.053-8.5-3.415-19.653-5.295-31.4-5.295-12.033 0-23.385 1.962-31.965 5.526-3.805 1.581-6.898 3.417-9.212 5.439" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 75.563 121.57)"><path d="m0 0c1.776-0.091 3.579-0.138 5.399-0.138 11.246 0 21.865 1.778 29.9 5.005 7.755 3.114 12.202 7.239 12.202 11.316" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 106.55 117.81)"><path d="m0 0 7.821-3.25c0.609-0.253 3.125 0.409 3.734 0.662 0.29 0.12 0.719 0.386 1.024 0.659" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 104.56 120.63)"><path d="m0 0-7.953 4.173c-0.843 0.386-1.398 1.399-1.398 2.808 0 0.8 0.179 1.62 0.487 2.377 0.562 1.38 1.555 2.555 2.687 3.023 0.656 0.272 1.268 0.268 1.773 0.037l8.395-2.685" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 111.19 118.48)"><path d="m0 0 2.088-0.865" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 109.88 123.68)"><path d="m0 0-12.596 5.217c-1.414 0.647-2.343 2.346-2.343 4.71 0 1.34 0.299 2.715 0.816 3.985 0.942 2.315 2.607 4.284 4.505 5.07 1.101 0.456 2.126 0.449 2.973 0.062l0.224-0.092" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 104.56 120.64)"><path d="m0 0c-0.787 0.557-1.285 1.658-1.285 3.118 0 0.635 0.094 1.281 0.265 1.908l0.05 0.119-1.433 0.601" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 105.98 117.22)"><path d="m0 0c-0.487 0.102-1.035 0.044-1.612-0.197-0.994-0.416-1.898-1.301-2.565-2.407l-0.084-0.198-1.43 0.6" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 103.69 118.65)"><path d="m0 0c-0.163-0.599-0.252-1.215-0.252-1.821 0-1.616 0.635-2.778 1.602-3.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 105.6 117.09)"><path d="m0 0c-0.58 0.265-1.28 0.27-2.033-0.042-0.974-0.403-1.857-1.261-2.51-2.333" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 103.69 120.18)"><path d="m0 0c-0.932 0.432-1.544 1.567-1.544 3.146 0 0.575 0.082 1.16 0.231 1.73l0.048 0.117-1.345 0.565" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 105.08 116.92)"><path d="m0 0c-0.559 0.259-1.233 0.264-1.959-0.042-0.937-0.393-1.789-1.231-2.418-2.278l-0.067-0.161-1.328 0.557" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 102.78 118.2)"><path d="m0 0c-0.169-0.598-0.263-1.216-0.263-1.823 0-1.533 0.595-2.636 1.499-3.055" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 104.56 116.76)"><path d="m0 0c-0.543 0.251-1.198 0.256-1.903-0.04-0.91-0.382-1.738-1.196-2.348-2.213" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 102.71 119.66)"><path d="m0 0c-0.88 0.408-1.458 1.48-1.458 2.972 0 0.56 0.081 1.13 0.229 1.684l0.01 0.022-1.387 0.583" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 104.02 116.58)"><path d="m0 0c-0.528 0.245-1.166 0.249-1.852-0.039-0.885-0.372-1.689-1.164-2.284-2.153l-0.04-0.097-1.377 0.579" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 101.79 117.81)"><path d="m0 0c-0.146-0.542-0.226-1.1-0.226-1.648 0-1.453 0.564-2.498 1.421-2.895" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 103.49 116.41)"><path d="m0 0c-0.515 0.238-1.136 0.243-1.804-0.038-0.843-0.355-1.611-1.1-2.186-2.034" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 105.48 119.41)"><path d="m0 0-0.883-0.317c-0.36-0.139-0.592-0.485-0.592-0.978v-3.248c0-0.86 0.704-1.855 1.564-2.212l6.89-2.853c0.388-0.162 0.745-0.165 1.019-0.042l0.884 0.317" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 108.3 122.82)"><path d="m0 0c0.333 0.15 0.544 0.487 0.544 0.958v3.248c0 0.86-0.703 1.856-1.564 2.212l-6.889 2.853c-0.366 0.152-0.705 0.165-0.972 0.062" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 108.61 122.7)"><path d="m0 0c0.333 0.149 0.544 0.486 0.544 0.958v3.248c0 0.86-0.703 1.855-1.564 2.211l-6.889 2.854c-0.366 0.152-0.705 0.164-0.973 0.062" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 108.14 121)"><path d="m0 0v-4.3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 107.76 120.84)"><path d="m0 0v-4.3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 107.37 120.68)"><path d="m0 0v-4.3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 106.99 120.52)"><path d="m0 0v-4.3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 106.6 120.36)"><path d="m0 0v-4.3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 106.22 120.2)"><path d="m0 0v-4.3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 105.83 120.04)"><path d="m0 0v-4.3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 105.44 119.88)"><path d="m0 0v-4.3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 106.51 118)"><path d="m0 0c-0.067-0.14-0.048-0.255 0.104-0.318l7.821-3.25c0.608-0.253 3.125 0.408 3.733 0.661 0.609 0.253 1.834 1.147 1.226 1.399" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 106.51 118)"><path d="m0 0v0.856c0.199 0.421 1.17 1.074 1.626 1.263 0.607 0.253 2.828 0.733 3.436 0.48l7.822-3.25v-0.857" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 110.69 118.14)"><path d="m0 0-5.333-1.424" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 110.75 118.55)"><path d="m0 0-3.711-0.991" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 108.2 118.38)"><path d="m0 0 5.334 1.424" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 109.56 117.6)"><path d="m0 0-5.334-1.424" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 108.89 117.36)"><path d="m0 0-5.333-1.424" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 108.17 117.14)"><path d="m0 0-3.509-0.937" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 107.6 117.26)"><path d="m0 0 4.556-4.556" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 107.08 117.3)"><path d="m0 0 3.121-3.121" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 106.77 117.58)"><path d="m0 0 1.162-1.162" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 108.12 117.15)"><path d="m0 0 4.556-4.556" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 109.06 117.46)"><path d="m0 0 3.669-3.669" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 110.04 117.84)"><path d="m0 0 2.016-2.016" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.42 120.02)"><path d="m0 0c1.499-0.684 2.484-2.484 2.484-4.989 0-1.459-0.334-2.956-0.909-4.332-1.005-2.405-2.746-4.441-4.726-5.261-1.169-0.484-2.255-0.476-3.155-0.064" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 115.26 120.4)"><path d="m0 0c1.28-0.583 2.122-2.123 2.122-4.263 0-1.246-0.285-2.525-0.776-3.701-0.859-2.055-2.347-3.794-4.039-4.495-0.998-0.414-1.926-0.406-2.695-0.055" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.26 120.4)"><path d="m0 0c-0.769 0.351-1.695 0.357-2.693-0.056-1.717-0.711-3.224-2.493-4.076-4.589-0.468-1.149-0.739-2.394-0.739-3.606 0-2.14 0.841-3.678 2.12-4.263" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 113.84 121.43)"><path d="m0 0c0.497-0.227 0.824-0.825 0.824-1.656 0-0.484-0.11-0.981-0.302-1.438-0.333-0.798-0.911-1.474-1.568-1.746-0.388-0.16-0.748-0.158-1.047-0.021" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 113.84 121.43)"><path d="m0 0c-0.299 0.136-0.658 0.139-1.046-0.022-0.667-0.276-1.253-0.968-1.584-1.783-0.182-0.446-0.287-0.929-0.287-1.401 0-0.831 0.327-1.428 0.824-1.655" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 110.71 124.16)"><path d="m0 0c-0.297 0.049-0.58 0.135-0.847 0.257-1.497 0.685-2.481 2.485-2.481 4.989 0 1.42 0.317 2.876 0.865 4.221 0.996 2.453 2.761 4.539 4.771 5.371 1.168 0.484 2.252 0.476 3.151 0.066 0.198-0.091 0.388-0.2 0.566-0.329" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 110.34 124.01)"><path d="m0 0c-1.227 0.823-2.007 2.494-2.007 4.723 0 1.419 0.318 2.876 0.865 4.221 0.996 2.453 2.761 4.538 4.771 5.371 0.953 0.395 1.851 0.462 2.639 0.25" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 110.21 123.38)"><path d="m0 0c-0.463 0.789-0.73 1.831-0.73 3.063 0 1.269 0.283 2.57 0.772 3.772 0.891 2.191 2.467 4.054 4.262 4.798 0.178 0.074 0.355 0.135 0.529 0.183" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 111.27 124.38)"><path d="m0 0c-0.297 0.049-0.58 0.135-0.847 0.257-1.497 0.685-2.481 2.485-2.481 4.989 0 1.419 0.317 2.876 0.865 4.221 0.997 2.452 2.761 4.538 4.771 5.371 1.168 0.483 2.252 0.475 3.151 0.065 0.198-0.09 0.387-0.199 0.566-0.328" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 110.89 124.24)"><path d="m0 0c-1.227 0.823-2.007 2.495-2.007 4.723 0 1.42 0.318 2.876 0.865 4.221 0.996 2.453 2.761 4.539 4.771 5.371 0.953 0.395 1.851 0.462 2.639 0.25" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 110.77 123.61)"><path d="m0 0c-0.463 0.79-0.73 1.831-0.73 3.064 0 1.268 0.283 2.569 0.772 3.771 0.891 2.191 2.467 4.054 4.262 4.798 0.178 0.074 0.355 0.135 0.529 0.184" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 111.83 124.61)"><path d="m0 0c-0.297 0.049-0.58 0.135-0.847 0.257-1.497 0.685-2.481 2.485-2.481 4.989 0 1.419 0.317 2.876 0.865 4.221 0.996 2.453 2.761 4.539 4.771 5.371 1.168 0.484 2.252 0.476 3.151 0.066 0.198-0.091 0.387-0.2 0.566-0.329" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 111.45 124.46)"><path d="m0 0c-1.228 0.823-2.007 2.494-2.007 4.723 0 1.419 0.318 2.876 0.864 4.221 0.997 2.453 2.762 4.538 4.772 5.371 0.953 0.395 1.851 0.462 2.639 0.25" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 111.33 123.83)"><path d="m0 0c-0.464 0.789-0.73 1.831-0.73 3.063 0 1.269 0.283 2.57 0.772 3.772 0.891 2.191 2.467 4.054 4.262 4.798 0.178 0.074 0.355 0.135 0.529 0.183" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 112.38 124.83)"><path d="m0 0c-0.297 0.049-0.58 0.135-0.847 0.257-1.497 0.685-2.481 2.485-2.481 4.989 0 1.419 0.317 2.876 0.865 4.221 0.996 2.452 2.761 4.538 4.771 5.371 1.168 0.483 2.252 0.476 3.151 0.065 0.198-0.09 0.387-0.199 0.566-0.328" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 112.01 124.69)"><path d="m0 0c-1.228 0.823-2.007 2.494-2.007 4.723 0 1.42 0.318 2.876 0.864 4.221 0.997 2.453 2.762 4.539 4.772 5.371 0.953 0.395 1.851 0.462 2.639 0.25" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 111.88 124.06)"><path d="m0 0c-0.464 0.789-0.73 1.831-0.73 3.063 0 1.269 0.283 2.57 0.772 3.771 0.891 2.191 2.467 4.055 4.262 4.798 0.178 0.075 0.355 0.136 0.529 0.184" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 112.94 125.06)"><path d="m0 0c-0.297 0.049-0.58 0.135-0.847 0.257-1.497 0.685-2.481 2.485-2.481 4.989 0 1.419 0.317 2.876 0.865 4.221 0.996 2.453 2.761 4.539 4.771 5.371 1.167 0.484 2.252 0.476 3.151 0.066 0.198-0.091 0.387-0.2 0.566-0.329" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 112.56 124.91)"><path d="m0 0c-1.228 0.823-2.007 2.494-2.007 4.723 0 1.419 0.318 2.876 0.864 4.221 0.997 2.453 2.762 4.539 4.772 5.371 0.953 0.395 1.851 0.462 2.639 0.25" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 112.44 124.28)"><path d="m0 0c-0.464 0.789-0.73 1.831-0.73 3.063 0 1.269 0.283 2.57 0.772 3.771 0.891 2.192 2.467 4.055 4.262 4.799 0.178 0.074 0.355 0.135 0.529 0.183" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 113.5 125.28)"><path d="m0 0c-0.297 0.048-0.58 0.135-0.847 0.257-1.497 0.685-2.481 2.485-2.481 4.989 0 1.419 0.317 2.876 0.864 4.221 0.997 2.453 2.762 4.538 4.772 5.371 1.168 0.483 2.252 0.476 3.151 0.065 0.198-0.09 0.388-0.199 0.566-0.328" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 113.12 125.14)"><path d="m0 0c-1.228 0.823-2.007 2.495-2.007 4.723 0 1.42 0.318 2.876 0.864 4.221 0.997 2.453 2.762 4.539 4.772 5.371 0.953 0.395 1.851 0.462 2.639 0.25" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="translate(18.835 .72693)"><g transform="matrix(.35278 0 0 -.35278 70.205 132.71)"><path d="m0 0c-0.661-0.873-1.467-1.559-2.337-1.919-0.843-0.349-1.625-0.343-2.272-0.047" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 70.182 129.68)"><path d="m0 0c1.08-0.492 1.79-1.79 1.79-3.595 0-0.522-0.06-1.051-0.17-1.574" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 69.799 132.55)"><path d="m0 0c-0.661-0.873-1.468-1.559-2.338-1.919-0.328-0.137-0.648-0.219-0.954-0.25" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 70.089 129.76)"><path d="m0 0c0.563-0.664 0.901-1.667 0.901-2.912 0-0.523-0.059-1.052-0.17-1.574" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 69.392 132.38)"><path d="m0 0c-0.66-0.874-1.467-1.56-2.337-1.92-0.152-0.063-0.303-0.114-0.45-0.155" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 69.804 129.77)"><path d="m0 0c0.354-0.629 0.558-1.45 0.558-2.416 0-0.522-0.06-1.052-0.171-1.574" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 68.986 132.22)"><path d="m0 0c-0.579-0.766-1.271-1.387-2.018-1.772" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 69.508 129.86)"><path d="m0 0c0.157-0.492 0.243-1.057 0.243-1.683 0-0.523-0.059-1.052-0.171-1.574" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 68.579 132.05)"><path d="m0 0c-0.401-0.53-0.856-0.992-1.348-1.353" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 69.172 130.03)"><path d="m0 0c0.028-0.236 0.042-0.483 0.042-0.741 0-0.523-0.06-1.052-0.17-1.574" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 68.172 131.89)"><path d="m0 0c-0.109-0.144-0.222-0.283-0.339-0.416" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 68.768 130.37)"><path d="m0 0c-0.028-0.294-0.074-0.588-0.136-0.88" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 70.182 129.68)"><path d="m0 0c-0.648 0.296-1.43 0.301-2.271-0.047-1.448-0.6-2.719-2.103-3.437-3.87-0.396-0.969-0.624-2.019-0.624-3.042 0-1.804 0.71-3.101 1.789-3.594" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 70.494 132.91)"><path d="m0 0c-0.863-1.225-1.95-2.192-3.13-2.681-1.056-0.437-2.036-0.43-2.849-0.058l-8.58 3.551c-5.096 2.148-0.44 15.776 5.696 13.231l8.58-3.551c1.353-0.618 2.244-2.244 2.244-4.507 0-0.78-0.106-1.571-0.299-2.345" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 70.395 129.2)"><path d="m0 0c-0.812 0.371-1.793 0.377-2.847-0.06-1.815-0.752-3.409-2.635-4.31-4.851-0.494-1.215-0.78-2.531-0.78-3.814 0-2.261 0.888-3.888 2.242-4.506" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 71.606 132.2)"><path d="m0 0c-2.036 0.851-5.346 2.671-9.149 4.199" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 68.037 131.59)"><path d="m0 0c3.729-1.46 6.915-3.178 9.044-4.052" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 77.892 134.03)"><path d="m0 0 0.769-0.315" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 73.603 133.44)"><path d="m0 0c0.494 0.862 1.187 1.558 1.954 1.875 0.564 0.234 1.087 0.23 1.521 0.032l1.28-0.54" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 74.044 135.39)"><path d="m0 0-0.818 0.358c-0.723 0.33-1.199 1.199-1.199 2.408 0 0.476 0.075 0.962 0.208 1.431" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 77.143 136.67)"><path d="m0 0-1.179 0.488" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 74.432 134.11)"><path d="m0 0-0.646-0.232c-0.262-0.101-0.432-0.354-0.432-0.715v-2.373c0-0.629 0.515-1.356 1.143-1.617l5.035-2.085c0.284-0.118 0.545-0.121 0.745-0.03l0.645 0.232" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 76.493 136.6)"><path d="m0 0c0.243 0.109 0.397 0.355 0.397 0.7v2.374c0 0.628-0.514 1.355-1.142 1.616l-5.034 2.085c-0.269 0.111-0.516 0.12-0.711 0.045" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 76.721 136.51)"><path d="m0 0c0.243 0.109 0.397 0.355 0.397 0.7v2.374c0 0.628-0.513 1.356-1.142 1.616l-5.034 2.085c-0.269 0.111-0.516 0.12-0.711 0.045" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 76.381 135.27)"><path d="m0 0v-3.143" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 76.099 135.16)"><path d="m0 0v-3.143" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 75.818 135.04)"><path d="m0 0v-3.143" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 75.535 134.92)"><path d="m0 0v-3.143" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 75.254 134.8)"><path d="m0 0v-3.143" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 74.971 134.69)"><path d="m0 0v-3.143" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 74.69 134.57)"><path d="m0 0v-3.143" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 74.407 134.45)"><path d="m0 0v-3.142" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 74.562 133.47)"><path d="m0 0 5.715-2.375c0.444-0.185 2.284 0.298 2.728 0.483 0.212 0.088 0.527 0.283 0.749 0.482" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 74.536 133.61)"><path d="m0 0c-0.049-0.103-0.035-0.186 0.076-0.232l5.715-2.375c0.444-0.185 2.284 0.298 2.729 0.483 0.444 0.185 1.339 0.838 0.895 1.022" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 74.536 133.61)"><path d="m0 0v0.626c0.146 0.308 0.854 0.784 1.187 0.923 0.446 0.184 2.068 0.535 2.512 0.35l5.716-2.375v-0.626" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 77.588 133.71)"><path d="m0 0-3.897-1.041" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 77.635 134.01)"><path d="m0 0-2.712-0.724" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 75.771 133.88)"><path d="m0 0 3.897 1.041" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 76.764 133.32)"><path d="m0 0-3.897-1.041" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 76.279 133.14)"><path d="m0 0-3.897-1.041" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 75.749 132.98)"><path d="m0 0-2.564-0.685" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 75.333 133.06)"><path d="m0 0 3.329-3.33" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 74.955 133.09)"><path d="m0 0 2.281-2.281" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 74.726 133.3)"><path d="m0 0 0.85-0.849" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 75.711 132.98)"><path d="m0 0 3.33-3.33" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 76.397 133.21)"><path d="m0 0 2.682-2.682" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 77.115 133.49)"><path d="m0 0 1.474-1.473" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 78.469 137.49)"><path d="m0 0c-0.23 0.021-0.449 0.079-0.651 0.171l-1.834 0.73c-0.888 0.406-1.472 1.473-1.472 2.957 0 0.842 0.188 1.705 0.513 2.503 0.591 1.454 1.637 2.69 2.829 3.183 0.691 0.287 1.335 0.283 1.867 0.04l1.834-0.73c0.067-0.031 0.133-0.065 0.196-0.103" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 79.558 134.37)"><path d="m0 0c-0.533 0.243-1.176 0.248-1.868-0.039-1.192-0.493-2.237-1.73-2.828-3.184-0.325-0.798-0.513-1.661-0.513-2.503 0-1.483 0.584-2.551 1.472-2.957" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 80.654 137.3)"><path d="m0 0c-0.46-0.56-1.004-0.999-1.586-1.24-0.621-0.258-1.198-0.253-1.677-0.034l-1.644 0.654c-0.797 0.364-1.321 1.322-1.321 2.653 0 0.755 0.169 1.53 0.46 2.245 0.531 1.304 1.469 2.413 2.538 2.856 0.621 0.257 1.198 0.253 1.675 0.035l1.645-0.655c0.797-0.363 1.321-1.321 1.321-2.653 0-0.181-0.01-0.364-0.028-0.547" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 80.686 135)"><path d="m0 0c-0.478 0.218-1.055 0.223-1.676-0.035-1.068-0.443-2.007-1.551-2.537-2.856-0.291-0.715-0.459-1.49-0.459-2.245 0-1.331 0.524-2.288 1.319-2.652" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 80.429 134.92)"><path d="m0 0c-0.283 0.543-0.695 0.957-1.212 1.192-0.641 0.293-1.375 0.283-2.123-0.027-1.171-0.485-2.233-1.667-2.842-3.163-0.328-0.804-0.501-1.654-0.501-2.456 0-1.508 0.616-2.691 1.648-3.162 0.311-0.143 0.644-0.214 0.99-0.214 0.218 0 0.439 0.028 0.664 0.084" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 79.9 136.95)"><path d="m0 0c-0.322 0.147-0.534 0.535-0.534 1.075 0 0.305 0.067 0.619 0.185 0.909 0.215 0.528 0.596 0.977 1.029 1.157 0.251 0.104 0.484 0.102 0.678 0.014l7.455-3.116c0.324-0.147 0.536-0.535 0.536-1.075 0-0.314-0.073-0.636-0.196-0.933-0.216-0.518-0.591-0.956-1.018-1.133-0.252-0.104-0.486-0.102-0.68-0.014z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 83.009 136.94)"><path d="m0 0c-0.193 0.088-0.428 0.09-0.679-0.014-0.432-0.179-0.812-0.629-1.027-1.157-0.118-0.29-0.187-0.603-0.187-0.909 0-0.54 0.212-0.927 0.535-1.075" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 82.648 137.75)"><path d="m0 0c-0.148 0.067-0.245 0.245-0.245 0.492 0 0.143 0.033 0.291 0.09 0.426 0.098 0.238 0.27 0.438 0.466 0.519 0.115 0.048 0.221 0.047 0.31 6e-3" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 82.648 137.75)"><path d="m0 0c0.088-0.041 0.195-0.041 0.311 6e-3 0.198 0.082 0.372 0.288 0.469 0.53 0.054 0.132 0.085 0.276 0.085 0.416 0 0.247-0.096 0.424-0.244 0.491" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 82.704 136.81)"><path d="m0 0c-0.194 0.088-0.428 0.09-0.679-0.014-0.433-0.179-0.813-0.629-1.028-1.157-0.118-0.289-0.186-0.603-0.186-0.909 0-0.54 0.212-0.927 0.535-1.075" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 72.91 133.15)"><path d="m0 0c0.492 0.869 1.186 1.571 1.955 1.89 0.559 0.231 1.078 0.227 1.509 0.031l1.052-0.449c0.13-0.06 0.254-0.138 0.367-0.232" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 73.578 135.15)"><path d="m0 0c-0.139 0.024-0.271 0.064-0.396 0.122l-1.051 0.448c-0.718 0.328-1.19 1.19-1.19 2.389 0 0.452 0.068 0.911 0.19 1.358" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 73.089 133.77)"><path d="m0 0c-0.128-0.457-0.198-0.928-0.198-1.391 0-1.199 0.471-2.061 1.188-2.388" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 74.503 132.63)"><path d="m0 0c-0.431 0.196-0.95 0.2-1.509-0.031-0.772-0.32-1.469-1.027-1.961-1.9" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 72.165 132.84)"><path d="m0 0c0.492 0.876 1.19 1.585 1.965 1.906 0.558 0.231 1.078 0.228 1.508 0.031l1.051-0.448c0.164-0.075 0.316-0.178 0.451-0.306" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 72.909 134.84)"><path d="m0 0c-0.215 0.01-0.417 0.059-0.603 0.144l-1.051 0.448c-0.717 0.328-1.189 1.19-1.189 2.389 0 0.442 0.065 0.892 0.182 1.33" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 72.342 133.48)"><path d="m0 0c-0.119-0.44-0.184-0.893-0.184-1.338 0-1.199 0.471-2.061 1.189-2.389" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 73.761 132.32)"><path d="m0 0c-0.431 0.196-0.95 0.2-1.509-0.032-0.753-0.312-1.434-0.991-1.924-1.835" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 72.163 134.52)"><path d="m0 0c-0.211 0.011-0.41 0.06-0.593 0.143l-1.051 0.449c-0.717 0.327-1.189 1.189-1.189 2.388 0 0.68 0.152 1.377 0.414 2.022 0.479 1.174 1.323 2.173 2.285 2.571 0.559 0.232 1.078 0.228 1.509 0.032l1.051-0.449c0.161-0.073 0.309-0.174 0.443-0.299" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 71.596 133.17)"><path d="m0 0c-0.111-0.427-0.173-0.865-0.173-1.295 0-1.2 0.472-2.061 1.189-2.389" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 73.019 132)"><path d="m0 0c-0.43 0.197-0.949 0.2-1.509-0.031-0.787-0.326-1.495-1.054-1.988-1.95" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 73.603 133.44)"><path d="m0 0-0.919 0.356" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 73.413 133.9)"><path d="m0 0-0.919 0.356" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 72.715 133.63)"><path d="m0 0-0.919 0.356" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 72.91 133.15)"><path d="m0 0-0.919 0.356" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 72.165 132.84)"><path d="m0 0-0.919 0.356" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 71.97 133.32)"><path d="m0 0-0.919 0.356" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g></g><g transform="translate(20.665 -13.4)"><g transform="matrix(.35278 0 0 -.35278 63.373 143.25)"><path d="m0 0c-14.856 5.595-28.422 12.5-40.154 20.39" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 42.838 133.22)"><path d="m0 0c14.61-12.84 34.021-24.303 56.57-32.796" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g></g><rect x="49.445" y="100.29" width="74.835" height="44.099" fill="none" stroke="#000" stroke-linecap="square" stroke-width=".265"/></g> </g></g>';
  sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '</g>';
  return sDis;
}

render_4TESTEWHITETVALL(dim_target, etk, obj) {
  let dimensioni = {
      w: 240.53,
      h: 123.45
  };
  //width="240.53mm" height="123.01mm"
  let info = this.setupCurrentScale(dimensioni, dim_target);
  let sDis = '';
  sDis += '<g>';
  //sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '<g transform="translate(' + info.pos.x + ' ' + info.pos.y + ')" ><g transform="scale(' + info.scale + ')" ><g transform="translate(49.218 -50.849)"><rect x="-49.218" y="50.849" width="241.24" height="123.51" fill="none" stroke="#000" stroke-width=".55"/><g transform="matrix(1.4635 0 0 1.4635 11.47 5.7274)"><g transform="matrix(.35278 0 0 -.35278 41.273 61.689)"><path d="m0 0c0.689-0.255 2.928 0.038 3.45-0.2l10.59-4.414c0.632-0.288 1.107-0.918 1.321-1.798" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 45.781 66.203)"><path d="m0 0c-0.186-0.119-0.377-0.22-0.572-0.301-0.68-0.282-1.312-0.277-1.835-0.037l-10.59 4.413c-0.648 0.296-1.885 1.885-2.423 2.247" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 46.226 63.317)"><path d="m0 0c-0.522 0.239-1.154 0.244-1.833-0.038-1.169-0.484-2.195-1.698-2.776-3.125-0.319-0.783-0.503-1.63-0.503-2.456 0-1.457 0.573-2.505 1.444-2.902" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 42.012 61.859)"><path d="m0 0c-1.169-0.484-2.195-1.698-2.775-3.125-0.32-0.783-0.503-1.63-0.503-2.456 0-0.729 0.142-1.355 0.394-1.848" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 40.342 63.973)"><path d="m0 0-6.733 2.819c-0.658 0.3-1.089 1.09-1.089 2.188 0 0.622 0.138 1.261 0.379 1.851 0.437 1.076 1.212 1.991 2.092 2.355 0.512 0.212 0.989 0.209 1.382 0.03l6.61-2.767" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 17.016 54.985)"><path d="m0 0c32.683-14.525 23.23-6.317 58.448-16.938" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 37.646 62.816)"><path d="m0 0c-34.519 11.708-27.759 3.055-60.517 17.614" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 26.539 48.794)"><path d="m0 0c14.274-6.344 21.882-14.57 26.514-22.974 2.407-4.37 4.435-8.05 7.138-10.397" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 35.897 60.353)"><path d="m0 0c-1.582 2.25-2.978 4.78-4.405 7.372-4.491 8.15-11.425 15.153-24.157 20.813" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 55.128 81.727)"><path d="m0 0c-33.986 10.766-41.461-11.362-86.928 8.614-1.667 0.733-1.672 2.273-0.939 3.94 0.733 1.668 1.918 2.814 3.594 2.1 43.722-18.656 47.502 5.126 86.28-8.407" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 63.511 85.388)"><path d="m0 0c-0.187-0.119-0.378-0.22-0.573-0.301-0.68-0.282-1.313-0.277-1.836-0.037l-10.597 4.416c-0.648 0.296-1.886 1.886-2.425 2.248" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 64.446 81.495)"><path d="m0 0c-0.523 0.239-1.155 0.243-1.835-0.038-1.17-0.485-2.197-1.699-2.778-3.128l-1.388-2.847c-0.319-0.783-0.504-1.631-0.504-2.457 0-1.458 0.573-2.507 1.445-2.905" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 58.76 82.144)"><path d="m0 0c-0.318-0.783-0.503-1.631-0.503-2.458 0-0.729 0.144-1.355 0.396-1.849" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 60.326 80.215)"><path d="m0 0c-1.171-0.484-2.197-1.699-2.778-3.127" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 59.49 79.866)"><path d="m0 0c0.689-0.255 2.93 0.038 3.453-0.2l10.597-4.417c0.632-0.288 1.107-0.919 1.321-1.799" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 58.068 83.156)"><path d="m0 0-6.737 2.821c-0.659 0.3-1.09 1.09-1.09 2.189 0 0.623 0.139 1.262 0.379 1.853l1.388 2.847c0.439 1.077 1.213 1.992 2.095 2.357 0.512 0.212 0.988 0.209 1.382 0.029l6.614-2.768" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 52.703 78.413)"><path d="m0 0c-5.101 10.147 7.061 22.969-20.681 35.157-1.668 0.733-1.673 2.273-0.939 3.941 0.732 1.668 1.926 2.832 3.593 2.099 34.434-15.129 15.904-34.664 29.172-42.736" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 20.329 74.366)"><path d="m0 0c0.689-0.255 2.928 0.039 3.45-0.2l10.59-4.414c0.632-0.288 1.107-0.918 1.32-1.797" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 24.837 78.881)"><path d="m0 0c-0.186-0.119-0.377-0.22-0.572-0.301-0.68-0.282-1.312-0.277-1.835-0.037l-10.589 4.413c-0.649 0.296-1.886 1.885-2.423 2.247" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 25.282 75.994)"><path d="m0 0c-0.523 0.239-1.154 0.243-1.834-0.038-1.169-0.484-2.195-1.698-2.775-3.125-0.32-0.783-0.503-1.63-0.503-2.456 0-1.457 0.572-2.505 1.443-2.902" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 21.068 74.536)"><path d="m0 0c-1.17-0.484-2.196-1.698-2.776-3.125-0.319-0.783-0.503-1.63-0.503-2.456 0-0.728 0.143-1.355 0.395-1.848" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 19.397 76.65)"><path d="m0 0-6.734 2.819c-0.657 0.3-1.089 1.09-1.089 2.188 0 0.622 0.139 1.261 0.38 1.851 0.437 1.076 1.211 1.99 2.092 2.355 0.512 0.212 0.988 0.209 1.381 0.029l6.611-2.767" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 14.421 42.398)"><path d="m0 0 10.959-4.554c0.853-0.355 4.379 0.573 5.231 0.927 0.407 0.169 1.009 0.542 1.436 0.924" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 20.934 43.329)"><path d="m0 0 5.785-2.364" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 20.1 51.026)"><path d="m0 0-19.991 8.259" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 13.048 48.112)"><path d="m0 0c-1.981 0.906-3.284 3.287-3.284 6.599 0 1.878 0.419 3.804 1.142 5.584 1.321 3.244 3.655 6.003 6.314 7.104 1.543 0.639 2.978 0.629 4.167 0.088l0.312-0.13" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 19.996 50.76)"><path d="m0 0c-1.868 0.854-3.097 3.098-3.097 6.221 0 1.771 0.396 3.587 1.078 5.264 1.246 3.059 3.446 5.66 5.952 6.698 1.456 0.603 2.808 0.593 3.928 0.082" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 12.923 44.636)"><path d="m0 0-1.238-0.445c-0.504-0.194-0.829-0.679-0.829-1.37v-4.551c0-1.205 0.986-2.6 2.191-3.099l9.653-3.998c0.545-0.226 1.045-0.232 1.43-0.059l1.238 0.445" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 16.876 49.406)"><path d="m0 0c0.466 0.209 0.762 0.682 0.762 1.342v4.551c0 1.206-0.987 2.6-2.192 3.1l-9.653 3.998c-0.514 0.213-0.987 0.23-1.362 0.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 17.313 49.249)"><path d="m0 0c0.466 0.209 0.762 0.682 0.762 1.342v4.552c0 1.205-0.987 2.599-2.192 3.099l-9.653 3.998c-0.514 0.213-0.987 0.23-1.362 0.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 16.661 46.867)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 16.121 46.643)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 15.58 46.419)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 15.039 46.195)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 14.499 45.971)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 13.958 45.747)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 13.417 45.523)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 12.877 45.299)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 13.561 48.376)"><path d="m0 0c-0.844-0.052-1.632 0.095-2.338 0.418-2.108 0.964-3.495 3.499-3.495 7.025 0 1.999 0.447 4.051 1.219 5.945 1.403 3.454 3.887 6.392 6.718 7.564 1.645 0.681 3.171 0.671 4.439 0.092 0.511-0.232 0.98-0.558 1.397-0.968" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 21.975 50.721)"><path d="m0 0c-0.435-0.281-0.882-0.519-1.339-0.708-1.546-0.641-2.983-0.629-4.174-0.085" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 22.975 44.163)"><path d="m0 0c1.653-0.754 2.835-2.535 3.183-5.027" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 14.369 42.664)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c-0.093-0.196-0.066-0.357 0.146-0.446l10.959-4.554c0.853-0.354 4.379 0.573 5.232 0.927 0.852 0.354 2.568 1.606 1.717 1.961" stroke-width=".3"/><path d="m0 0v1.2c0.28 0.59 1.64 1.504 2.278 1.769 0.853 0.355 3.964 1.027 4.817 0.673l10.959-4.555v-1.199" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 20.222 42.856)"><path d="m0 0-7.473-1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 20.312 43.429)"><path d="m0 0-5.2-1.389" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 16.739 43.197)"><path d="m0 0 7.473 1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 18.642 42.105)"><path d="m0 0-7.474-1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 17.712 41.768)"><path d="m0 0-7.474-1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 16.695 41.453)"><path d="m0 0-4.917-1.313" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 15.899 41.617)"><path d="m0 0 6.384-6.384" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 15.173 41.677)"><path d="m0 0 4.374-4.374" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 14.735 42.07)"><path d="m0 0 1.628-1.628" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 16.624 41.465)"><path d="m0 0 6.384-6.384" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 17.939 41.904)"><path d="m0 0 5.142-5.142" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 19.314 42.433)"><path d="m0 0 2.825-2.825" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 27.359 51.309)"><path d="m0 0c-0.612-0.662-1.307-1.18-2.042-1.484-0.921-0.382-1.777-0.376-2.485-0.053l-12.409 3.862" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 23.478 45.629)"><path d="m0 0 11.449-6.085c1.182-0.541 1.958-1.96 1.958-3.936 0-0.404-0.032-0.812-0.094-1.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 21.056 47.976)"><path d="m0 0 2.001-0.84" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 21.536 50.519)"><path d="m0 0c-1.104 0.78-1.801 2.323-1.801 4.369 0 0.889 0.132 1.795 0.372 2.674l0.07 0.165" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 21.429 47.108)"><path d="m0 0 2.005-0.841" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 23.535 45.723)"><path d="m0 0c-0.684 0.143-1.45 0.062-2.259-0.276-1.393-0.583-2.659-1.823-3.595-3.372l-0.116-0.279" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 21.739 48.327)"><path d="m0 0c-0.228-0.839-0.354-1.703-0.354-2.551 0-2.264 0.891-3.893 2.246-4.511" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 24.417 46.146)"><path d="m0 0c-0.812 0.371-1.794 0.378-2.85-0.06-1.363-0.564-2.6-1.766-3.515-3.268" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 22.431 48.529)"><path d="m0 0 1.886-0.792" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 23.057 50.997)"><path d="m0 0c-1.306 0.604-2.163 2.195-2.163 4.407 0 0.807 0.114 1.627 0.322 2.426l0.069 0.162" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 22.809 47.689)"><path d="m0 0 1.861-0.781" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 25.006 46.462)"><path d="m0 0c-0.783 0.362-1.729 0.369-2.746-0.058-1.314-0.551-2.506-1.726-3.388-3.193l-0.095-0.226" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 23.108 48.781)"><path d="m0 0c-0.236-0.838-0.367-1.704-0.367-2.555 0-2.149 0.833-3.694 2.1-4.28" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 25.596 46.782)"><path d="m0 0c-0.761 0.352-1.679 0.358-2.667-0.057-1.275-0.535-2.434-1.676-3.29-3.101" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 23.782 49.109)"><path d="m0 0 0.013 0.031 1.915-0.804" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 24.389 51.41)"><path d="m0 0c-1.233 0.571-2.043 2.074-2.043 4.164 0 0.785 0.114 1.584 0.322 2.36" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 24.155 48.229)"><path d="m0 0 1.93-0.811" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 26.22 47.098)"><path d="m0 0c-0.74 0.343-1.634 0.349-2.595-0.055-1.24-0.521-2.367-1.631-3.2-3.016l-0.057-0.136" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 24.462 49.381)"><path d="m0 0c-0.205-0.759-0.317-1.541-0.317-2.309 0-2.036 0.79-3.501 1.991-4.057" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 26.836 47.424)"><path d="m0 0c-0.721 0.333-1.592 0.34-2.527-0.054-1.183-0.496-2.259-1.541-3.065-2.85" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 23.478 45.629)"><path d="m0 0c-0.846 0.386-1.866 0.393-2.965-0.062-1.889-0.783-3.55-2.745-4.487-5.052-0.515-1.265-0.814-2.636-0.814-3.971 0-2.355 0.926-4.049 2.334-4.692" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 27.517 47.776)"><path d="m0 0c-0.71 0.324-1.566 0.33-2.488-0.052-1.586-0.657-2.979-2.303-3.766-4.24-0.433-1.062-0.683-2.211-0.683-3.332 0-1.977 0.778-3.397 1.959-3.938" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 26.058 51.168)"><path d="m0 0c-0.784 0.359-1.3 1.301-1.3 2.612 0 0.743 0.166 1.505 0.452 2.21 0.523 1.283 1.447 2.375 2.499 2.811 0.611 0.253 1.179 0.249 1.649 0.035" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 27.675 49.227)"><path d="m0 0c-0.103 1.082-0.586 1.856-1.279 2.173" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 26.058 51.168)"><path d="m0 0c0.472-0.215 1.039-0.219 1.651 0.035 0.263 0.109 0.518 0.258 0.761 0.443" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 8.3838 46.403)"><path d="m0 0c-0.416 0.068-0.812 0.19-1.186 0.361-2.098 0.959-3.478 3.481-3.478 6.99 0 1.989 0.445 4.029 1.213 5.915 1.396 3.437 3.868 6.359 6.684 7.526 1.637 0.677 3.156 0.666 4.417 0.091 0.277-0.126 0.542-0.28 0.792-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 7.8588 46.2)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.869 6.359 6.685 7.525 1.336 0.554 2.595 0.648 3.698 0.351" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 7.6841 45.318)"><path d="m0 0c-0.65 1.106-1.024 2.566-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.247 3.07 3.456 5.681 5.971 6.723 0.251 0.104 0.498 0.189 0.741 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 9.1635 46.718)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.212 5.915 1.397 3.437 3.869 6.36 6.685 7.526 1.637 0.678 3.156 0.667 4.416 0.092 0.278-0.127 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 8.6384 46.515)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.916 1.397 3.437 3.869 6.359 6.685 7.526 1.336 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 8.4638 45.634)"><path d="m0 0c-0.65 1.105-1.024 2.565-1.024 4.292 0 1.778 0.397 3.601 1.083 5.285 1.247 3.07 3.456 5.681 5.971 6.723 0.251 0.103 0.498 0.189 0.741 0.257" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 9.9431 47.033)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.869 6.359 6.685 7.525 1.636 0.678 3.156 0.667 4.416 0.092 0.278-0.126 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 9.418 46.831)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.618 0 1.989 0.445 4.029 1.212 5.915 1.397 3.437 3.869 6.359 6.685 7.526 1.337 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 9.2434 45.949)"><path d="m0 0c-0.65 1.106-1.024 2.565-1.024 4.293 0 1.777 0.397 3.6 1.082 5.284 1.248 3.07 3.456 5.681 5.972 6.723 0.25 0.104 0.498 0.189 0.741 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 10.723 47.349)"><path d="m0 0c-0.416 0.068-0.812 0.19-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.991 0 1.988 0.445 4.029 1.212 5.915 1.397 3.437 3.869 6.359 6.685 7.526 1.636 0.677 3.156 0.666 4.416 0.091 0.278-0.126 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 10.198 47.146)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.915 1.397 3.437 3.869 6.36 6.685 7.526 1.336 0.554 2.595 0.648 3.698 0.351" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 10.023 46.264)"><path d="m0 0c-0.65 1.106-1.024 2.566-1.024 4.293 0 1.777 0.397 3.6 1.082 5.284 1.248 3.07 3.457 5.681 5.972 6.723 0.25 0.104 0.497 0.189 0.741 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 11.502 47.664)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.212 5.915 1.397 3.437 3.869 6.36 6.685 7.526 1.636 0.678 3.156 0.667 4.416 0.092 0.278-0.127 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 10.977 47.461)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.869 6.359 6.685 7.526 1.336 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 10.802 46.58)"><path d="m0 0c-0.649 1.105-1.024 2.565-1.024 4.292 0 1.777 0.397 3.601 1.083 5.285 1.247 3.07 3.456 5.681 5.972 6.723 0.25 0.103 0.497 0.189 0.741 0.257" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 12.282 47.979)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.187 0.36-2.097 0.96-3.477 3.482-3.477 6.99 0 1.989 0.445 4.03 1.212 5.915 1.397 3.437 3.869 6.36 6.685 7.526 1.636 0.678 3.156 0.667 4.416 0.092 0.278-0.126 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 11.757 47.777)"><path d="m0 0c-1.72 1.154-2.813 3.495-2.813 6.618 0 1.988 0.445 4.029 1.212 5.915 1.397 3.436 3.869 6.359 6.685 7.526 1.336 0.553 2.595 0.648 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 11.582 46.895)"><path d="m0 0c-0.65 1.106-1.024 2.565-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.247 3.07 3.456 5.681 5.971 6.723 0.25 0.104 0.497 0.189 0.741 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 4.771 48.604)"><path d="m0 0 10.959-4.555c0.853-0.354 4.379 0.574 5.231 0.928 0.407 0.169 1.009 0.541 1.436 0.923" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 11.284 49.535)"><path d="m0 0 5.785-2.364" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 10.451 57.232)"><path d="m0 0-19.991 8.259" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 3.3981 54.318)"><path d="m0 0c-1.981 0.906-3.284 3.287-3.284 6.599 0 1.878 0.419 3.804 1.143 5.584 1.32 3.244 3.654 6.003 6.313 7.104 1.543 0.639 2.978 0.63 4.167 0.088l0.313-0.13" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 10.346 56.966)"><path d="m0 0c-1.868 0.854-3.096 3.098-3.096 6.221 0 1.771 0.395 3.587 1.078 5.264 1.245 3.059 3.445 5.66 5.952 6.698 1.455 0.603 2.807 0.593 3.928 0.083" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 3.2732 50.842)"><path d="m0 0-1.238-0.445c-0.505-0.193-0.829-0.678-0.829-1.369v-4.552c0-1.205 0.986-2.6 2.191-3.099l9.653-3.998c0.545-0.226 1.045-0.232 1.43-0.059l1.238 0.445" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 7.2266 55.612)"><path d="m0 0c0.466 0.21 0.762 0.682 0.762 1.342v4.552c0 1.205-0.986 2.599-2.191 3.099l-9.654 3.998c-0.513 0.213-0.987 0.23-1.362 0.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 7.6635 55.455)"><path d="m0 0c0.466 0.21 0.762 0.682 0.762 1.342v4.552c0 1.205-0.986 2.6-2.191 3.099l-9.654 3.998c-0.513 0.213-0.987 0.23-1.362 0.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 7.0118 53.073)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 6.4711 52.849)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 5.9304 52.625)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 5.3897 52.401)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 4.849 52.177)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 4.3083 51.953)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 3.7676 51.729)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 3.2269 51.505)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 3.9117 54.582)"><path d="m0 0c-0.844-0.051-1.631 0.095-2.337 0.418-2.109 0.964-3.496 3.499-3.496 7.025 0 1.999 0.447 4.051 1.219 5.946 1.404 3.454 3.888 6.391 6.718 7.564 1.645 0.68 3.172 0.67 4.439 0.092 0.512-0.233 0.98-0.559 1.397-0.969" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 12.326 56.927)"><path d="m0 0c-0.435-0.281-0.882-0.52-1.339-0.708-1.546-0.641-2.983-0.63-4.173-0.085" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 13.325 50.369)"><path d="m0 0c1.653-0.754 2.835-2.536 3.183-5.027" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 4.7195 48.87)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c-0.093-0.197-0.067-0.357 0.146-0.446l10.959-4.554c0.853-0.354 4.379 0.573 5.231 0.927 0.853 0.354 2.57 1.606 1.717 1.96" stroke-width=".3"/><path d="m0 0v1.2c0.28 0.59 1.639 1.504 2.278 1.769 0.853 0.354 3.964 1.027 4.816 0.673l10.959-4.555v-1.2" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 10.572 49.062)"><path d="m0 0-7.473-1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 10.662 49.634)"><path d="m0 0-5.2-1.389" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 7.0892 49.403)"><path d="m0 0 7.473 1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 8.9922 48.31)"><path d="m0 0-7.473-1.995" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 8.0627 47.973)"><path d="m0 0-7.473-1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 7.0456 47.658)"><path d="m0 0-4.917-1.313" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 6.2489 47.822)"><path d="m0 0 6.384-6.384" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 5.5232 47.883)"><path d="m0 0 4.374-4.374" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 5.0852 48.276)"><path d="m0 0 1.628-1.628" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 6.9745 47.671)"><path d="m0 0 6.384-6.384" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 8.2894 48.109)"><path d="m0 0 5.142-5.142" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 9.6649 48.639)"><path d="m0 0 2.825-2.825" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 17.71 57.515)"><path d="m0 0c-0.611-0.661-1.306-1.179-2.042-1.484-0.921-0.381-1.776-0.375-2.485-0.053l-12.408 3.862" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 13.828 51.835)"><path d="m0 0 11.449-6.085c1.182-0.54 1.959-1.96 1.959-3.936" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 11.406 54.181)"><path d="m0 0 2.001-0.84" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 11.886 56.724)"><path d="m0 0c-1.103 0.781-1.801 2.323-1.801 4.369 0 0.89 0.132 1.795 0.372 2.674l0.07 0.165" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 11.779 53.314)"><path d="m0 0 2.005-0.841" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 13.885 51.929)"><path d="m0 0c-0.684 0.143-1.45 0.062-2.259-0.276-1.393-0.583-2.659-1.823-3.594-3.372l-0.117-0.279" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 12.089 54.533)"><path d="m0 0c-0.228-0.839-0.353-1.702-0.353-2.551 0-2.264 0.89-3.892 2.245-4.511" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 14.768 52.352)"><path d="m0 0c-0.813 0.371-1.795 0.378-2.85-0.06-1.363-0.564-2.601-1.766-3.516-3.268" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 12.781 54.735)"><path d="m0 0 1.887-0.792" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 13.407 57.202)"><path d="m0 0c-1.305 0.604-2.163 2.195-2.163 4.407 0 0.806 0.114 1.627 0.322 2.425l0.069 0.163" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 13.16 53.894)"><path d="m0 0 1.86-0.781" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 15.357 52.668)"><path d="m0 0c-0.783 0.362-1.729 0.369-2.746-0.058-1.314-0.552-2.506-1.726-3.387-3.193l-0.095-0.227" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 13.458 54.987)"><path d="m0 0c-0.236-0.838-0.367-1.704-0.367-2.555 0-2.148 0.833-3.694 2.1-4.28" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 15.946 52.988)"><path d="m0 0c-0.761 0.352-1.679 0.359-2.666-0.056-1.276-0.536-2.435-1.677-3.29-3.102" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 14.132 55.315)"><path d="m0 0 0.014 0.031 1.914-0.804" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 14.739 57.616)"><path d="m0 0c-1.232 0.571-2.043 2.074-2.043 4.164 0 0.785 0.114 1.584 0.322 2.36" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 14.506 54.435)"><path d="m0 0 1.93-0.81" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 16.57 53.303)"><path d="m0 0c-0.74 0.343-1.634 0.349-2.594-0.054-1.241-0.522-2.368-1.631-3.201-3.017l-0.057-0.136" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 14.812 55.586)"><path d="m0 0c-0.204-0.759-0.317-1.541-0.317-2.309 0-2.036 0.79-3.501 1.991-4.057" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 17.187 53.63)"><path d="m0 0c-0.721 0.333-1.591 0.34-2.527-0.053-1.182-0.497-2.259-1.542-3.064-2.851" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 13.828 51.835)"><path d="m0 0c-0.846 0.386-1.866 0.393-2.964-0.062-1.89-0.783-3.55-2.745-4.488-5.052-0.515-1.265-0.814-2.636-0.814-3.971 0-2.355 0.926-4.049 2.335-4.692" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 17.867 53.981)"><path d="m0 0c-0.71 0.324-1.566 0.33-2.487-0.052-1.587-0.657-2.98-2.303-3.767-4.24-0.432-1.062-0.683-2.211-0.683-3.332 0-1.976 0.778-3.397 1.959-3.938" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 16.408 57.373)"><path d="m0 0c-0.784 0.358-1.3 1.301-1.3 2.611 0 0.744 0.166 1.506 0.452 2.21 0.524 1.284 1.447 2.376 2.499 2.812 0.611 0.253 1.179 0.249 1.65 0.034" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 18.025 55.433)"><path d="m0 0c-0.103 1.082-0.586 1.856-1.279 2.173" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 16.408 57.373)"><path d="m0 0c0.472-0.215 1.039-0.219 1.651 0.034 0.264 0.11 0.519 0.259 0.761 0.443" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -1.2657 52.608)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.212 5.915 1.397 3.437 3.869 6.36 6.685 7.526 1.637 0.678 3.156 0.667 4.417 0.092 0.277-0.127 0.542-0.28 0.792-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -1.7907 52.406)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.618 0 1.988 0.445 4.029 1.212 5.915 1.397 3.436 3.869 6.359 6.685 7.526 1.336 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -1.9656 51.524)"><path d="m0 0c-0.649 1.106-1.024 2.565-1.024 4.292 0 1.777 0.397 3.601 1.083 5.285 1.248 3.07 3.456 5.681 5.971 6.723 0.251 0.103 0.498 0.189 0.742 0.257" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -.48609 52.924)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.869 6.359 6.685 7.526 1.636 0.677 3.156 0.666 4.416 0.091 0.278-0.126 0.543-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -1.0113 52.721)"><path d="m0 0c-1.719 1.154-2.813 3.495-2.813 6.618 0 1.989 0.445 4.029 1.212 5.915 1.397 3.437 3.87 6.359 6.685 7.526 1.337 0.553 2.595 0.648 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -1.186 51.84)"><path d="m0 0c-0.65 1.106-1.024 2.565-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.248 3.07 3.456 5.681 5.971 6.723 0.251 0.104 0.498 0.189 0.742 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 .29355 53.239)"><path d="m0 0c-0.416 0.068-0.812 0.19-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.991 0 1.988 0.445 4.029 1.212 5.915 1.397 3.436 3.869 6.359 6.685 7.526 1.636 0.677 3.156 0.666 4.416 0.091 0.278-0.126 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -.23166 53.037)"><path d="m0 0c-1.719 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.915 1.397 3.437 3.87 6.36 6.685 7.526 1.337 0.554 2.595 0.648 3.698 0.351" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -.40632 52.155)"><path d="m0 0c-0.65 1.106-1.024 2.566-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.248 3.07 3.456 5.681 5.971 6.723 0.251 0.104 0.498 0.189 0.742 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 1.073 53.554)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.959-3.477 3.482-3.477 6.99 0 1.989 0.444 4.03 1.212 5.915 1.397 3.437 3.868 6.36 6.684 7.526 1.637 0.678 3.156 0.667 4.417 0.092 0.277-0.127 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 .54798 53.352)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.869 6.359 6.685 7.526 1.336 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 .37332 52.47)"><path d="m0 0c-0.65 1.106-1.024 2.565-1.024 4.292 0 1.778 0.397 3.601 1.083 5.285 1.248 3.07 3.456 5.681 5.971 6.723 0.251 0.103 0.498 0.189 0.742 0.257" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 1.8526 53.87)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.213 5.916 1.396 3.436 3.868 6.359 6.684 7.526 1.637 0.677 3.156 0.666 4.417 0.091 0.277-0.126 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 1.3276 53.667)"><path d="m0 0c-1.72 1.154-2.813 3.495-2.813 6.618 0 1.989 0.445 4.029 1.212 5.915 1.397 3.437 3.869 6.359 6.685 7.526 1.336 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 1.1529 52.786)"><path d="m0 0c-0.65 1.106-1.024 2.565-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.247 3.07 3.456 5.681 5.971 6.723 0.251 0.104 0.498 0.189 0.742 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 2.6323 54.185)"><path d="m0 0c-0.416 0.068-0.812 0.19-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.869 6.359 6.685 7.526 1.637 0.677 3.156 0.666 4.417 0.091 0.277-0.126 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 2.1072 53.983)"><path d="m0 0c-1.72 1.154-2.813 3.495-2.813 6.618 0 1.989 0.445 4.029 1.212 5.915 1.397 3.437 3.869 6.36 6.685 7.526 1.336 0.553 2.595 0.648 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 1.9326 53.101)"><path d="m0 0c-0.65 1.106-1.024 2.566-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.247 3.07 3.456 5.681 5.971 6.723 0.251 0.104 0.498 0.189 0.742 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -3.9288 67.662)"><path d="m0 0c32.683-14.525 23.23-6.317 58.449-16.938" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 16.702 75.493)"><path d="m0 0c-34.519 11.708-27.76 3.055-60.517 17.615" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 5.5949 61.471)"><path d="m0 0c14.274-6.344 21.881-14.57 26.514-22.974 2.407-4.369 4.436-8.049 7.138-10.397" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 14.953 73.03)"><path d="m0 0c-1.582 2.25-2.977 4.781-4.404 7.372-4.492 8.15-11.426 15.153-24.158 20.813" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -6.5239 55.075)"><path d="m0 0 10.958-4.554c0.853-0.355 4.38 0.573 5.232 0.927 0.406 0.169 1.009 0.542 1.436 0.923" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -.011176 56.007)"><path d="m0 0 5.786-2.364" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -.84454 63.703)"><path d="m0 0-19.991 8.259" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -7.897 60.79)"><path d="m0 0c-1.981 0.906-3.284 3.287-3.284 6.599 0 1.879 0.42 3.804 1.143 5.584 1.321 3.244 3.655 6.004 6.313 7.104 1.544 0.639 2.979 0.63 4.167 0.088l0.313-0.13" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -.94875 63.437)"><path d="m0 0c-1.868 0.854-3.097 3.098-3.097 6.221 0 1.771 0.396 3.587 1.078 5.265 1.246 3.058 3.446 5.659 5.952 6.697 1.455 0.603 2.808 0.593 3.928 0.083" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -8.0219 57.313)"><path d="m0 0-1.238-0.445c-0.505-0.193-0.829-0.678-0.829-1.369v-4.552c0-1.205 0.986-2.599 2.192-3.099l9.652-3.998c0.545-0.226 1.045-0.231 1.43-0.058l1.238 0.444" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -4.0685 62.084)"><path d="m0 0c0.466 0.209 0.762 0.681 0.762 1.342v4.551c0 1.205-0.986 2.6-2.191 3.099l-9.653 3.999c-0.514 0.213-0.988 0.23-1.363 0.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -3.6316 61.927)"><path d="m0 0c0.466 0.209 0.762 0.682 0.762 1.342v4.551c0 1.206-0.986 2.6-2.191 3.099l-9.654 3.999c-0.513 0.213-0.987 0.23-1.362 0.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -4.2832 59.544)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -4.824 59.32)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -5.3647 59.096)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -5.9054 58.872)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -6.4461 58.648)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -6.9866 58.424)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -7.5273 58.2)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -8.0681 57.976)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -7.3833 61.054)"><path d="m0 0c-0.844-0.051-1.631 0.095-2.337 0.418-2.109 0.964-3.496 3.499-3.496 7.025 0 2 0.447 4.051 1.219 5.946 1.404 3.454 3.888 6.391 6.718 7.564 1.645 0.68 3.172 0.67 4.439 0.092 0.512-0.233 0.981-0.559 1.398-0.969" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 1.0306 63.399)"><path d="m0 0c-0.434-0.281-0.881-0.519-1.338-0.708-1.547-0.641-2.983-0.63-4.174-0.085" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 2.0299 56.841)"><path d="m0 0c1.653-0.754 2.834-2.535 3.182-5.027" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -6.5756 55.341)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c-0.093-0.197-0.067-0.357 0.146-0.446l10.959-4.554c0.853-0.354 4.379 0.573 5.231 0.927 0.853 0.354 2.57 1.606 1.717 1.96" stroke-width=".3"/><path d="m0 0v1.2c0.28 0.59 1.64 1.504 2.279 1.769 0.852 0.354 3.963 1.027 4.816 0.673l10.958-4.555v-1.2" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -.72308 55.533)"><path d="m0 0-7.473-1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -.63302 56.106)"><path d="m0 0-5.2-1.389" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -4.2059 55.874)"><path d="m0 0 7.473 1.995" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -2.3029 54.782)"><path d="m0 0-7.473-1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -3.2323 54.445)"><path d="m0 0-7.473-1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -4.2495 54.13)"><path d="m0 0-4.917-1.313" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -5.0462 54.294)"><path d="m0 0 6.384-6.384" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -5.7717 54.354)"><path d="m0 0 4.374-4.374" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -6.2099 54.747)"><path d="m0 0 1.628-1.628" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -4.3206 54.143)"><path d="m0 0 6.384-6.384" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -3.0057 54.581)"><path d="m0 0 5.142-5.142" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -1.6302 55.11)"><path d="m0 0 2.825-2.825" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 6.4146 63.987)"><path d="m0 0c-0.611-0.661-1.306-1.179-2.042-1.484-0.921-0.381-1.776-0.375-2.485-0.052l-12.408 3.862" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 2.5329 58.306)"><path d="m0 0 11.449-6.085c1.181-0.54 1.959-1.96 1.959-3.936 0-0.403-0.033-0.812-0.095-1.217" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 .11131 60.653)"><path d="m0 0 2.001-0.84" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 .5907 63.196)"><path d="m0 0c-1.103 0.78-1.801 2.323-1.801 4.368 0 0.89 0.133 1.796 0.373 2.675l0.069 0.165" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 .48441 59.785)"><path d="m0 0 2.004-0.842" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 2.5902 58.4)"><path d="m0 0c-0.683 0.142-1.45 0.062-2.259-0.277-1.393-0.582-2.659-1.823-3.594-3.371l-0.116-0.279" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 .79411 61.004)"><path d="m0 0c-0.228-0.839-0.353-1.703-0.353-2.551 0-2.265 0.89-3.893 2.244-4.511" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 3.4729 58.823)"><path d="m0 0c-0.813 0.371-1.794 0.378-2.85-0.059-1.363-0.565-2.601-1.767-3.516-3.269" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 1.4866 61.206)"><path d="m0 0 1.886-0.792" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 2.1117 63.674)"><path d="m0 0c-1.305 0.604-2.163 2.195-2.163 4.407 0 0.807 0.115 1.627 0.323 2.425l0.068 0.163" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 1.8645 60.366)"><path d="m0 0 1.861-0.781" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 4.0616 59.139)"><path d="m0 0c-0.783 0.362-1.729 0.369-2.746-0.058-1.313-0.552-2.506-1.726-3.387-3.193l-0.095-0.227" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 2.1632 61.459)"><path d="m0 0c-0.237-0.838-0.367-1.704-0.367-2.555 0-2.148 0.833-3.693 2.1-4.28" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 4.6512 59.459)"><path d="m0 0c-0.761 0.352-1.679 0.359-2.667-0.056-1.275-0.536-2.434-1.676-3.29-3.102" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 2.8371 61.786)"><path d="m0 0 0.013 0.03 1.914-0.803" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 3.4439 64.088)"><path d="m0 0c-1.232 0.571-2.043 2.074-2.043 4.164 0 0.785 0.114 1.584 0.323 2.36" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 3.2108 60.906)"><path d="m0 0 1.93-0.81" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 5.275 59.775)"><path d="m0 0c-0.74 0.342-1.633 0.349-2.594-0.055-1.241-0.521-2.368-1.631-3.2-3.017l-0.057-0.135" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 3.5173 62.058)"><path d="m0 0c-0.204-0.759-0.317-1.541-0.317-2.309 0-2.036 0.79-3.5 1.991-4.057" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 5.8918 60.101)"><path d="m0 0c-0.721 0.334-1.591 0.34-2.527-0.053-1.183-0.497-2.259-1.542-3.064-2.85" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 2.5329 58.306)"><path d="m0 0c-0.846 0.386-1.866 0.393-2.964-0.062-1.891-0.782-3.55-2.745-4.488-5.052-0.515-1.265-0.814-2.635-0.814-3.97 0-2.356 0.926-4.049 2.335-4.693" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 6.5719 60.453)"><path d="m0 0c-0.71 0.324-1.566 0.33-2.488-0.052-1.587-0.656-2.979-2.303-3.766-4.24-0.432-1.062-0.683-2.211-0.683-3.332 0-1.976 0.777-3.397 1.959-3.938" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 5.1132 63.845)"><path d="m0 0c-0.784 0.358-1.3 1.301-1.3 2.611 0 0.744 0.166 1.506 0.452 2.21 0.523 1.284 1.447 2.376 2.499 2.812 0.611 0.253 1.179 0.249 1.649 0.034" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 6.73 61.904)"><path d="m0 0c-0.103 1.082-0.586 1.856-1.28 2.173" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 5.1132 63.845)"><path d="m0 0c0.471-0.215 1.039-0.219 1.651 0.035 0.263 0.109 0.518 0.258 0.761 0.442" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -12.561 59.08)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.213 5.916 1.396 3.436 3.868 6.359 6.684 7.525 1.637 0.678 3.156 0.667 4.417 0.092 0.277-0.126 0.542-0.28 0.792-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -13.086 58.877)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.618 0 1.989 0.445 4.029 1.212 5.915 1.397 3.437 3.869 6.359 6.685 7.526 1.336 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -13.26 57.996)"><path d="m0 0c-0.65 1.106-1.024 2.565-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.247 3.07 3.456 5.681 5.971 6.723 0.251 0.104 0.498 0.189 0.741 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -11.781 59.395)"><path d="m0 0c-0.416 0.068-0.812 0.19-1.186 0.361-2.098 0.959-3.478 3.481-3.478 6.99 0 1.988 0.445 4.029 1.212 5.915 1.397 3.437 3.869 6.359 6.685 7.526 1.637 0.677 3.156 0.666 4.417 0.091 0.277-0.126 0.542-0.28 0.792-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -12.306 59.193)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.869 6.359 6.685 7.525 1.336 0.554 2.595 0.648 3.698 0.351" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -12.481 58.311)"><path d="m0 0c-0.65 1.106-1.024 2.565-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.247 3.07 3.455 5.681 5.971 6.723 0.25 0.104 0.498 0.189 0.741 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -11.002 59.711)"><path d="m0 0c-0.416 0.069-0.812 0.19-1.186 0.361-2.098 0.959-3.478 3.481-3.478 6.99 0 1.989 0.445 4.029 1.212 5.915 1.397 3.437 3.869 6.359 6.685 7.526 1.637 0.677 3.156 0.666 4.416 0.091 0.278-0.126 0.543-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -11.527 59.508)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.869 6.359 6.685 7.526 1.336 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -11.701 58.626)"><path d="m0 0c-0.65 1.105-1.024 2.565-1.024 4.292 0 1.777 0.397 3.601 1.082 5.285 1.248 3.07 3.456 5.681 5.972 6.723 0.25 0.103 0.498 0.189 0.741 0.257" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -10.222 60.026)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.212 5.915 1.397 3.437 3.869 6.36 6.685 7.526 1.637 0.678 3.156 0.667 4.416 0.092 0.278-0.126 0.543-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -10.747 59.823)"><path d="m0 0c-1.72 1.154-2.813 3.495-2.813 6.618 0 1.988 0.445 4.029 1.212 5.915 1.397 3.437 3.869 6.359 6.685 7.526 1.336 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -10.922 58.942)"><path d="m0 0c-0.649 1.106-1.024 2.565-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.248 3.07 3.456 5.681 5.971 6.723 0.251 0.103 0.498 0.189 0.742 0.257" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -9.4423 60.341)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.869 6.359 6.685 7.526 1.636 0.677 3.156 0.666 4.416 0.091 0.278-0.126 0.543-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -9.9675 60.139)"><path d="m0 0c-1.719 1.154-2.813 3.495-2.813 6.618 0 1.989 0.445 4.029 1.212 5.915 1.397 3.437 3.869 6.36 6.685 7.526 1.337 0.553 2.595 0.648 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -10.142 59.257)"><path d="m0 0c-0.65 1.106-1.024 2.565-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.248 3.07 3.456 5.681 5.971 6.723 0.251 0.104 0.498 0.189 0.742 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -8.6627 60.657)"><path d="m0 0c-0.416 0.068-0.812 0.19-1.186 0.361-2.098 0.959-3.478 3.481-3.478 6.99 0 1.989 0.445 4.029 1.212 5.915 1.397 3.437 3.869 6.359 6.685 7.526 1.636 0.677 3.156 0.666 4.416 0.091 0.278-0.126 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -9.1879 60.454)"><path d="m0 0c-1.719 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.87 6.359 6.685 7.525 1.337 0.554 2.595 0.648 3.698 0.351" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -9.3625 59.572)"><path d="m0 0c-0.65 1.105-1.024 2.565-1.024 4.292 0 1.777 0.397 3.601 1.083 5.285 1.248 3.07 3.456 5.681 5.971 6.723 0.251 0.103 0.498 0.189 0.742 0.257" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -16.174 61.281)"><path d="m0 0 10.959-4.554c0.853-0.355 4.379 0.573 5.231 0.927 0.407 0.169 1.009 0.542 1.436 0.924" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -9.6607 62.212)"><path d="m0 0 5.786-2.364" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -10.494 69.909)"><path d="m0 0-19.991 8.259" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -17.547 66.995)"><path d="m0 0c-1.981 0.906-3.284 3.287-3.284 6.599 0 1.878 0.419 3.804 1.143 5.584 1.32 3.244 3.654 6.003 6.313 7.104 1.543 0.639 2.978 0.629 4.167 0.088l0.313-0.13" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -10.598 69.643)"><path d="m0 0c-1.868 0.854-3.096 3.099-3.096 6.221 0 1.771 0.395 3.587 1.078 5.265 1.245 3.058 3.445 5.66 5.951 6.697 1.456 0.603 2.809 0.593 3.929 0.083" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -17.671 63.519)"><path d="m0 0-1.238-0.445c-0.505-0.194-0.829-0.679-0.829-1.37v-4.551c0-1.205 0.986-2.6 2.191-3.099l9.653-3.998c0.545-0.226 1.045-0.232 1.43-0.059l1.238 0.445" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -13.718 68.289)"><path d="m0 0c0.466 0.209 0.762 0.682 0.762 1.342v4.551c0 1.206-0.986 2.6-2.191 3.099l-9.654 3.999c-0.513 0.213-0.987 0.23-1.362 0.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -13.281 68.132)"><path d="m0 0c0.466 0.209 0.762 0.682 0.762 1.342v4.552c0 1.205-0.986 2.599-2.191 3.099l-9.654 3.998c-0.513 0.213-0.987 0.23-1.362 0.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -13.933 65.75)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -14.474 65.526)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -15.014 65.302)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -15.555 65.078)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -16.096 64.854)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -16.636 64.63)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -17.177 64.406)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -17.718 64.182)"><path d="m0 0v-6.025" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -17.033 67.26)"><path d="m0 0c-0.843-0.051-1.631 0.095-2.337 0.418-2.108 0.964-3.495 3.499-3.495 7.025 0 2 0.447 4.051 1.218 5.946 1.404 3.454 3.888 6.391 6.718 7.564 1.645 0.681 3.172 0.67 4.439 0.092 0.512-0.233 0.981-0.559 1.398-0.969" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -8.6189 69.604)"><path d="m0 0c-0.434-0.281-0.882-0.519-1.338-0.708-1.547-0.641-2.984-0.629-4.174-0.085" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -7.6197 63.046)"><path d="m0 0c1.653-0.754 2.834-2.535 3.182-5.027" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -16.225 61.547)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c-0.093-0.197-0.067-0.357 0.146-0.446l10.959-4.554c0.853-0.354 4.379 0.573 5.231 0.927 0.853 0.354 2.569 1.606 1.717 1.961" stroke-width=".3"/><path d="m0 0v1.2c0.28 0.59 1.639 1.504 2.278 1.769 0.853 0.355 3.964 1.027 4.816 0.673l10.959-4.555v-1.199" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -10.373 61.739)"><path d="m0 0-7.473-1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -10.283 62.312)"><path d="m0 0-5.2-1.388" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -13.855 62.08)"><path d="m0 0 7.473 1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -11.953 60.987)"><path d="m0 0-7.473-1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -12.882 60.651)"><path d="m0 0-7.473-1.996" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -13.899 60.335)"><path d="m0 0-4.917-1.313" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -14.696 60.499)"><path d="m0 0 6.384-6.384" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -15.421 60.56)"><path d="m0 0 4.374-4.374" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -15.859 60.953)"><path d="m0 0 1.628-1.628" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -13.97 60.348)"><path d="m0 0 6.384-6.384" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -12.655 60.787)"><path d="m0 0 5.142-5.142" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -11.28 61.316)"><path d="m0 0 2.825-2.825" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -3.2349 70.192)"><path d="m0 0c-0.612-0.662-1.306-1.18-2.042-1.484-0.921-0.382-1.777-0.376-2.485-0.053l-12.408 3.862" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -7.1167 64.512)"><path d="m0 0 11.449-6.086c1.181-0.54 1.958-1.959 1.958-3.935" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -9.5384 66.859)"><path d="m0 0 2.001-0.84" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -9.0588 69.402)"><path d="m0 0c-1.103 0.78-1.801 2.323-1.801 4.369 0 0.889 0.133 1.795 0.373 2.674l0.069 0.165" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -9.1653 65.991)"><path d="m0 0 2.005-0.841" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -7.0593 64.606)"><path d="m0 0c-0.684 0.143-1.45 0.062-2.259-0.276-1.393-0.583-2.659-1.823-3.594-3.372l-0.117-0.279" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -8.8556 67.21)"><path d="m0 0c-0.228-0.839-0.353-1.703-0.353-2.551 0-2.264 0.89-3.893 2.245-4.511" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -6.1768 65.029)"><path d="m0 0c-0.813 0.371-1.794 0.378-2.85-0.059-1.363-0.565-2.601-1.767-3.515-3.268" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -8.163 67.412)"><path d="m0 0 1.886-0.792" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -7.5378 69.88)"><path d="m0 0c-1.305 0.604-2.163 2.195-2.163 4.407 0 0.807 0.114 1.627 0.323 2.426l0.068 0.162" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -7.785 66.571)"><path d="m0 0 1.861-0.781" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -5.5879 65.345)"><path d="m0 0c-0.783 0.362-1.729 0.369-2.746-0.058-1.313-0.551-2.506-1.726-3.387-3.193l-0.095-0.226" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -7.4865 67.664)"><path d="m0 0c-0.236-0.838-0.367-1.704-0.367-2.555 0-2.149 0.833-3.694 2.1-4.28" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -4.9983 65.665)"><path d="m0 0c-0.761 0.352-1.679 0.358-2.667-0.057-1.276-0.535-2.434-1.676-3.29-3.101" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -6.8125 67.992)"><path d="m0 0 0.013 0.03 1.914-0.803" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -6.2056 70.293)"><path d="m0 0c-1.233 0.571-2.043 2.074-2.043 4.164 0 0.785 0.114 1.584 0.323 2.36" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -6.4389 67.112)"><path d="m0 0 1.93-0.81" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -4.3747 65.98)"><path d="m0 0c-0.74 0.343-1.633 0.349-2.594-0.055-1.24-0.521-2.367-1.631-3.2-3.016l-0.057-0.136" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -6.1322 68.263)"><path d="m0 0c-0.205-0.759-0.317-1.541-0.317-2.309 0-2.036 0.79-3.501 1.991-4.057" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -3.7579 66.307)"><path d="m0 0c-0.721 0.334-1.591 0.34-2.527-0.053-1.182-0.497-2.259-1.542-3.064-2.85" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -7.1167 64.512)"><path d="m0 0c-0.846 0.386-1.866 0.393-2.965-0.062-1.89-0.783-3.55-2.745-4.487-5.052-0.515-1.265-0.814-2.636-0.814-3.971 0-2.355 0.926-4.049 2.334-4.692" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -3.0778 66.659)"><path d="m0 0c-0.71 0.324-1.566 0.33-2.488-0.052-1.586-0.656-2.979-2.303-3.765-4.239-0.433-1.062-0.684-2.212-0.684-3.333 0-1.976 0.778-3.397 1.959-3.938" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -4.5365 70.05)"><path d="m0 0c-0.784 0.359-1.3 1.301-1.3 2.612 0 0.743 0.166 1.505 0.453 2.21 0.522 1.283 1.446 2.375 2.498 2.811 0.611 0.253 1.179 0.249 1.649 0.035" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -2.9197 68.11)"><path d="m0 0c-0.103 1.082-0.586 1.856-1.28 2.173" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -4.5365 70.05)"><path d="m0 0c0.471-0.215 1.04-0.219 1.651 0.035 0.264 0.109 0.518 0.258 0.762 0.443" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -22.21 65.286)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.991 0 1.988 0.445 4.029 1.212 5.915 1.397 3.436 3.869 6.359 6.685 7.526 1.637 0.677 3.156 0.666 4.416 0.091 0.278-0.126 0.543-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -22.736 65.083)"><path d="m0 0c-1.719 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.213 5.915 1.396 3.437 3.869 6.36 6.684 7.526 1.337 0.553 2.595 0.648 3.698 0.351" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -22.91 64.201)"><path d="m0 0c-0.649 1.106-1.024 2.566-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.248 3.07 3.456 5.681 5.971 6.723 0.251 0.104 0.498 0.189 0.742 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -21.431 65.601)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.959-3.477 3.482-3.477 6.99 0 1.989 0.444 4.03 1.212 5.915 1.397 3.437 3.868 6.36 6.684 7.526 1.637 0.678 3.156 0.667 4.417 0.092 0.277-0.127 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -21.956 65.398)"><path d="m0 0c-1.719 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.87 6.359 6.685 7.526 1.337 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -22.131 64.517)"><path d="m0 0c-0.65 1.105-1.024 2.565-1.024 4.292 0 1.778 0.397 3.601 1.083 5.285 1.248 3.07 3.456 5.681 5.971 6.723 0.251 0.103 0.498 0.189 0.742 0.257" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -20.651 65.916)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.477 3.482-3.477 6.99 0 1.989 0.444 4.03 1.212 5.916 1.397 3.436 3.868 6.359 6.684 7.525 1.637 0.678 3.156 0.667 4.417 0.092 0.277-0.126 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -21.176 65.714)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.618 0 1.989 0.445 4.029 1.212 5.915 1.397 3.437 3.87 6.359 6.685 7.526 1.337 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -21.351 64.832)"><path d="m0 0c-0.65 1.106-1.024 2.565-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.248 3.07 3.456 5.681 5.971 6.723 0.251 0.104 0.498 0.189 0.742 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -19.872 66.232)"><path d="m0 0c-0.416 0.068-0.812 0.19-1.186 0.36-2.098 0.96-3.477 3.482-3.477 6.99 0 1.989 0.444 4.03 1.212 5.916 1.397 3.437 3.868 6.359 6.684 7.526 1.637 0.677 3.156 0.666 4.417 0.091 0.277-0.126 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -20.397 66.029)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.915 1.397 3.437 3.869 6.36 6.685 7.526 1.336 0.554 2.595 0.648 3.698 0.351" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -20.571 65.147)"><path d="m0 0c-0.65 1.106-1.024 2.566-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.248 3.07 3.456 5.681 5.971 6.723 0.251 0.104 0.498 0.189 0.742 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -19.092 66.547)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.213 5.915 1.396 3.437 3.868 6.36 6.684 7.526 1.637 0.678 3.156 0.667 4.417 0.092 0.277-0.127 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -19.617 66.344)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.617 0 1.989 0.445 4.03 1.212 5.916 1.397 3.436 3.869 6.359 6.685 7.526 1.336 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -19.792 65.463)"><path d="m0 0c-0.65 1.105-1.024 2.565-1.024 4.292 0 1.777 0.397 3.601 1.083 5.285 1.247 3.07 3.456 5.681 5.971 6.723 0.251 0.103 0.498 0.189 0.742 0.257" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -18.312 66.862)"><path d="m0 0c-0.416 0.068-0.812 0.189-1.186 0.36-2.098 0.96-3.478 3.482-3.478 6.99 0 1.989 0.445 4.03 1.212 5.915 1.397 3.437 3.869 6.36 6.685 7.526 1.637 0.678 3.156 0.667 4.417 0.092 0.277-0.126 0.542-0.28 0.793-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -18.837 66.66)"><path d="m0 0c-1.72 1.153-2.813 3.495-2.813 6.618 0 1.988 0.445 4.029 1.212 5.915 1.397 3.436 3.869 6.359 6.685 7.526 1.336 0.553 2.595 0.647 3.698 0.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -19.012 65.778)"><path d="m0 0c-0.65 1.106-1.024 2.565-1.024 4.293 0 1.777 0.397 3.6 1.083 5.284 1.247 3.07 3.456 5.681 5.971 6.723 0.251 0.104 0.498 0.189 0.741 0.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 72.409 89.023)"><path d="m0 0-25.345 10.661c-2.374 0.986-2.255 2.626-1.268 5 0.987 2.375 2.468 4.586 4.842 3.598 0 0 25.43-10.696 25.455-10.707" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="translate(-19.901 -12.325)"><g transform="matrix(.35278 0 0 -.35278 92.31 101.35)"><path d="m0 0 17.215-7.602" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 91.346 97.329)"><path d="m0 0 23.925-10.543" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 103.37 100.33)"><path d="m0 0c-0.853 0.025-1.768-0.149-2.719-0.543-2.978-1.233-5.593-4.325-7.071-7.959-0.812-1.994-1.28-4.152-1.28-6.257 0-2.847 0.859-5.082 2.262-6.425" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 102.04 108.23)"><path d="m0 0c-1.336-0.341-2.575-0.234-3.639 0.252-0.515 0.235-0.99 0.56-1.415 0.967l-2.965 2.842c-1.226 1.168-1.977 3.115-1.977 5.599 0 1.831 0.408 3.71 1.115 5.445 1.286 3.164 3.562 5.854 6.154 6.928 0.831 0.344 1.629 0.495 2.373 0.473l4.108-0.104c0.696-0.019 1.351-0.173 1.951-0.446 0.972-0.442 1.798-1.203 2.42-2.228" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 101.9 108.16)"><path d="m0 0c-0.21 0.061-0.413 0.137-0.61 0.227l-2.137 0.888c-2 0.914-3.315 3.316-3.315 6.658 0 1.896 0.423 3.839 1.155 5.635 1.331 3.274 3.686 6.058 6.369 7.168 1.558 0.646 3.006 0.636 4.205 0.089l2.138-0.89c0.106-0.047 0.21-0.1 0.312-0.157" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 104.65 101.18)"><path d="m0 0c-1.199 0.548-2.647 0.558-4.205-0.087-2.683-1.111-5.037-3.895-6.369-7.169-0.731-1.796-1.154-3.74-1.154-5.635 0-3.341 1.314-5.745 3.313-6.658" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 102.51 108.42)"><path d="m0 0-1.328 0.552c-1.999 0.914-3.314 3.316-3.314 6.659 0 1.895 0.423 3.839 1.155 5.635 1.331 3.273 3.686 6.057 6.369 7.168 1.557 0.645 3.006 0.634 4.205 0.089l2.138-0.89c0.55-0.251 1.048-0.615 1.483-1.08" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 105.76 101.64)"><path d="m0 0c-1.2 0.548-2.648 0.558-4.206-0.088-2.683-1.11-5.037-3.894-6.368-7.168-0.732-1.796-1.154-3.74-1.154-5.635 0-2.894 0.986-5.085 2.548-6.213" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 108.56 111.9)"><path d="m0 0c-0.212 0.067-0.419 0.146-0.62 0.239l-1.579 0.657c-2.474 1.13-4.1 4.102-4.1 8.237 0 2.345 0.524 4.749 1.428 6.971 1.646 4.049 4.56 7.493 7.879 8.867 1.928 0.799 3.719 0.786 5.202 0.109l1.58-0.657c0.103-0.047 0.203-0.096 0.302-0.149" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 112.01 103.28)"><path d="m0 0c-1.484 0.678-3.275 0.69-5.203-0.108-3.318-1.374-6.231-4.819-7.878-8.869-0.904-2.221-1.427-4.627-1.427-6.97 0-4.134 1.625-7.107 4.098-8.237" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 112.85 113.64)"><path d="m0 0c-0.47 0.082-0.918 0.222-1.341 0.415l-10.411 4.327c-2.474 1.131-4.099 4.103-4.099 8.237 0 2.345 0.523 4.75 1.427 6.971 1.648 4.05 4.562 7.494 7.88 8.867 1.927 0.799 3.719 0.787 5.202 0.11l10.411-4.327c0.268-0.122 0.525-0.265 0.77-0.429" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 116.05 104.96)"><path d="m0 0c-1.484 0.677-3.275 0.689-5.202-0.108-3.319-1.375-6.232-4.819-7.879-8.869-0.904-2.221-1.427-4.627-1.427-6.97 0-4.135 1.625-7.108 4.098-8.238" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 112.49 112.95)"><path d="m0 0c-2.034 1.091-3.353 3.652-3.353 7.157 0 2.077 0.463 4.207 1.264 6.174 1.459 3.587 4.039 6.638 6.979 7.855 1.464 0.606 2.84 0.684 4.032 0.315" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 117.22 115.32)"><path d="m0 0c-1.596-0.407-3.074-0.28-4.343 0.3l-5.39 2.24c-2.65 1.211-4.391 4.394-4.391 8.822 0 2.511 0.56 5.086 1.528 7.465 1.765 4.338 4.885 8.027 8.44 9.498 2.063 0.855 3.982 0.841 5.571 0.117l5.392-2.242c1.206-0.55 2.223-1.509 2.975-2.807" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 119.62 106.08)"><path d="m0 0c-1.59 0.726-3.509 0.739-5.572-0.116-3.555-1.472-6.674-5.16-8.438-9.497-0.969-2.38-1.529-4.955-1.529-7.466 0-4.428 1.741-7.611 4.39-8.821" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.34 115.77)"><path d="m0 0c-1.272-0.248-2.454-0.11-3.481 0.359l-5.505 2.267c-2.368 1.083-3.925 3.928-3.925 7.887 0 2.245 0.501 4.548 1.367 6.674 1.577 3.878 4.367 7.175 7.544 8.491 1.846 0.764 3.561 0.753 4.981 0.105l5.505-2.268c0.967-0.441 1.798-1.175 2.445-2.159" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 121.63 107.48)"><path d="m0 0c-1.421 0.649-3.137 0.661-4.981-0.104-3.178-1.315-5.967-4.613-7.544-8.491-0.866-2.127-1.367-4.429-1.367-6.674 0-3.959 1.557-6.805 3.924-7.886" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 121.18 107.29)"><path d="m0 0c-1.421 0.648-3.137 0.66-4.981-0.104-3.178-1.316-5.967-4.614-7.544-8.492-0.867-2.127-1.367-4.429-1.367-6.674 0-3.958 1.556-6.804 3.924-7.886" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 120.73 107.11)"><path d="m0 0c-1.422 0.649-3.137 0.661-4.982-0.104-3.178-1.315-5.966-4.613-7.543-8.491-0.867-2.127-1.368-4.429-1.368-6.674 0-3.959 1.557-6.805 3.924-7.886" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 120.29 106.92)"><path d="m0 0c-1.421 0.648-3.137 0.66-4.981-0.104-3.178-1.316-5.967-4.614-7.544-8.492-0.867-2.127-1.367-4.429-1.367-6.674 0-3.958 1.557-6.804 3.924-7.886" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.84 106.74)"><path d="m0 0c-1.422 0.649-3.137 0.661-4.982-0.104-3.177-1.315-5.966-4.613-7.543-8.491-0.867-2.127-1.367-4.429-1.367-6.674 0-3.959 1.556-6.805 3.923-7.886" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 118.39 115.42)"><path d="m0 0c-2.193 1.003-3.635 3.638-3.635 7.304 0 2.078 0.464 4.21 1.266 6.179 1.46 3.591 4.044 6.644 6.985 7.863 1.709 0.707 3.297 0.696 4.613 0.096l1.487-0.619c2.194-1 3.637-3.636 3.637-7.303 0-2.136-0.489-4.328-1.332-6.342-1.47-3.521-4.02-6.5-6.918-7.701-1.71-0.708-3.3-0.697-4.617-0.094z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 122.17 108.07)"><path d="m0 0c-1.316 0.601-2.904 0.612-4.613-0.096-2.942-1.218-5.525-4.272-6.985-7.862-0.801-1.97-1.265-4.102-1.265-6.18 0-3.666 1.441-6.301 3.634-7.302" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.03 115.38)"><path d="m0 0c1.16-0.53 2.539-0.493 3.985 0.105 2.616 1.083 5.042 3.803 6.493 7.276 0.831 1.987 1.27 4.075 1.27 6.037 0 3.217-1.186 5.678-3.175 6.584" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 122.05 108.32)"><path d="m0 0c-1.159 0.528-2.536 0.492-3.982-0.107-2.661-1.102-5.111-3.88-6.555-7.43-0.79-1.94-1.207-3.974-1.207-5.882 0-3.216 1.185-5.677 3.171-6.584" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 115.1 114.81)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.8 114.47)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.57 114.1)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.4 113.66)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.23 113.15)"><path d="m0 0-5.221 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.15 112.61)"><path d="m0 0-5.222 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.15 112.07)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.17 111.48)"><path d="m0 0-5.222 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.28 110.93)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.32 110.43)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.68 109.47)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.89 109.01)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.14 108.51)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.42 108.06)"><path d="m0 0-5.222 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.76 107.6)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 116.18 107.17)"><path d="m0 0-5.222 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 116.61 106.77)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 117.09 106.41)"><path d="m0 0-5.221 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 117.57 106.15)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 118.05 105.99)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 118.56 105.9)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 118.99 105.91)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.5 109.98)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 111.13 102.92)"><path d="m0 0c-1.484 0.678-3.276 0.69-5.203-0.108-3.318-1.374-6.232-4.819-7.878-8.869-0.905-2.221-1.428-4.626-1.428-6.97 0-4.134 1.626-7.107 4.099-8.237" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 104.47 107.5)"><path d="m0 0c0-2.504 0.738-4.48 1.95-5.697" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 107.79 102.82)"><path d="m0 0c-0.602-0.05-1.232-0.205-1.882-0.474-2.68-1.11-5.032-3.891-6.362-7.161" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 107.66 111.53)"><path d="m0 0c-0.199 0.064-0.394 0.14-0.582 0.227l-1.58 0.656c-2.75 1.234-3.821 3.841-5.011 4.33l-5.617 2.327c-1.999 0.914-3.314 3.316-3.314 6.659 0 1.896 0.423 3.839 1.154 5.635 1.332 3.273 3.687 6.058 6.37 7.168 1.558 0.645 3.006 0.635 4.205 0.088l5.068-2.112c1.345-0.553 4.356 1.507 7.555 0.089l1.58-0.657c0.089-0.04 0.177-0.083 0.263-0.128" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 106.9 111.22)"><path d="m0 0c-2.474 1.131-4.099 4.103-4.099 8.237 0 2.345 0.523 4.749 1.427 6.971" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 108.73 102.72)"><path d="m0 0c1.927 0.799 3.719 0.786 5.202 0.109" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.8 108.91)"><path d="m0 0 4.18-1.737" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 119.03 109.76)"><path d="m0 0 5.35-2.224" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 120.91 110.54)"><path d="m0 0c-0.29 0.132-0.48 0.479-0.48 0.963 0 0.772 0.486 1.6 1.086 1.849 0.15 0.062 0.292 0.082 0.423 0.065" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 121.28 109.53)"><path d="m0 0c0.39-0.051 0.663-0.435 0.663-1.015 0-0.772-0.486-1.6-1.086-1.848-0.224-0.093-0.433-0.092-0.606-0.014" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.04 112.31)"><path d="m0 0 3.665-1.523" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 117.97 113.44)"><path d="m0 0 2.834-1.178" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.97 113.86)"><path d="m0 0c-0.29 0.131-0.48 0.479-0.48 0.962 0 0.772 0.486 1.601 1.086 1.849 0.15 0.062 0.293 0.083 0.423 0.065" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.33 112.84)"><path d="m0 0c0.39-0.051 0.663-0.435 0.663-1.014 0-0.773-0.486-1.6-1.086-1.849-0.224-0.093-0.433-0.092-0.606-0.013" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.82 110.12)"><path d="m0 0 1.437-0.598" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.33 111.09)"><path d="m0 0 1.792-0.744" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.97 111.35)"><path d="m0 0c-0.29 0.131-0.48 0.479-0.48 0.962 0 0.772 0.486 1.601 1.086 1.849 0.15 0.062 0.293 0.082 0.423 0.065" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.33 110.33)"><path d="m0 0c0.39-0.051 0.663-0.435 0.663-1.015 0-0.772-0.486-1.599-1.086-1.848-0.224-0.093-0.433-0.092-0.606-0.013" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 119.59 110.89)"><path d="m0 0 2.012-0.836" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.2 111.48)"><path d="m0 0 4.929-2.049" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 119.94 112.2)"><path d="m0 0c-0.29 0.132-0.48 0.479-0.48 0.962 0 0.773 0.486 1.601 1.086 1.85 0.15 0.061 0.293 0.082 0.423 0.065" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 120.3 111.19)"><path d="m0 0c0.39-0.052 0.663-0.436 0.663-1.015 0-0.772-0.486-1.6-1.086-1.848-0.224-0.094-0.433-0.092-0.606-0.014" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 120.56 111.74)"><path d="m0 0 2.02-0.839" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.08 111.87)"><path d="m0 0 8.044-3.354" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 120.91 113.05)"><path d="m0 0c-0.29 0.131-0.48 0.479-0.48 0.962 0 0.772 0.486 1.601 1.086 1.849 0.15 0.062 0.292 0.082 0.423 0.065" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 121.28 112.04)"><path d="m0 0c0.39-0.051 0.663-0.435 0.663-1.015 0-0.772-0.486-1.599-1.086-1.848-0.224-0.093-0.433-0.092-0.606-0.013" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g></g></g></g></g></g>';
  sDis += this.this.ScriviLabel(info.pos, etk, obj);
  sDis += '</g>';
  return sDis;
}

render_4TESTERGBTVALL(dim_target, etk, obj) {
  let dimensioni = {
      w: 240.53,
      h: 123.45
  };
  //width="240.53mm" height="123.01mm"
  let info = this.setupCurrentScale(dimensioni, dim_target);
  let sDis = '';
  sDis += '<g>';
  //sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '<g transform="translate(' + info.pos.x + ' ' + info.pos.y + ')" ><g transform="scale(' + info.scale + ')" ><g transform="translate(49.218 -50.849)"><rect x="-49.218" y="50.849" width="241.24" height="123.51" fill="none" stroke="#000" stroke-width=".55"/><g transform="matrix(1.3782 0 0 1.3458 -203.27 -133.1)"><g transform="translate(153.2 105.7)"><g transform="matrix(.35278 0 0 -.35278 92.31 101.35)"><path d="m0 0 17.215-7.602" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 91.346 97.329)"><path d="m0 0 23.925-10.543" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 103.37 100.33)"><path d="m0 0c-0.853 0.025-1.768-0.149-2.719-0.543-2.978-1.233-5.593-4.325-7.071-7.959-0.812-1.994-1.28-4.152-1.28-6.257 0-2.847 0.859-5.082 2.262-6.425" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 102.04 108.23)"><path d="m0 0c-1.336-0.341-2.575-0.234-3.639 0.252-0.515 0.235-0.99 0.56-1.415 0.967l-2.965 2.842c-1.226 1.168-1.977 3.115-1.977 5.599 0 1.831 0.408 3.71 1.115 5.445 1.286 3.164 3.562 5.854 6.154 6.928 0.831 0.344 1.629 0.495 2.373 0.473l4.108-0.104c0.696-0.019 1.351-0.173 1.951-0.446 0.972-0.442 1.798-1.203 2.42-2.228" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 101.9 108.16)"><path d="m0 0c-0.21 0.061-0.413 0.137-0.61 0.227l-2.137 0.888c-2 0.914-3.315 3.316-3.315 6.658 0 1.896 0.423 3.839 1.155 5.635 1.331 3.274 3.686 6.058 6.369 7.168 1.558 0.646 3.006 0.636 4.205 0.089l2.138-0.89c0.106-0.047 0.21-0.1 0.312-0.157" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 104.65 101.18)"><path d="m0 0c-1.199 0.548-2.647 0.558-4.205-0.087-2.683-1.111-5.037-3.895-6.369-7.169-0.731-1.796-1.154-3.74-1.154-5.635 0-3.341 1.314-5.745 3.313-6.658" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 102.51 108.42)"><path d="m0 0-1.328 0.552c-1.999 0.914-3.314 3.316-3.314 6.659 0 1.895 0.423 3.839 1.155 5.635 1.331 3.273 3.686 6.057 6.369 7.168 1.557 0.645 3.006 0.634 4.205 0.089l2.138-0.89c0.55-0.251 1.048-0.615 1.483-1.08" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 105.76 101.64)"><path d="m0 0c-1.2 0.548-2.648 0.558-4.206-0.088-2.683-1.11-5.037-3.894-6.368-7.168-0.732-1.796-1.154-3.74-1.154-5.635 0-2.894 0.986-5.085 2.548-6.213" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 108.56 111.9)"><path d="m0 0c-0.212 0.067-0.419 0.146-0.62 0.239l-1.579 0.657c-2.474 1.13-4.1 4.102-4.1 8.237 0 2.345 0.524 4.749 1.428 6.971 1.646 4.049 4.56 7.493 7.879 8.867 1.928 0.799 3.719 0.786 5.202 0.109l1.58-0.657c0.103-0.047 0.203-0.096 0.302-0.149" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 112.01 103.28)"><path d="m0 0c-1.484 0.678-3.275 0.69-5.203-0.108-3.318-1.374-6.231-4.819-7.878-8.869-0.904-2.221-1.427-4.627-1.427-6.97 0-4.134 1.625-7.107 4.098-8.237" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 112.85 113.64)"><path d="m0 0c-0.47 0.082-0.918 0.222-1.341 0.415l-10.411 4.327c-2.474 1.131-4.099 4.103-4.099 8.237 0 2.345 0.523 4.75 1.427 6.971 1.648 4.05 4.562 7.494 7.88 8.867 1.927 0.799 3.719 0.787 5.202 0.11l10.411-4.327c0.268-0.122 0.525-0.265 0.77-0.429" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 116.05 104.96)"><path d="m0 0c-1.484 0.677-3.275 0.689-5.202-0.108-3.319-1.375-6.232-4.819-7.879-8.869-0.904-2.221-1.427-4.627-1.427-6.97 0-4.135 1.625-7.108 4.098-8.238" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 112.49 112.95)"><path d="m0 0c-2.034 1.091-3.353 3.652-3.353 7.157 0 2.077 0.463 4.207 1.264 6.174 1.459 3.587 4.039 6.638 6.979 7.855 1.464 0.606 2.84 0.684 4.032 0.315" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 117.22 115.32)"><path d="m0 0c-1.596-0.407-3.074-0.28-4.343 0.3l-5.39 2.24c-2.65 1.211-4.391 4.394-4.391 8.822 0 2.511 0.56 5.086 1.528 7.465 1.765 4.338 4.885 8.027 8.44 9.498 2.063 0.855 3.982 0.841 5.571 0.117l5.392-2.242c1.206-0.55 2.223-1.509 2.975-2.807" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 119.62 106.08)"><path d="m0 0c-1.59 0.726-3.509 0.739-5.572-0.116-3.555-1.472-6.674-5.16-8.438-9.497-0.969-2.38-1.529-4.955-1.529-7.466 0-4.428 1.741-7.611 4.39-8.821" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.34 115.77)"><path d="m0 0c-1.272-0.248-2.454-0.11-3.481 0.359l-5.505 2.267c-2.368 1.083-3.925 3.928-3.925 7.887 0 2.245 0.501 4.548 1.367 6.674 1.577 3.878 4.367 7.175 7.544 8.491 1.846 0.764 3.561 0.753 4.981 0.105l5.505-2.268c0.967-0.441 1.798-1.175 2.445-2.159" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 121.63 107.48)"><path d="m0 0c-1.421 0.649-3.137 0.661-4.981-0.104-3.178-1.315-5.967-4.613-7.544-8.491-0.866-2.127-1.367-4.429-1.367-6.674 0-3.959 1.557-6.805 3.924-7.886" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 121.18 107.29)"><path d="m0 0c-1.421 0.648-3.137 0.66-4.981-0.104-3.178-1.316-5.967-4.614-7.544-8.492-0.867-2.127-1.367-4.429-1.367-6.674 0-3.958 1.556-6.804 3.924-7.886" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 120.73 107.11)"><path d="m0 0c-1.422 0.649-3.137 0.661-4.982-0.104-3.178-1.315-5.966-4.613-7.543-8.491-0.867-2.127-1.368-4.429-1.368-6.674 0-3.959 1.557-6.805 3.924-7.886" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 120.29 106.92)"><path d="m0 0c-1.421 0.648-3.137 0.66-4.981-0.104-3.178-1.316-5.967-4.614-7.544-8.492-0.867-2.127-1.367-4.429-1.367-6.674 0-3.958 1.557-6.804 3.924-7.886" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.84 106.74)"><path d="m0 0c-1.422 0.649-3.137 0.661-4.982-0.104-3.177-1.315-5.966-4.613-7.543-8.491-0.867-2.127-1.367-4.429-1.367-6.674 0-3.959 1.556-6.805 3.923-7.886" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 118.39 115.42)"><path d="m0 0c-2.193 1.003-3.635 3.638-3.635 7.304 0 2.078 0.464 4.21 1.266 6.179 1.46 3.591 4.044 6.644 6.985 7.863 1.709 0.707 3.297 0.696 4.613 0.096l1.487-0.619c2.194-1 3.637-3.636 3.637-7.303 0-2.136-0.489-4.328-1.332-6.342-1.47-3.521-4.02-6.5-6.918-7.701-1.71-0.708-3.3-0.697-4.617-0.094z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 122.17 108.07)"><path d="m0 0c-1.316 0.601-2.904 0.612-4.613-0.096-2.942-1.218-5.525-4.272-6.985-7.862-0.801-1.97-1.265-4.102-1.265-6.18 0-3.666 1.441-6.301 3.634-7.302" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.03 115.38)"><path d="m0 0c1.16-0.53 2.539-0.493 3.985 0.105 2.616 1.083 5.042 3.803 6.493 7.276 0.831 1.987 1.27 4.075 1.27 6.037 0 3.217-1.186 5.678-3.175 6.584" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 122.05 108.32)"><path d="m0 0c-1.159 0.528-2.536 0.492-3.982-0.107-2.661-1.102-5.111-3.88-6.555-7.43-0.79-1.94-1.207-3.974-1.207-5.882 0-3.216 1.185-5.677 3.171-6.584" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 115.1 114.81)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.8 114.47)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.57 114.1)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.4 113.66)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.23 113.15)"><path d="m0 0-5.221 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.15 112.61)"><path d="m0 0-5.222 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.15 112.07)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.17 111.48)"><path d="m0 0-5.222 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.28 110.93)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.32 110.43)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.68 109.47)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.89 109.01)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.14 108.51)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.42 108.06)"><path d="m0 0-5.222 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 115.76 107.6)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 116.18 107.17)"><path d="m0 0-5.222 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 116.61 106.77)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 117.09 106.41)"><path d="m0 0-5.221 2.219" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 117.57 106.15)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 118.05 105.99)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 118.56 105.9)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 118.99 105.91)"><path d="m0 0-5.222 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.5 109.98)"><path d="m0 0-5.221 2.218" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 111.13 102.92)"><path d="m0 0c-1.484 0.678-3.276 0.69-5.203-0.108-3.318-1.374-6.232-4.819-7.878-8.869-0.905-2.221-1.428-4.626-1.428-6.97 0-4.134 1.626-7.107 4.099-8.237" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 104.47 107.5)"><path d="m0 0c0-2.504 0.738-4.48 1.95-5.697" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 107.79 102.82)"><path d="m0 0c-0.602-0.05-1.232-0.205-1.882-0.474-2.68-1.11-5.032-3.891-6.362-7.161" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 107.66 111.53)"><path d="m0 0c-0.199 0.064-0.394 0.14-0.582 0.227l-1.58 0.656c-2.75 1.234-3.821 3.841-5.011 4.33l-5.617 2.327c-1.999 0.914-3.314 3.316-3.314 6.659 0 1.896 0.423 3.839 1.154 5.635 1.332 3.273 3.687 6.058 6.37 7.168 1.558 0.645 3.006 0.635 4.205 0.088l5.068-2.112c1.345-0.553 4.356 1.507 7.555 0.089l1.58-0.657c0.089-0.04 0.177-0.083 0.263-0.128" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 106.9 111.22)"><path d="m0 0c-2.474 1.131-4.099 4.103-4.099 8.237 0 2.345 0.523 4.749 1.427 6.971" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 108.73 102.72)"><path d="m0 0c1.927 0.799 3.719 0.786 5.202 0.109" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.8 108.91)"><path d="m0 0 4.18-1.737" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 119.03 109.76)"><path d="m0 0 5.35-2.224" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 120.91 110.54)"><path d="m0 0c-0.29 0.132-0.48 0.479-0.48 0.963 0 0.772 0.486 1.6 1.086 1.849 0.15 0.062 0.292 0.082 0.423 0.065" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 121.28 109.53)"><path d="m0 0c0.39-0.051 0.663-0.435 0.663-1.015 0-0.772-0.486-1.6-1.086-1.848-0.224-0.093-0.433-0.092-0.606-0.014" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.04 112.31)"><path d="m0 0 3.665-1.523" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 117.97 113.44)"><path d="m0 0 2.834-1.178" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.97 113.86)"><path d="m0 0c-0.29 0.131-0.48 0.479-0.48 0.962 0 0.772 0.486 1.601 1.086 1.849 0.15 0.062 0.293 0.083 0.423 0.065" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.33 112.84)"><path d="m0 0c0.39-0.051 0.663-0.435 0.663-1.014 0-0.773-0.486-1.6-1.086-1.849-0.224-0.093-0.433-0.092-0.606-0.013" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.82 110.12)"><path d="m0 0 1.437-0.598" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.33 111.09)"><path d="m0 0 1.792-0.744" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.97 111.35)"><path d="m0 0c-0.29 0.131-0.48 0.479-0.48 0.962 0 0.772 0.486 1.601 1.086 1.849 0.15 0.062 0.293 0.082 0.423 0.065" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 119.33 110.33)"><path d="m0 0c0.39-0.051 0.663-0.435 0.663-1.015 0-0.772-0.486-1.599-1.086-1.848-0.224-0.093-0.433-0.092-0.606-0.013" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 119.59 110.89)"><path d="m0 0 2.012-0.836" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.2 111.48)"><path d="m0 0 4.929-2.049" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 119.94 112.2)"><path d="m0 0c-0.29 0.132-0.48 0.479-0.48 0.962 0 0.773 0.486 1.601 1.086 1.85 0.15 0.061 0.293 0.082 0.423 0.065" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 120.3 111.19)"><path d="m0 0c0.39-0.052 0.663-0.436 0.663-1.015 0-0.772-0.486-1.6-1.086-1.848-0.224-0.094-0.433-0.092-0.606-0.014" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 120.56 111.74)"><path d="m0 0 2.02-0.839" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 118.08 111.87)"><path d="m0 0 8.044-3.354" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 120.91 113.05)"><path d="m0 0c-0.29 0.131-0.48 0.479-0.48 0.962 0 0.772 0.486 1.601 1.086 1.849 0.15 0.062 0.292 0.082 0.423 0.065" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 121.28 112.04)"><path d="m0 0c0.39-0.051 0.663-0.435 0.663-1.015 0-0.772-0.486-1.599-1.086-1.848-0.224-0.093-0.433-0.092-0.606-0.013" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g></g><g transform="matrix(.35278 0 0 -.35278 245.51 207.05)"><path d="m0 0-25.28 10.634c-2.368 0.984-2.249 2.619-1.266 4.987 0.984 2.369 2.463 4.573 4.83 3.589 0 0 25.366-10.67 25.391-10.68" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 237.89 199.63)"><path d="m0 0c-6.165 2.349-16.441 8.808-22.9 11.744-5.824 2.647-19.782 7.626-28.849 11.435" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 217.82 195.68)"><path d="m0 0c5.933-1.955 11.361-3.407 19.315-7.384 9.395-4.698 20.104-10.803 32.435-15.794" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 220.04 189.8)"><path d="m0 0-26.223 10.698" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 210.79 186.03)"><path d="m0 0c-1.622 0.501-3.603 0.415-5.162-0.231 0 0-9.071-2.749-8.483-11.9 0.147-2.274 1.168-7.554 4.978-8.659" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 219.62 196.27)"><path d="m0 0c-0.993-0.988-2.095-1.766-3.255-2.248-1.646-0.683-3.176-0.671-4.444-0.09" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 220.04 189.8)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c2.008-0.917 3.362-3.26 3.491-6.527" stroke-width=".7"/><path d="m0 0c-1.267 0.579-2.796 0.59-4.44-0.093-2.832-1.175-5.318-4.119-6.723-7.582-0.773-1.9-1.219-3.956-1.219-5.96 0-3.535 1.388-6.077 3.497-7.043" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 219.64 191.45)"><path d="m0 0c-0.733 0.335-1.619 0.342-2.572-0.054-1.641-0.68-3.08-2.386-3.895-4.392-0.447-1.1-0.705-2.291-0.705-3.452 0-2.048 0.803-3.52 2.026-4.08" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 207.73 193.36)"><path d="m0 0 26.006-10.587" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 237.33 203.64)"><path d="m0 0c-0.315-0.219-0.643-0.401-0.979-0.54-0.954-0.396-1.839-0.389-2.574-0.053" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 237.89 199.63)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c0.872-0.398 1.532-1.262 1.839-2.467" stroke-width=".7"/><path d="m0 0c-0.733 0.335-1.619 0.342-2.571-0.054-1.641-0.68-3.081-2.386-3.895-4.392-0.447-1.1-0.706-2.291-0.706-3.452 0-2.047 0.804-3.52 2.026-4.08" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 197.45 159.5)"><path d="m0 0c-1.831-3.076-4.343-5.546-7.113-6.694-2.105-0.871-4.06-0.856-5.68-0.115l-19.251 8.144c-2.698 1.233-4.472 4.475-4.472 8.984 0 2.558 0.571 5.181 1.557 7.603 1.797 4.417 4.975 8.174 8.595 9.672 2.101 0.871 4.055 0.857 5.673 0.119l19.253-8.145c2.699-1.231 4.474-4.474 4.474-8.985 0-1.577-0.217-3.179-0.614-4.743" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 196.94 152.59)"><path d="m0 0c-1.619 0.739-3.573 0.753-5.675-0.118-3.62-1.499-6.797-5.256-8.594-9.673-0.986-2.422-1.556-5.046-1.556-7.603 0-4.508 1.773-7.751 4.471-8.983" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 196.61 158.86)"><path d="m0 0c-1.119-1.812-2.624-3.26-4.277-3.946-1.299-0.537-2.506-0.528-3.506-0.071" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 196.33 154.53)"><path d="m0 0c1.666-0.76 2.762-2.762 2.762-5.546 0-0.153-3e-3 -0.306-0.01-0.46" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 195.92 158.55)"><path d="m0 0c-1.123-1.834-2.639-3.301-4.307-3.992-0.811-0.336-1.588-0.459-2.299-0.392" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 195.94 154.43)"><path d="m0 0c1.166-0.982 1.891-2.729 1.891-4.993 0-0.172-4e-3 -0.343-0.012-0.516" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 196.33 154.53)"><path d="m0 0c-0.999 0.456-2.205 0.464-3.502-0.073-2.234-0.926-4.195-3.244-5.304-5.97-0.608-1.496-0.961-3.114-0.961-4.692 0-2.784 1.095-4.785 2.759-5.545" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 185.4 156.68)"><path d="m0 0 7.594-3.23" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 188.07 156.81)"><path d="m0 0-7.594 3.23" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 188.07 157.82)"><path d="m0 0c0.611-0.253 1.105 0.18 1.105 0.966s-0.494 1.628-1.105 1.881" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 186.19 158.79)"><path d="m0 0 7.26-3.089" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 188.65 159.26)"><path d="m0 0-8.308 3.509" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 188.75 159.88)"><path d="m0 0c0.622-0.258 1.587 0.921-0.293 1.741" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 185.75 154.01)"><path d="m0 0 7.592-3.229" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 188.76 154.28)"><path d="m0 0-7.592 3.229" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 188.43 155.15)"><path d="m0 0c0.61-0.253 1.317 0.092 1.578 0.77s-0.022 1.433-0.633 1.686" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 186.97 151.73)"><path d="m0 0 7.521-3.201" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 190.3 152.13)"><path d="m0 0-7.52 3.201" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 189.63 152.86)"><path d="m0 0c0.605-0.251 1.525 0.01 2.055 0.583 0.529 0.573 0.466 1.241-0.14 1.492" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 186.19 158.79)"><path d="m0 0c0.62-0.713 1.347-1.264 2.157-1.634" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 185.4 156.72)"><path d="m0 0c0.13-1.387 0.442-2.626 0.905-3.693" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 185.75 154)"><path d="m0 0c-0.502-1.516-0.839-3.087-0.976-4.654" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 186.95 151.72)"><path d="m0 0c-0.939-1.209-1.767-2.57-2.446-4.02" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 188.96 150.1)"><path d="m0 0c-1.34-0.555-2.619-1.418-3.79-2.511" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 190.96 150.06)"><path d="m0 0c-0.874 0.399-1.845 0.586-2.885 0.538" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 189.93 149.86)"><path d="m0 0 7.623-3.255" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 191.65 151.25)"><path d="m0 0-7.622 3.255" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 192.62 151)"><path d="m0 0c0.612-0.254 0.489-0.615-0.274-0.805-0.763-0.191-1.879-0.138-2.492 0.116" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 167.47 148.69)"><path d="m0 0-2.608 1.078" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 168.77 143.38)"><path d="m0 0 2.623-1.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 167.23 143.72)"><path d="m0 0c-0.07 0.173-0.23 0.27-0.586-0.039-2.162-1.813-3.721-5.08-3.721-8.17 0-2.409 0.948-4.14 2.389-4.797" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 168.77 143.38)"><path d="m0 0c-0.439 0.242-0.931 0.379-1.46 0.397-0.606 0.07-0.725-0.911-0.725-0.911 0-0.377-0.119-0.767-0.311-1.094" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 167.23 143.72)"><path d="m0 0 3.648-1.522" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 168.24 143.38)"><path d="m0 0 2.846-1.187" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 170.92 150.68)"><path d="m0 0-3.512 1.397c-1.7 0.778-2.819 2.821-2.819 5.665 0 1.612 0.36 3.266 0.981 4.793 1.134 2.786 3.138 5.154 5.419 6.099 1.326 0.549 2.557 0.54 3.578 0.075l3.512-1.398" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 173.44 144.81)"><path d="m0 0c-1.021 0.466-2.253 0.475-3.578-0.074-2.282-0.946-4.285-3.314-5.418-6.099-0.622-1.528-0.981-3.181-0.981-4.793 0-2.844 1.118-4.888 2.818-5.665" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 168.54 149.35)"><path d="m0 0-1.551 0.617c-1.526 0.698-2.529 2.531-2.529 5.082 0 1.446 0.323 2.929 0.88 4.3 1.017 2.498 2.814 4.623 4.862 5.47 1.188 0.492 2.294 0.485 3.209 0.068l1.216-0.485" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 172.21 144.31)"><path d="m0 0c-0.286 0.226-0.597 0.417-0.93 0.568-1.227 0.561-2.633 0.542-4.067-0.051-2.243-0.929-4.278-3.194-5.444-6.058-0.627-1.542-0.959-3.168-0.959-4.705 0-2.89 1.18-5.155 3.155-6.058 0.294-0.134 0.599-0.236 0.911-0.303" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 176.36 152.91)"><path d="m0 0-15.438 6.331" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 178.58 153.04)"><path d="m0 0c-3.371 1.143-5.252-0.094-6.273 0.373" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 178.82 147.05)"><path d="m0 0c1.417-0.646 2.586-2.984 4.838-4.144" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 182.92 153.3)"><path d="m0 0c-0.644-0.734-1.388-1.31-2.179-1.637-0.92-0.381-1.775-0.375-2.483-0.052l-7.662 2.42" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 180.52 148.51)"><path d="m0 0 7.108-3.72c1.18-0.54 1.956-1.958 1.956-3.931 0-0.28-0.015-0.561-0.045-0.843" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 177.95 150.58)"><path d="m0 0 1.884-0.791" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 178.58 153.04)"><path d="m0 0c-1.304 0.604-2.161 2.193-2.161 4.403 0 0.805 0.115 1.624 0.323 2.422l0.068 0.163" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 178.33 149.74)"><path d="m0 0 1.859-0.781" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 180.52 148.51)"><path d="m0 0c-0.783 0.362-1.727 0.369-2.743-0.058-1.312-0.551-2.504-1.724-3.383-3.19l-0.096-0.226" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 178.63 150.83)"><path d="m0 0c-0.236-0.837-0.367-1.702-0.367-2.552 0-2.146 0.832-3.69 2.098-4.276" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 181.11 148.83)"><path d="m0 0c-0.76 0.352-1.677 0.358-2.664-0.056-1.274-0.535-2.432-1.675-3.287-3.098" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 179.3 151.16)"><path d="m0 0 0.013 0.03 1.912-0.802" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 179.91 153.46)"><path d="m0 0c-1.231 0.571-2.041 2.072-2.041 4.16 0 0.784 0.114 1.582 0.322 2.358" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 179.67 150.28)"><path d="m0 0 1.928-0.809" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 181.73 149.15)"><path d="m0 0c-0.739 0.342-1.631 0.348-2.591-0.055-1.24-0.52-2.366-1.629-3.197-3.013l-0.057-0.136" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 179.98 151.43)"><path d="m0 0c-0.204-0.758-0.316-1.539-0.316-2.307 0-2.034 0.788-3.497 1.988-4.052" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 182.35 149.47)"><path d="m0 0c-0.721 0.333-1.59 0.339-2.525-0.053-1.181-0.496-2.256-1.54-3.061-2.847" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 183.03 149.83)"><path d="m0 0c-0.709 0.324-1.564 0.33-2.485-0.052-1.585-0.656-2.976-2.301-3.762-4.235-0.432-1.061-0.682-2.21-0.682-3.329 0-1.974 0.776-3.394 1.957-3.933" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 181.57 153.21)"><path d="m0 0c-0.783 0.358-1.298 1.299-1.298 2.609 0 0.743 0.166 1.504 0.452 2.207 0.522 1.283 1.444 2.374 2.495 2.809 0.611 0.253 1.178 0.249 1.648 0.035" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 183.2 151.43)"><path d="m0 0c0 1.31-0.515 2.252-1.298 2.61" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 181.57 153.21)"><path d="m0 0c0.471-0.214 1.039-0.219 1.649 0.035 0.264 0.109 0.518 0.258 0.761 0.442" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 173.44 144.81)"><path d="m0 0 15.235-6.349" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 176.73 152.82)"><path d="m0 0c-1.606 0.734-2.662 2.664-2.662 5.349 0 1.522 0.34 3.083 0.927 4.526 1.07 2.629 2.962 4.865 5.116 5.757 1.251 0.519 2.414 0.511 3.378 0.072" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 181.78 150.78)"><path d="m0 0 10.411-4.405" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 181.18 152.44)"><path d="m0 0 10.175-4.305" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 183.24 164.79)"><path d="m0 0c-1.858-3.458-4.567-6.273-7.583-7.522-2.104-0.872-4.059-0.857-5.68-0.116l-19.251 8.144c-2.697 1.234-4.471 4.475-4.471 8.985 0 2.557 0.571 5.179 1.556 7.603 1.798 4.417 4.976 8.173 8.596 9.672 2.101 0.87 4.055 0.857 5.673 0.119l19.252-8.146c2.7-1.231 4.475-4.474 4.475-8.985 0-1.577-0.217-3.178-0.614-4.742" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 182.57 158.18)"><path d="m0 0c-1.619 0.739-3.573 0.752-5.675-0.118-3.619-1.499-6.796-5.256-8.593-9.673-0.986-2.423-1.557-5.046-1.557-7.603 0-4.508 1.773-7.751 4.47-8.983" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 182.24 164.44)"><path d="m0 0c-1.12-1.812-2.624-3.26-4.278-3.945-1.298-0.538-2.505-0.529-3.505-0.072" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 181.96 160.11)"><path d="m0 0c1.666-0.759 2.762-2.761 2.762-5.545 0-0.539-0.041-1.083-0.119-1.625" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 181.47 164.25)"><path d="m0 0c-1.097-1.675-2.527-3.005-4.091-3.652-0.812-0.337-1.588-0.459-2.3-0.392" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 181.57 160.01)"><path d="m0 0c1.167-0.982 1.892-2.729 1.892-4.993 0-0.244-9e-3 -0.49-0.025-0.736" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 181.96 160.11)"><path d="m0 0c-0.999 0.456-2.205 0.465-3.502-0.073-2.234-0.925-4.195-3.243-5.304-5.969-0.609-1.496-0.961-3.115-0.961-4.693 0-2.783 1.095-4.784 2.759-5.545" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 171.02 162.26)"><path d="m0 0 7.594-3.23" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 173.7 162.39)"><path d="m0 0-7.594 3.23" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 173.7 163.4)"><path d="m0 0c0.611-0.253 1.105 0.18 1.105 0.966s-0.494 1.628-1.105 1.881" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 171.82 164.37)"><path d="m0 0 7.261-3.089" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 174.28 164.85)"><path d="m0 0-8.308 3.509" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 174.38 165.46)"><path d="m0 0c0.622-0.257 1.587 0.922-0.293 1.741" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 171.38 159.59)"><path d="m0 0 7.593-3.23" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 174.39 159.86)"><path d="m0 0-7.593 3.229" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 174.06 160.73)"><path d="m0 0c0.61-0.252 1.317 0.092 1.578 0.771 0.261 0.678-0.022 1.433-0.633 1.685" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 172.6 157.32)"><path d="m0 0 7.521-3.201" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 175.93 157.71)"><path d="m0 0-7.521 3.201" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 175.25 158.45)"><path d="m0 0c0.606-0.251 1.526 0.01 2.055 0.583 0.528 0.573 0.466 1.241-0.139 1.492" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 171.82 164.37)"><path d="m0 0c0.621-0.713 1.347-1.264 2.157-1.634" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 171.03 162.3)"><path d="m0 0c0.13-1.387 0.442-2.626 0.905-3.693" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 171.37 159.58)"><path d="m0 0c-0.502-1.516-0.839-3.087-0.976-4.654" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 172.58 157.3)"><path d="m0 0c-0.94-1.209-1.767-2.569-2.446-4.02" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 174.59 155.68)"><path d="m0 0c-1.34-0.555-2.619-1.419-3.79-2.511" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 176.59 155.64)"><path d="m0 0c-0.874 0.399-1.845 0.586-2.884 0.538" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 175.56 155.44)"><path d="m0 0 7.623-3.255" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 177.27 156.83)"><path d="m0 0-7.623 3.255" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 178.25 156.58)"><path d="m0 0c0.612-0.254 0.49-0.615-0.274-0.805-0.763-0.191-1.879-0.138-2.491 0.116" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 153.1 154.27)"><path d="m0 0-2.608 1.078" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 154.39 148.96)"><path d="m0 0 2.623-1.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 152.86 149.3)"><path d="m0 0c-0.07 0.173-0.229 0.27-0.586-0.039-2.161-1.813-3.721-5.08-3.721-8.17 0-2.409 0.948-4.14 2.389-4.797" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 154.39 148.96)"><path d="m0 0c-0.44 0.242-0.932 0.379-1.46 0.397-0.606 0.07-0.725-0.911-0.725-0.911 0-0.377-0.119-0.767-0.311-1.094" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 152.86 149.3)"><path d="m0 0 3.648-1.522" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 153.86 148.96)"><path d="m0 0 2.846-1.187" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 156.54 156.26)"><path d="m0 0-3.512 1.397c-1.7 0.778-2.819 2.821-2.819 5.665 0 1.612 0.36 3.266 0.981 4.793 1.134 2.786 3.138 5.154 5.42 6.099 1.325 0.548 2.557 0.54 3.577 0.075l3.513-1.398" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 159.07 150.39)"><path d="m0 0c-1.021 0.466-2.253 0.475-3.578-0.074-2.282-0.946-4.285-3.314-5.418-6.099-0.622-1.528-0.982-3.181-0.982-4.794 0-2.843 1.118-4.887 2.818-5.664" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 154.17 154.93)"><path d="m0 0-1.551 0.617c-1.526 0.698-2.529 2.531-2.529 5.082 0 1.446 0.323 2.929 0.88 4.3 1.017 2.498 2.814 4.623 4.861 5.47 1.189 0.492 2.294 0.485 3.209 0.068l1.217-0.485" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 157.84 149.89)"><path d="m0 0c-0.286 0.226-0.597 0.417-0.93 0.568-1.227 0.561-2.633 0.542-4.067-0.051-2.243-0.929-4.278-3.194-5.444-6.058-0.627-1.542-0.959-3.169-0.959-4.705 0-2.89 1.18-5.155 3.156-6.058 0.293-0.134 0.598-0.236 0.91-0.303" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 161.99 158.49)"><path d="m0 0-15.438 6.331" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 164.2 158.62)"><path d="m0 0c-3.37 1.143-5.252-0.094-6.273 0.373" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 164.44 152.63)"><path d="m0 0c1.417-0.646 2.586-2.984 4.838-4.144" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 168.55 158.88)"><path d="m0 0c-0.644-0.734-1.387-1.309-2.179-1.637-0.92-0.381-1.775-0.375-2.483-0.052l-7.662 2.42" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 166.15 154.09)"><path d="m0 0 7.108-3.72c1.181-0.54 1.956-1.958 1.956-3.931 0-0.28-0.015-0.561-0.045-0.843" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 163.58 156.16)"><path d="m0 0 1.884-0.791" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 164.2 158.62)"><path d="m0 0c-1.303 0.604-2.16 2.193-2.16 4.403 0 0.805 0.114 1.624 0.322 2.422l0.068 0.163" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 163.96 155.32)"><path d="m0 0 1.859-0.781" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 166.15 154.09)"><path d="m0 0c-0.782 0.362-1.727 0.369-2.743-0.058-1.312-0.551-2.504-1.724-3.383-3.19l-0.095-0.226" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 164.25 156.41)"><path d="m0 0c-0.236-0.837-0.367-1.702-0.367-2.552 0-2.146 0.833-3.69 2.098-4.277" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 166.74 154.41)"><path d="m0 0c-0.76 0.352-1.677 0.358-2.664-0.056-1.274-0.535-2.432-1.675-3.287-3.098" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 164.93 156.74)"><path d="m0 0 0.013 0.03 1.913-0.802" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 165.53 159.04)"><path d="m0 0c-1.231 0.57-2.041 2.072-2.041 4.16 0 0.784 0.114 1.582 0.322 2.358" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 165.3 155.86)"><path d="m0 0 1.928-0.81" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 167.36 154.73)"><path d="m0 0c-0.739 0.342-1.632 0.348-2.591-0.055-1.24-0.521-2.366-1.629-3.198-3.013l-0.056-0.136" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 165.61 157.01)"><path d="m0 0c-0.205-0.759-0.317-1.539-0.317-2.307 0-2.034 0.789-3.497 1.989-4.052" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 167.98 155.06)"><path d="m0 0c-0.72 0.333-1.59 0.339-2.525-0.053-1.181-0.496-2.256-1.54-3.06-2.847" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 168.66 155.41)"><path d="m0 0c-0.709 0.323-1.565 0.33-2.485-0.052-1.585-0.656-2.976-2.301-3.763-4.235-0.431-1.061-0.682-2.21-0.682-3.329 0-1.974 0.777-3.394 1.957-3.933" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 167.2 158.8)"><path d="m0 0c-0.784 0.358-1.299 1.299-1.299 2.609 0 0.743 0.166 1.504 0.452 2.207 0.522 1.283 1.445 2.374 2.496 2.809 0.61 0.253 1.178 0.249 1.647 0.035" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 168.82 157.01)"><path d="m0 0c0 1.311-0.515 2.253-1.299 2.611" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 167.2 158.8)"><path d="m0 0c0.471-0.215 1.038-0.219 1.649 0.034 0.263 0.109 0.518 0.259 0.761 0.443" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 159.07 150.39)"><path d="m0 0 15.235-6.349" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 162.35 158.4)"><path d="m0 0c-1.606 0.734-2.662 2.664-2.662 5.349 0 1.522 0.34 3.083 0.927 4.526 1.07 2.629 2.962 4.865 5.116 5.757 1.251 0.519 2.415 0.511 3.378 0.072" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 167.41 156.36)"><path d="m0 0 10.41-4.405" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 166.81 158.02)"><path d="m0 0 10.175-4.305" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 169.98 170.34)"><path d="m0 0c-1.858-3.458-4.567-6.273-7.583-7.522-2.104-0.872-4.06-0.857-5.68-0.116l-19.251 8.144c-2.697 1.234-4.471 4.475-4.471 8.985 0 2.557 0.571 5.179 1.556 7.602 1.798 4.418 4.976 8.174 8.596 9.673 2.101 0.87 4.055 0.857 5.673 0.119l19.252-8.146c2.7-1.231 4.475-4.474 4.475-8.985 0-1.577-0.217-3.178-0.614-4.743" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 169.31 163.73)"><path d="m0 0c-1.619 0.739-3.573 0.752-5.675-0.118-3.619-1.499-6.796-5.256-8.593-9.673-0.986-2.423-1.557-5.046-1.557-7.603 0-4.509 1.773-7.751 4.47-8.983" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 168.97 169.99)"><path d="m0 0c-1.12-1.812-2.624-3.26-4.278-3.945-1.298-0.538-2.505-0.529-3.505-0.072" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 168.7 165.67)"><path d="m0 0c1.666-0.76 2.762-2.761 2.762-5.545 0-0.539-0.041-1.083-0.119-1.625" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 168.2 169.8)"><path d="m0 0c-1.097-1.675-2.527-3.005-4.091-3.653-0.812-0.336-1.588-0.458-2.3-0.391" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 168.3 165.57)"><path d="m0 0c1.167-0.982 1.892-2.729 1.892-4.993 0-0.583-0.048-1.172-0.14-1.757" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 168.7 165.67)"><path d="m0 0c-0.999 0.456-2.205 0.464-3.502-0.073-2.234-0.925-4.195-3.243-5.304-5.97-0.609-1.495-0.961-3.114-0.961-4.692 0-2.783 1.095-4.785 2.759-5.545" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 157.76 167.81)"><path d="m0 0 7.594-3.23" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 160.44 167.95)"><path d="m0 0-7.594 3.23" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 160.44 168.95)"><path d="m0 0c0.611-0.253 1.105 0.179 1.105 0.965 0 0.787-0.494 1.629-1.105 1.882" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 158.56 169.93)"><path d="m0 0 7.261-3.089" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 161.02 170.4)"><path d="m0 0-8.308 3.509" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 161.12 171.01)"><path d="m0 0c0.622-0.257 1.587 0.922-0.293 1.741" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 158.12 165.15)"><path d="m0 0 7.593-3.229" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 161.13 165.42)"><path d="m0 0-7.593 3.229" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 160.79 166.29)"><path d="m0 0c0.61-0.253 1.317 0.092 1.578 0.771 0.261 0.677-0.022 1.432-0.633 1.685" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 159.34 162.87)"><path d="m0 0 7.521-3.201" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 162.67 163.27)"><path d="m0 0-7.521 3.201" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 161.99 164)"><path d="m0 0c0.606-0.251 1.526 0.01 2.055 0.583 0.528 0.574 0.466 1.242-0.139 1.493" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 158.56 169.93)"><path d="m0 0c0.621-0.712 1.347-1.264 2.157-1.634" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 157.77 167.86)"><path d="m0 0c0.13-1.387 0.442-2.627 0.905-3.693" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 158.11 165.14)"><path d="m0 0c-0.502-1.516-0.839-3.087-0.976-4.654" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 159.32 162.86)"><path d="m0 0c-0.94-1.209-1.767-2.57-2.446-4.02" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 161.32 161.23)"><path d="m0 0c-1.339-0.555-2.618-1.419-3.789-2.511" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 163.33 161.19)"><path d="m0 0c-0.873 0.398-1.844 0.586-2.884 0.538" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 162.3 160.99)"><path d="m0 0 7.623-3.255" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 164.01 162.38)"><path d="m0 0-7.623 3.255" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 164.99 162.14)"><path d="m0 0c0.612-0.255 0.49-0.615-0.274-0.806-0.763-0.19-1.879-0.138-2.491 0.117" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 139.84 159.83)"><path d="m0 0-2.608 1.077" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 141.13 154.52)"><path d="m0 0 2.623-1.087" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 139.59 154.86)"><path d="m0 0c-0.07 0.173-0.23 0.27-0.586-0.039-2.161-1.813-3.721-5.08-3.721-8.17 0-2.409 0.948-4.14 2.389-4.797" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 141.13 154.52)"><path d="m0 0c-0.44 0.242-0.932 0.378-1.46 0.397-0.606 0.07-0.725-0.911-0.725-0.911 0-0.377-0.119-0.767-0.311-1.094" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 139.59 154.86)"><path d="m0 0 3.648-1.522" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 140.6 154.51)"><path d="m0 0 2.846-1.187" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 143.28 161.81)"><path d="m0 0-3.512 1.397c-1.7 0.777-2.819 2.821-2.819 5.665 0 1.612 0.36 3.266 0.981 4.793 1.134 2.785 3.138 5.154 5.42 6.099 1.325 0.548 2.557 0.54 3.577 0.075l3.513-1.398" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 145.81 155.95)"><path d="m0 0c-1.021 0.466-2.253 0.475-3.578-0.075-2.282-0.945-4.285-3.313-5.418-6.098-0.622-1.528-0.982-3.182-0.982-4.794 0-2.843 1.118-4.887 2.818-5.664" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 140.91 160.49)"><path d="m0 0-1.551 0.617c-1.525 0.697-2.529 2.531-2.529 5.081 0 1.447 0.323 2.93 0.88 4.301 1.017 2.498 2.815 4.622 4.862 5.47 1.189 0.492 2.294 0.485 3.209 0.067l1.216-0.484" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 144.57 155.45)"><path d="m0 0c-0.286 0.226-0.597 0.417-0.93 0.568-1.227 0.561-2.633 0.542-4.067-0.051-2.243-0.929-4.278-3.194-5.444-6.059-0.627-1.541-0.959-3.168-0.959-4.704 0-2.89 1.18-5.155 3.156-6.058 0.293-0.134 0.598-0.236 0.91-0.304" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 148.73 164.05)"><path d="m0 0-15.438 6.331" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 150.94 164.18)"><path d="m0 0c-3.37 1.143-5.252-0.094-6.273 0.373" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 151.18 158.19)"><path d="m0 0c1.417-0.646 2.586-2.984 4.838-4.144" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 155.29 164.44)"><path d="m0 0c-0.644-0.734-1.387-1.309-2.179-1.637-0.92-0.381-1.775-0.375-2.483-0.052l-7.662 2.42" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 152.89 159.65)"><path d="m0 0 7.108-3.72c1.181-0.54 1.956-1.958 1.956-3.931 0-0.28-0.015-0.561-0.045-0.843" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 150.32 161.71)"><path d="m0 0 1.884-0.791" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 150.94 164.18)"><path d="m0 0c-1.303 0.604-2.16 2.193-2.16 4.402 0 0.806 0.114 1.625 0.322 2.423l0.068 0.162" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 150.69 160.88)"><path d="m0 0 1.859-0.78" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 152.89 159.65)"><path d="m0 0c-0.782 0.362-1.727 0.369-2.743-0.058-1.312-0.551-2.504-1.724-3.383-3.19l-0.095-0.226" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 150.99 161.97)"><path d="m0 0c-0.236-0.837-0.367-1.703-0.367-2.552 0-2.147 0.833-3.69 2.098-4.277" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 153.48 159.97)"><path d="m0 0c-0.76 0.352-1.678 0.358-2.664-0.056-1.274-0.536-2.432-1.675-3.287-3.098" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 151.66 162.29)"><path d="m0 0 0.013 0.03 1.912-0.802" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 152.27 164.59)"><path d="m0 0c-1.231 0.57-2.041 2.072-2.041 4.16 0 0.784 0.114 1.582 0.322 2.357" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 152.04 161.41)"><path d="m0 0 1.928-0.809" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 154.1 160.28)"><path d="m0 0c-0.74 0.342-1.632 0.349-2.591-0.055-1.24-0.52-2.366-1.629-3.198-3.013l-0.056-0.136" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 152.34 162.57)"><path d="m0 0c-0.205-0.758-0.317-1.539-0.317-2.306 0-2.034 0.789-3.497 1.989-4.053" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 154.72 160.61)"><path d="m0 0c-0.72 0.333-1.59 0.34-2.525-0.053-1.181-0.496-2.256-1.54-3.061-2.847" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 155.4 160.96)"><path d="m0 0c-0.709 0.323-1.565 0.33-2.485-0.052-1.585-0.656-2.976-2.301-3.763-4.235-0.431-1.061-0.682-2.21-0.682-3.329 0-1.974 0.777-3.394 1.957-3.934" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 153.94 164.35)"><path d="m0 0c-0.783 0.358-1.298 1.299-1.298 2.609 0 0.742 0.166 1.504 0.452 2.207 0.522 1.283 1.445 2.374 2.495 2.809 0.611 0.253 1.178 0.249 1.648 0.035" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 155.56 162.57)"><path d="m0 0c0 1.311-0.515 2.252-1.299 2.611" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 153.94 164.35)"><path d="m0 0c0.471-0.215 1.039-0.219 1.649 0.034 0.264 0.109 0.518 0.259 0.761 0.443" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 145.81 155.95)"><path d="m0 0 15.235-6.35" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 149.09 163.95)"><path d="m0 0c-1.606 0.734-2.662 2.664-2.662 5.348 0 1.523 0.34 3.084 0.927 4.527 1.07 2.629 2.962 4.865 5.116 5.757 1.251 0.518 2.415 0.511 3.378 0.071" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 154.15 161.92)"><path d="m0 0 10.41-4.404" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 153.54 163.58)"><path d="m0 0 10.175-4.305" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 153.9 175.64)"><path d="m0 0c-1.858-3.458-4.567-6.273-7.583-7.522-2.104-0.872-4.059-0.857-5.679-0.116l-19.252 8.144c-2.697 1.234-4.471 4.475-4.471 8.985 0 2.557 0.571 5.179 1.557 7.603 1.798 4.417 4.975 8.173 8.595 9.672 2.101 0.87 4.055 0.857 5.673 0.119l19.252-8.146c2.7-1.231 4.475-4.474 4.475-8.985 0-1.577-0.216-3.178-0.614-4.742" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 153.23 169.03)"><path d="m0 0c-1.619 0.739-3.573 0.752-5.675-0.118-3.619-1.499-6.796-5.256-8.593-9.673-0.986-2.423-1.556-5.046-1.556-7.603 0-4.509 1.772-7.751 4.47-8.983" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 152.89 175.29)"><path d="m0 0c-1.119-1.812-2.624-3.26-4.278-3.945-1.298-0.538-2.505-0.529-3.505-0.072" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 152.62 170.96)"><path d="m0 0c1.666-0.759 2.762-2.761 2.762-5.545 0-0.539-0.041-1.083-0.12-1.625" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 152.12 175.1)"><path d="m0 0c-1.097-1.674-2.527-3.004-4.091-3.652-0.812-0.337-1.588-0.459-2.3-0.392" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 152.22 170.87)"><path d="m0 0c1.167-0.982 1.892-2.729 1.892-4.993 0-0.583-0.049-1.171-0.14-1.757" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 152.62 170.96)"><path d="m0 0c-1 0.456-2.206 0.465-3.503-0.073-2.234-0.925-4.194-3.243-5.303-5.969-0.609-1.496-0.961-3.115-0.961-4.693 0-2.783 1.094-4.784 2.759-5.545" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 141.68 173.11)"><path d="m0 0 7.594-3.23" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 144.36 173.25)"><path d="m0 0-7.594 3.23" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 144.36 174.25)"><path d="m0 0c0.61-0.253 1.105 0.179 1.105 0.966 0 0.786-0.495 1.628-1.105 1.881" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 142.48 175.22)"><path d="m0 0 7.26-3.089" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 144.94 175.7)"><path d="m0 0-8.308 3.509" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 145.04 176.31)"><path d="m0 0c0.622-0.257 1.587 0.922-0.293 1.741" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 142.04 170.44)"><path d="m0 0 7.593-3.229" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 145.05 170.72)"><path d="m0 0-7.593 3.229" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 144.71 171.58)"><path d="m0 0c0.61-0.252 1.317 0.092 1.578 0.771 0.261 0.678-0.022 1.433-0.633 1.685" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 143.26 168.17)"><path d="m0 0 7.52-3.201" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 146.59 168.57)"><path d="m0 0-7.52 3.201" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 145.91 169.3)"><path d="m0 0c0.606-0.251 1.526 0.01 2.055 0.583 0.529 0.574 0.466 1.242-0.139 1.493" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 142.48 175.22)"><path d="m0 0c0.62-0.712 1.347-1.264 2.157-1.634" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 141.69 173.16)"><path d="m0 0c0.13-1.387 0.442-2.626 0.905-3.693" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 142.03 170.44)"><path d="m0 0c-0.502-1.516-0.839-3.087-0.976-4.654" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 143.24 168.16)"><path d="m0 0c-0.939-1.209-1.767-2.569-2.446-4.02" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 145.24 166.53)"><path d="m0 0c-1.34-0.555-2.619-1.419-3.79-2.511" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 147.25 166.49)"><path d="m0 0c-0.874 0.399-1.845 0.586-2.884 0.538" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 146.22 166.29)"><path d="m0 0 7.623-3.255" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 147.93 167.68)"><path d="m0 0-7.623 3.255" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 148.91 167.44)"><path d="m0 0c0.612-0.254 0.49-0.615-0.273-0.805-0.764-0.191-1.879-0.138-2.492 0.116" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 123.76 165.12)"><path d="m0 0-2.608 1.078" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 125.05 159.81)"><path d="m0 0 2.623-1.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 123.51 160.15)"><path d="m0 0c-0.07 0.173-0.229 0.27-0.586-0.039-2.161-1.813-3.721-5.08-3.721-8.17 0-2.409 0.948-4.14 2.389-4.797" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 125.05 159.81)"><path d="m0 0c-0.439 0.242-0.931 0.379-1.46 0.397-0.606 0.07-0.725-0.911-0.725-0.911 0-0.377-0.119-0.767-0.311-1.094" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 123.51 160.15)"><path d="m0 0 3.648-1.522" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 124.52 159.81)"><path d="m0 0 2.846-1.187" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 127.2 167.11)"><path d="m0 0-3.512 1.397c-1.7 0.778-2.819 2.821-2.819 5.665 0 1.612 0.36 3.266 0.981 4.793 1.134 2.786 3.137 5.154 5.419 6.099 1.326 0.549 2.557 0.54 3.577 0.075l3.513-1.398" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 129.73 161.25)"><path d="m0 0c-1.021 0.466-2.253 0.475-3.578-0.074-2.282-0.946-4.285-3.314-5.418-6.099-0.622-1.528-0.982-3.181-0.982-4.793 0-2.844 1.118-4.888 2.819-5.665" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 124.83 165.78)"><path d="m0 0-1.551 0.617c-1.526 0.698-2.529 2.531-2.529 5.082 0 1.446 0.323 2.929 0.88 4.3 1.017 2.498 2.814 4.623 4.862 5.47 1.188 0.492 2.294 0.485 3.208 0.068l1.217-0.485" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 128.49 160.74)"><path d="m0 0c-0.286 0.226-0.597 0.417-0.93 0.568-1.227 0.561-2.633 0.542-4.067-0.051-2.243-0.929-4.278-3.194-5.443-6.058-0.628-1.542-0.96-3.168-0.96-4.705 0-2.89 1.18-5.155 3.156-6.058 0.294-0.134 0.598-0.236 0.91-0.303" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 132.65 169.35)"><path d="m0 0-15.438 6.331" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 134.86 169.48)"><path d="m0 0c-3.37 1.143-5.252-0.094-6.273 0.373" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 135.1 163.49)"><path d="m0 0c1.418-0.646 2.586-2.984 4.839-4.144" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 139.21 169.74)"><path d="m0 0c-0.644-0.734-1.387-1.31-2.179-1.637-0.92-0.381-1.775-0.375-2.483-0.052l-7.662 2.42" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 136.81 164.95)"><path d="m0 0 7.108-3.72c1.18-0.54 1.956-1.958 1.956-3.931 0-0.28-0.015-0.561-0.045-0.843" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 134.24 167.01)"><path d="m0 0 1.884-0.791" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 134.86 169.48)"><path d="m0 0c-1.303 0.604-2.16 2.193-2.16 4.403 0 0.805 0.114 1.624 0.322 2.422l0.068 0.163" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 134.61 166.17)"><path d="m0 0 1.859-0.781" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 136.81 164.95)"><path d="m0 0c-0.783 0.362-1.727 0.369-2.743-0.058-1.312-0.551-2.504-1.724-3.384-3.19l-0.095-0.226" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 134.91 167.26)"><path d="m0 0c-0.236-0.837-0.367-1.702-0.367-2.552 0-2.146 0.833-3.69 2.099-4.276" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 137.4 165.27)"><path d="m0 0c-0.76 0.352-1.677 0.358-2.664-0.056-1.274-0.535-2.432-1.675-3.287-3.098" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 135.59 167.59)"><path d="m0 0 0.013 0.03 1.912-0.802" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 136.19 169.89)"><path d="m0 0c-1.231 0.571-2.041 2.072-2.041 4.16 0 0.784 0.114 1.582 0.323 2.358" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 135.96 166.71)"><path d="m0 0 1.928-0.81" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 138.02 165.58)"><path d="m0 0c-0.739 0.342-1.632 0.348-2.591-0.055-1.24-0.52-2.366-1.629-3.197-3.013l-0.057-0.136" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 136.27 167.86)"><path d="m0 0c-0.204-0.759-0.317-1.539-0.317-2.307 0-2.034 0.789-3.497 1.989-4.052" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 138.64 165.91)"><path d="m0 0c-0.72 0.333-1.59 0.339-2.525-0.053-1.181-0.496-2.256-1.54-3.06-2.847" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 139.32 166.26)"><path d="m0 0c-0.709 0.324-1.564 0.33-2.485-0.052-1.585-0.656-2.976-2.301-3.762-4.235-0.432-1.061-0.682-2.21-0.682-3.329 0-1.974 0.776-3.394 1.957-3.933" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 137.86 169.65)"><path d="m0 0c-0.783 0.358-1.298 1.299-1.298 2.609 0 0.743 0.166 1.504 0.451 2.207 0.522 1.283 1.445 2.374 2.496 2.809 0.61 0.253 1.178 0.249 1.648 0.035" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 139.48 167.87)"><path d="m0 0c0 1.31-0.515 2.252-1.299 2.61" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 137.86 169.65)"><path d="m0 0c0.471-0.215 1.038-0.219 1.649 0.035 0.263 0.108 0.518 0.258 0.761 0.442" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 129.73 161.25)"><path d="m0 0 15.235-6.349" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 133.01 169.25)"><path d="m0 0c-1.605 0.734-2.662 2.664-2.662 5.349 0 1.522 0.34 3.083 0.927 4.526 1.07 2.629 2.962 4.865 5.116 5.757 1.252 0.519 2.415 0.511 3.378 0.072" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 138.07 167.21)"><path d="m0 0 10.411-4.405" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 137.46 168.87)"><path d="m0 0 10.175-4.305" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 206.66 192.6)"><path d="m0 0c-9.844 3.888-45.846 16.194-80.718 28.113-35.01 11.968-72.546 20.274-82.07 24.016" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 149.87 172.52)"><path d="m0 0c9.323-3.67 48.38-12.498 81.921-23.962 31.328-10.709 63.565-21.728 77.112-26.744" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 165.98 166.98)"><path d="m0 0c29.552-9.343 66.484-30.373 90.93-45.872 9.409-5.964 17.475-11.077 23.292-14.426" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 205.85 190.08)"><path d="m0 0c-6.081 3.417-14.685 8.871-24.825 15.3-24.267 15.384-60.488 36.052-89.617 45.277" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 179.47 161.38)"><path d="m0 0c23.664-5.524 32.427-25.583 41.927-40.219 8.53-13.14 21.017-22.574 37.634-31.339" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 206.27 187.99)"><path d="m0 0c-17.021 9.378-30.021 19.602-38.352 32.438-9.612 14.811-16.766 33.225-39.504 38.181" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 207.52 186.64)"><path d="m0 0c-16.422 10.293-20.93 23.984-21.029 40.185-0.107 17.424 2.153 39.169-19.363 42.851" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 194.05 155.65)"><path d="m0 0c23.354-4.932 22.182-30.486 22.286-47.612 0.103-16.735 4.605-29.526 22.665-38.077" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g></g></g></g></g>';
  sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '</g>';
  return sDis;
}

render_connettoreWATERPROOF(dim_target, etk, obj) {
  let dimensioni = {
      w: 61.019,
      h: 44.36
  };
  //width="61.019mm" height="44.37mm"
  let info = this.setupCurrentScale(dimensioni, dim_target);
  let sDis = '';
  sDis += '<g>';
  //sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '<g transform="translate(' + info.pos.x + ' ' + info.pos.y + ')" ><g transform="scale(' + info.scale + ')" ><g transform="translate(-36.963 -53.904)"><g transform="translate(-1.0981 -1.4611)"><g transform="matrix(.35278 0 0 -.35278 87.397 75.924)"><path d="m0 0 1.694 0.704c2.785 1.273 4.616 4.619 4.616 9.275 0 2.639-0.589 5.346-1.608 7.848-1.853 4.56-5.135 8.437-8.871 9.984-1.892 0.784-3.667 0.873-5.197 0.379" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 82.382 78.518)"><path d="m0 0 11.382 4.725c2.618 1.198 2.084 1.456 4.61 6.737 0.363 0.76 0.546 0.767 0.546 1.884 0 3.116-5.105 17.544-6.838 19.42-0.656 0.71-0.287 0.522-1.117 1.157-1.036 0.792-9.056 3.825-11.03 2.929l-10.161-4.224" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 85.41 66.55)"><path d="m0 0s-8.345-3.541-10.191-4.158c-0.738-0.244-2.536-0.158-4.681 0.076" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 85.804 66.959)"><path d="m0 0s-9.342-3.955-11.188-4.571" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 88.024 74.474)"><path d="m0 0s-10.153-4.286-11.438-4.657c-0.161-0.047-0.342-0.133-0.541-0.256" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 88.216 73.809)"><path d="m0 0s-10.153-4.286-11.438-4.657" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 81.658 69.03)"><path d="m0 0c0.109 0.572 0.306 1.004 0.565 1.302" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 84.181 75.452)"><path d="m0 0c-0.241 0.292-0.569 0.757-0.952 1.351" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 85.919 67.509)"><path d="m0 0s-9.341-3.955-11.188-4.571" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 84.698 66.344)"><path d="m0 0s-9.342-3.955-11.188-4.571" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 83.405 66.017)"><path d="m0 0s-9.342-3.955-11.188-4.571" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 82.509 65.69)"><path d="m0 0s-7.416-3.139-10.757-4.441" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 87.966 73.079)"><path d="m0 0s-9.342-3.955-11.188-4.571" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 87.454 75.311)"><path d="m0 0s-9.342-3.955-11.188-4.571" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 86.791 76.321)"><path d="m0 0s-6.713-2.842-10.353-4.286" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 86.431 68.276)"><path d="m0 0s-10.074-4.265-12.065-4.93" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 87.909 72.199)"><path d="m0 0s-10.074-4.264-12.065-4.929" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 86.687 68.958)"><path d="m0 0s-10.523-4.455-12.604-5.149" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 87.71 71.403)"><path d="m0 0s-10.523-4.455-12.604-5.149" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 86.971 69.754)"><path d="m0 0s-7.98-3.378-11.751-4.855" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 87.369 70.607)"><path d="m0 0s-8.137-3.444-11.86-4.897" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 82.586 78.239)"><path d="m0 0c0.692 0.834 1.083 2.178 2.648 5.45 0.365 0.759 0.546 0.766 0.546 1.883 0 3.117-5.105 17.544-6.837 19.42-0.656 0.711-0.288 0.522-1.118 1.158-0.427 0.327-2.049 1.037-3.941 1.694" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 80.907 68.393)"><path d="m0 0s-0.531-0.258-1.501-0.628" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 81.301 68.802)"><path d="m0 0s-0.513-0.231-1.256-0.539" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 83.521 76.317)"><path d="m0 0s-0.443-0.195-1.06-0.453" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 83.713 75.652)"><path d="m0 0s-0.648-0.285-1.467-0.623" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 73.726 81.983)"><path d="m0 0c0.264-0.126 0.529-0.246 0.797-0.356 3.193-1.327 6.159-1.302 8.62-0.174l10.481 4.348c3.264 1.494 2.597 1.815 5.747 8.396 0.453 0.948 0.679 0.956 0.679 2.348 0 3.883-6.362 21.863-8.52 24.201-0.818 0.885-0.358 0.651-1.394 1.442-1.29 0.987-11.284 4.766-13.745 3.65l-10.481-4.356c-2.754-1.255-4.875-3.892-5.97-7.565" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 79.515 67.799)"><path d="m0 0s-4.126-1.806-6.428-2.575c-2.297-0.76-12.85 1.054-17.799 1.868" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 80.006 68.308)"><path d="m0 0s-5.369-2.321-7.67-3.09" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 82.772 77.674)"><path d="m0 0s-6.381-2.734-7.981-3.197c-1.601-0.466-4.87-4.066-8.247-9.548" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 83.012 76.846)"><path d="m0 0s-6.381-2.734-7.981-3.197" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 80.196 77.973)"><path d="m0 0c-1.295 1.572-4.619 7.165-6.746 12.262-2.785 6.674-2.712 10.616-1.463 12.046" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 70.34 68.518)"><path d="m0 0c2.404 1.099 5.307 1.12 8.429-0.174 5.377-2.227 10.092-7.81 12.763-14.368 1.466-3.599 2.316-7.497 2.316-11.294 0-6.7-2.636-11.512-6.64-13.34" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 59.941 87.665)"><path d="m0 0c0.212-0.099 0.424-0.193 0.638-0.281 3.194-1.326 6.159-1.302 8.621-0.174l10.481 4.349c3.263 1.493 2.597 1.814 5.746 8.396 0.453 0.946 0.68 0.955 0.68 2.347 0 3.884-6.362 21.863-8.52 24.2-0.819 0.887-0.359 0.652-1.394 1.443-1.291 0.988-11.284 4.766-13.745 3.65l-10.483-4.356c-2.5-1.139-4.478-3.418-5.64-6.576" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 65.674 73.455)"><path d="m0 0s-4.127-1.806-6.428-2.575c-2.297-0.76-12.85 1.054-17.8 1.869" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 66.166 73.964)"><path d="m0 0s-5.37-2.321-7.671-3.089" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 68.932 83.329)"><path d="m0 0s-6.382-2.734-7.981-3.197c-1.602-0.466-4.87-4.066-8.247-9.548" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 69.172 82.501)"><path d="m0 0s-6.381-2.734-7.981-3.197" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 66.356 83.629)"><path d="m0 0c-1.295 1.572-4.62 7.166-6.746 12.262-2.785 6.675-2.712 10.616-1.464 12.046" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 56.5 74.173)"><path d="m0 0c2.404 1.099 5.306 1.12 8.429-0.174 5.377-2.226 10.092-7.81 12.763-14.368 1.465-3.599 2.316-7.497 2.316-11.294 0-6.701-2.636-11.512-6.641-13.34" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 68.547 84.072)"><path d="m0 0 18.315 7.612c3.249 1.485 5.384 5.388 5.384 10.819 0 3.08-0.686 6.238-1.875 9.156-2.163 5.319-5.99 9.843-10.349 11.648-2.531 1.048-4.884 1.032-6.832 0.143l-17.372-7.22" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 53.266 89.469)"><path d="m0 0c2.238-0.737 4.313-0.633 6.067 0.171l13.412 5.568c2.613 1.195 2.08 1.453 4.6 6.721 0.363 0.758 0.544 0.765 0.544 1.879 0 3.109-5.093 17.502-6.82 19.373-0.656 0.71-0.287 0.522-1.116 1.156-1.033 0.79-9.034 3.815-11.003 2.922l-13.413-5.575c-1.895-0.863-3.417-2.545-4.363-4.869" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 59.153 77.168)"><path d="m0 0s-8.325-3.533-10.167-4.147c-1.839-0.61-10.287 0.843-14.249 1.495" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 59.547 77.576)"><path d="m0 0s-9.319-3.945-11.161-4.56" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 61.761 85.073)"><path d="m0 0s-10.13-4.276-11.41-4.646c-1.281-0.373-3.898-3.255-6.602-7.644" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 61.953 84.41)"><path d="m0 0s-10.129-4.275-11.41-4.646" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 57.927 86.049)"><path d="m0 0c-1.036 1.258-3.697 5.736-5.4 9.816-2.23 5.343-2.171 8.498-1.171 9.642" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 59.662 78.125)"><path d="m0 0s-9.319-3.945-11.161-4.56" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 58.442 76.962)"><path d="m0 0s-9.319-3.945-11.161-4.56" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 57.153 76.636)"><path d="m0 0s-9.32-3.945-11.162-4.56" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 56.259 76.31)"><path d="m0 0s-10.011-4.238-11.989-4.898" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 61.703 83.682)"><path d="m0 0s-9.319-3.944-11.161-4.56" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 61.193 85.908)"><path d="m0 0s-9.319-3.945-11.161-4.56" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 60.531 86.916)"><path d="m0 0s-10.234-4.333-12.258-5.008" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 60.172 78.89)"><path d="m0 0s-10.05-4.254-12.036-4.918" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 61.646 82.803)"><path d="m0 0s-10.051-4.254-12.037-4.918" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 60.427 79.571)"><path d="m0 0s-10.498-4.444-12.573-5.137" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 61.448 82.009)"><path d="m0 0s-10.498-4.444-12.573-5.137" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 60.711 80.365)"><path d="m0 0s-11.084-4.691-13.274-5.423" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 61.108 81.215)"><path d="m0 0s-11.084-4.692-13.274-5.423" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 60.138 87.442)"><path d="m0 0 6.138 2.545c2.612 1.196 2.079 1.453 4.599 6.722 0.363 0.757 0.544 0.764 0.544 1.879 0 3.108-5.094 17.502-6.82 19.373-0.655 0.709-0.287 0.521-1.115 1.155-1.034 0.79-9.034 3.815-11.004 2.922l-6.138-2.551" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 61.318 76.268)"><path d="m0 0s-1.051-0.509-2.893-1.125c-0.861-0.285-3.169-0.118-5.789 0.207" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 61.712 76.676)"><path d="m0 0s-2.046-0.922-3.888-1.537" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 63.926 84.173)"><path d="m0 0s-2.855-1.252-4.136-1.623c-0.41-0.119-0.956-0.494-1.597-1.093" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 64.118 83.51)"><path d="m0 0s-2.854-1.252-4.136-1.623" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 60.12 78.364)"><path d="m0 0c-0.139 1.6 0.126 2.675 0.625 3.247" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 62.659 84.083)"><path d="m0 0c-0.611 0.743-1.789 2.606-3.001 4.847" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 50.143 79.167)"><path d="m0 0c1.727 0.787 3.794 0.799 6.044-0.131 3.849-1.596 7.243-5.596 9.135-10.284 1.039-2.595 1.662-5.379 1.662-8.093 0-4.812-1.892-8.259-4.764-9.563" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 53.773 83.44)"><path d="m0 0c0.827-2.066 1.322-4.281 1.322-6.442 0-3.829-1.505-6.573-3.791-7.611" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 49.511 80.516)"><path d="m0 0c1.374 0.626 3.02 0.636 4.811-0.104" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 47.533 82.673)"><path d="m0 0c0.498 4.819 3.315 8.609 7.398 9.937" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 54.403 89.07)"><path d="m0 0c-3.472-1.602-7.312-1.107-10.668 0.862" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 49.565 82.63)"><path d="m0 0c0.767 0.35 1.692 0.356 2.688-0.056 1.714-0.71 3.218-2.489 4.07-4.581 0.467-1.148 0.737-2.39 0.737-3.601 0-2.136-0.84-3.671-2.117-4.255" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 51.465 87.029)"><path d="m0 0c-0.767-0.35-1.692-0.357-2.688 0.056-1.714 0.71-3.219 2.489-4.07 4.581-0.468 1.148-0.737 2.39-0.737 3.601 0 2.136 0.84 3.671 2.117 4.255" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 52.781 88.942)"><path d="m0 0c-1.526-0.696-3.369-0.709-5.352 0.112-3.412 1.413-6.407 4.955-8.102 9.12-0.93 2.285-1.467 4.758-1.467 7.169 0 4.251 1.671 7.309 4.214 8.471" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g></g><rect x="37.095" y="54.036" width="60.754" height="44.105" fill="none" stroke="#000" stroke-width=".26458"/></g></g></g>';
  sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '</g>';
  return sDis;
}

render_cavo230Vac(dim_target, etk, obj) {
  let dimensioni = {
      w: 155.17,
      h: 72.552
  };
  //width="155.17mm" height="72.552mm"
  let info = this.setupCurrentScale(dimensioni, dim_target);
  let sDis = '';
  sDis += '<g>';
  //sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '<g transform="translate(' + info.pos.x + ' ' + info.pos.y + ')" ><g transform="scale(' + info.scale + ')" ><g transform="translate(-22.587 -93.635)"><g transform="translate(-.61961 -2.2719)"><g transform="matrix(.35278 0 0 -.35278 105.04 113.11)"><path d="m0 0c36.222 12.741 75.479 8.202 95.656 4.363 22.919-4.362 52.026-14.2 61.773-25.494 1.293-1.498 2.678-3.58 1.935-4.99-0.843-1.601-11.043-15.324-108.14-4.493" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 122.74 127.23)"><path d="m0 0c25.131-2.804 46.336-4.203 63.55-4.204 31.105-1e-3 49.2 4.569 54.002 13.683 1.457 2.767 2.987 8.467-3.143 15.568-9.925 11.499-36.286 22.726-67.158 28.602-21.11 4.017-62.245 8.745-100.56-4.732" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 87.314 125.35)"><path d="m0 0c-10.5-18.269-24.489-38.433-70.083-56.445-28.233-11.154-51.702-11.606-62.781-1.209-5.333 5.007-6.982 12.237-4.522 19.84 3.973 12.277 19.035 26.787 49.394 30.69" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 104.01 109.94)"><path d="m0 0c-18.043-5.413-27.889-13.865-35.103-23.604" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 94.538 119.94)"><path d="m0 0c6.286 8.191 14.56 14.782 29.56 19.282" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 55.847 124.56)"><path d="m0 0c-34.738-4.467-52.313-22.121-57.178-37.153-3.578-11.059-0.944-22.139 7.045-29.638 4.084-3.832 13.375-10.054 30.581-10.055 10.741 0 24.565 2.424 42.139 9.367 48.3 19.081 63.811 41.444 74.657 60.272" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 84.871 122.42)"><path d="m0 0c-25.987-0.697-54.106-2.529-82.255-6.047" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 123.17 123.92)"><path d="m0 0c-13.696 2.004-36.548 3.815-64.583 4.393" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 98.134 125.66)"><path d="m0 0c30.358-0.413 55.15-2.303 69.585-4.416" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 56.058 127.88)"><path d="m0 0c0.195 0 0.393 0.012 0.593 0.037 29.244 3.656 58.429 5.474 85.156 6.085" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 162.37 126.45)"><path d="m0 0c1.293-1.498 2.679-3.581 1.937-4.99-0.844-1.602-11.043-15.324-108.15-4.493" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 137.44 116.92)"><path d="m0 0c3.259-0.488 6.238-1.004 8.89-1.508 16.734-3.185 36.768-9.29 50.155-16.749" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 106.83 119)"><path d="m0 0c15.562 5.474 31.684 7.758 46.612 8.279" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 160.45 120.79)"><path d="m0 0c-13.104 7.723-32.701 14.566-54.56 18.727-21.111 4.017-62.245 8.745-100.56-4.732" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 124.53 133.11)"><path d="m0 0c25.132-2.804 46.336-4.203 63.55-4.204 31.105-1e-3 49.2 4.569 54.002 13.683 1.458 2.766 2.987 8.467-3.143 15.568" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 40.638 144.57)"><path d="m0 0c3.973 12.277 19.035 26.788 49.394 30.69" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 90.505 128.76)"><path d="m0 0c-0.505-0.888-1.009-1.78-1.514-2.674-10.928-19.369-23.314-41.324-72.538-60.77-28.232-11.154-51.702-11.606-62.78-1.209-0.659 0.619-1.262 1.271-1.808 1.954" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 105.8 115.83)"><path d="m0 0c-12.716-3.815-21.36-9.139-27.882-15.36" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 97.704 124.21)"><path d="m0 0c5.834 6.095 13.558 11.086 25.659 14.717" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 36.956 147.87)"><path d="m0 0c0.6-6.605 3.501-12.69 8.495-17.377 4.083-3.833 13.374-10.055 30.58-10.056 10.741 0 24.565 2.423 42.139 9.366 50.201 19.833 64.982 43.212 75.919 62.48" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 57.638 130.44)"><path d="m0 0c-28.71-3.691-45.696-16.391-53.474-29.173" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 84.529 128.37)"><path d="m0 0c-24.277-0.808-50.231-2.619-76.21-5.866" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 124.96 129.8)"><path d="m0 0c-14.963 2.189-40.851 4.147-72.485 4.52" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 99.636 131.54)"><path d="m0 0c30.73-0.389 55.838-2.294 70.403-4.426" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 57.849 133.76)"><path d="m0 0c0.194 0 0.393 0.012 0.592 0.037 22.954 2.869 45.873 4.607 67.595 5.517" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 127.23 114.71)"><path d="m0 0c-20.329-8.601-36.324-11.412-53.258-14.388-5.814-1.022-11.696-2.056-17.816-3.344" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 111.39 122.65)"><path d="m0 0c14.672 2.66 30.117 5.982 48.599 13.801" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 127.23 114.71)"><path d="m0 0c0.532 0.243 1.175 0.248 1.866-0.039 1.191-0.493 2.236-1.729 2.826-3.181 0.325-0.797 0.513-1.66 0.513-2.501 0-1.483-0.584-2.55-1.471-2.955" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 135.33 119.15)"><path d="m0 0c-1.06 0.441-1.989 1.354-3.064 2.412-2.632 2.588-6.162 6.06-14.544 4.83" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 128.91 117.52)"><path d="m0 0c7.858 1.456 10.793-1.428 13.393-3.985 1.208-1.188 2.348-2.31 3.854-2.935" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 136.19 117.97)"><path d="m0 0c-0.759 0.314-1.669 1.034-2.724 1.866-3.42 2.702-8.513 6.727-18.114 5.02" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 129.09 116.39)"><path d="m0 0c8.312 1.38 12.639-2.04 15.847-4.573 1.199-0.948 2.234-1.765 3.311-2.212" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 136.66 116.23)"><path d="m0 0c-0.455 0.187-1.134 0.544-1.92 0.958-4.312 2.269-13.217 6.952-22.991 3.453" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 128.67 115.34)"><path d="m0 0c8.178 2.236 15.512-1.62 19.579-3.76 0.877-0.461 1.569-0.825 2.132-1.056" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 136.66 116.23)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c0.233-0.106 0.387-0.388 0.387-0.778 0-0.228-0.052-0.462-0.142-0.676-0.156-0.376-0.429-0.693-0.737-0.821-0.183-0.076-0.352-0.074-0.492-0.01" stroke-width=".7"/><path d="m0 0c-0.141 0.064-0.31 0.065-0.492-0.01-0.314-0.13-0.589-0.455-0.744-0.838-0.086-0.21-0.136-0.437-0.136-0.659 0-0.39 0.154-0.671 0.388-0.778" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 136.19 117.97)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c0.233-0.106 0.388-0.388 0.388-0.778 0-0.228-0.053-0.462-0.143-0.677-0.156-0.375-0.429-0.692-0.737-0.82-0.182-0.076-0.352-0.075-0.492-0.01" stroke-width=".7"/><path d="m0 0c-0.141 0.064-0.31 0.065-0.492-0.01-0.314-0.13-0.589-0.455-0.744-0.838-0.086-0.21-0.135-0.437-0.135-0.659 0-0.39 0.153-0.671 0.387-0.778" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 135.33 119.15)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c0.234-0.106 0.388-0.387 0.388-0.778 0-0.228-0.052-0.461-0.142-0.676-0.157-0.376-0.429-0.693-0.737-0.821-0.183-0.076-0.353-0.074-0.492-0.01" stroke-width=".7"/><path d="m0 0c-0.141 0.064-0.31 0.065-0.491-0.01-0.315-0.13-0.589-0.455-0.745-0.838-0.085-0.21-0.135-0.437-0.135-0.659 0-0.39 0.153-0.671 0.388-0.778" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 61.171 134.18)"><path d="m0 0c22.06-0.778 38.005 2.305 54.886 5.57 2.049 0.396 4.106 0.794 6.183 1.186" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 78.807 135.94)"><path d="m0 0c-14.654-2.753-30.268-5.163-50.323-4.455" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 61.171 134.18)"><path d="m0 0c-0.584 0.037-1.187-0.188-1.729-0.703-0.937-0.885-1.472-2.412-1.505-3.98-0.019-0.86 0.114-1.733 0.414-2.519 0.53-1.385 1.455-2.173 2.428-2.236" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 55.189 141.22)"><path d="m0 0c0.834 0.79 1.375 1.975 2.002 3.347 1.535 3.357 3.593 7.86 11.861 9.703" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 60.604 137.4)"><path d="m0 0c-7.859-1.445-9.571-5.187-11.088-8.503-0.704-1.541-1.369-2.996-2.553-4.118" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 53.969 140.42)"><path d="m0 0c0.596 0.564 1.189 1.561 1.877 2.715 2.23 3.745 5.552 9.323 15.13 11.155" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 60.03 136.41)"><path d="m0 0c-8.257-1.678-11.078-6.416-13.17-9.928-0.782-1.313-1.458-2.447-2.304-3.248" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 52.907 138.97)"><path d="m0 0c0.357 0.337 0.864 0.913 1.45 1.58 3.219 3.658 9.865 11.212 20.244 11.432" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 60.056 135.29)"><path d="m0 0c-8.438-0.83-13.912-7.05-16.948-10.501-0.655-0.744-1.171-1.331-1.614-1.748" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 52.907 138.97)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c-0.181-0.183-0.225-0.5-0.085-0.865 0.082-0.213 0.214-0.412 0.374-0.581 0.28-0.295 0.648-0.494 0.982-0.503 0.198-6e-3 0.355 0.056 0.463 0.166" stroke-width=".7"/><path d="m0 0c0.107 0.11 0.266 0.172 0.463 0.166 0.339-9e-3 0.712-0.215 0.994-0.517 0.154-0.166 0.282-0.36 0.361-0.567 0.14-0.365 0.096-0.682-0.084-0.865" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 53.969 140.42)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c-0.181-0.183-0.225-0.5-0.085-0.865 0.081-0.213 0.214-0.413 0.374-0.581 0.28-0.295 0.648-0.494 0.982-0.504 0.197-6e-3 0.355 0.056 0.463 0.166" stroke-width=".7"/><path d="m0 0c0.107 0.11 0.266 0.171 0.462 0.166 0.34-9e-3 0.713-0.215 0.995-0.517 0.154-0.166 0.282-0.36 0.36-0.567 0.14-0.365 0.097-0.682-0.083-0.866" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 55.189 141.22)" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0c-0.18-0.183-0.224-0.5-0.084-0.866 0.081-0.212 0.214-0.412 0.374-0.58 0.28-0.295 0.647-0.494 0.981-0.504 0.198-6e-3 0.356 0.056 0.464 0.166" stroke-width=".7"/><path d="m0 0c0.108 0.11 0.267 0.171 0.464 0.166 0.339-0.01 0.712-0.215 0.994-0.517 0.154-0.166 0.282-0.36 0.361-0.567 0.139-0.365 0.096-0.683-0.084-0.866" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 84.435 122.2)"><path d="m0 0c1.969 2.779 15.976 7.208 18.617 11.17 3.192 4.788 33.864-40.07 21.277-37.942-9.467 1.599-12.307-1.127-15.248-2.837-2.943-1.711-7.359 26.418-24.646 29.609" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g></g><rect x="22.719" y="93.768" width="154.9" height="72.288" fill="none" stroke="#000" stroke-width=".26458"/></g></g></g>';
  sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '</g>';
  return sDis;
}

render_scatolaDerivazioneD40(dim_target, etk, obj) {
  let dimensioni = {
      w: 111,
      h: 112
  };
  //width="155.17mm" height="72.552mm"
  let info = this.setupCurrentScale(dimensioni, dim_target);
  let sDis = '';
  sDis += '<g>';
  //sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '<g transform="translate(' + info.pos.x + ' ' + info.pos.y + ')" ><g transform="scale(' + info.scale + ')" ><g transform="translate(-41.588 -33.644)"><rect x="41.442" y="33.644" width="110.7" height="112.16" fill="none" stroke="#000" stroke-width=".26458"/><g transform="matrix(2.154 0 0 2.154 -102.16 -69.807)"><g fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10"><g stroke-width=".127"><path d="m74.574 64.802 0.127 1.143 0.254 1.0795 0.50799 1.016 0.6985 1.016 0.8255 1.016 1.0795 0.889 1.143 0.88899 1.3335 0.762 1.524 0.6985 1.5875 0.5715 1.651 0.508 1.778 0.38099 1.8415 0.254 1.905 0.1905 1.8415 0.0635 1.905-0.0635 1.905-0.1905 1.8415-0.254 1.778-0.38099 1.651-0.508 1.5875-0.5715 1.4605-0.6985 1.397-0.762 1.143-0.88899 1.0795-0.889 0.82549-1.016 0.69849-1.016 0.508-1.016 0.25402-1.0795 0.12699-1.143"/><path d="m105.18 71.596-1.397 0.762-1.524 0.635-1.651 0.508-1.7145 0.4445-1.778 0.3175-1.8415 0.1905-1.8415 0.127h-1.905l-1.8415-0.127-1.8415-0.254-1.778-0.381-1.7145-0.4445-1.5875-0.5715-1.524-0.635-1.3335-0.762-1.2065-0.8255-1.0795-0.889-0.88901-0.9525-0.69849-1.016-0.508-1.016-0.3175-1.0795-0.127-1.0795 0.0635-1.0795 0.254-1.0795 0.508-1.016 0.635-1.016 0.8255-1.016 1.016-0.889 1.2065-0.8255 1.3335-0.762 1.4605-0.6985 1.5875-0.5715 1.651-0.508 1.778-0.381 1.778-0.254 1.905-0.1905h1.8415l1.905 0.0635 1.8415 0.1905 1.778 0.254 1.7145 0.4445 1.7145 0.508 1.524 0.635 1.397 0.6985 1.3335 0.762 1.143 0.8255 0.95251 0.9525 0.82551 1.016 0.5715 1.016 0.4445 1.016 0.19049 1.0795 0.0635 1.0795-0.19049 1.0795-0.38101 1.0795-0.5715 1.016-0.76199 1.016-0.889 0.9525-1.143 0.8255-1.2065 0.8255"/><path d="m110.83 65.627-0.12699 1.0795-0.25402 1.0795-0.508 1.0795-0.69849 1.016-0.82549 1.016-1.0795 0.889-1.143 0.8255-1.397 0.8255-1.4605 0.635-1.5875 0.635-1.651 0.508-1.778 0.381-1.8415 0.254-1.905 0.1905-1.905 0.0635-1.8415-0.0635-1.905-0.1905-1.8415-0.254-1.778-0.381-1.651-0.508-1.5875-0.635-1.524-0.635-1.3335-0.8255-1.143-0.8255-1.0795-0.889-0.8255-1.016-0.6985-1.016-0.50799-1.0795-0.254-1.0795-0.127-1.0795"/></g><path d="m110.83 64.802-0.12699-1.0795-0.25402-1.0795-0.44448-1.016-0.63502-1.016-0.76198-0.9525-0.95251-0.889-1.016-0.8255-1.2065-0.762-1.3335-0.69849-2.921-1.143-1.651-0.381-1.651-0.381-1.7145-0.254-1.7145-0.127-1.778-0.0635-1.7145 0.0635-1.778 0.127-1.7145 0.254-1.651 0.381-1.5875 0.381-1.524 0.5715-1.397 0.57151-1.3335 0.69849-1.2065 0.762-1.0795 0.8255-0.889 0.889-0.762 0.9525-0.63501 1.016-0.44449 1.016-0.31751 1.0795-0.0635 1.0795" stroke-width=".1905"/><path d="m74.574 65.627 0.0635 1.0795 0.31751 1.0795 0.44449 1.016 0.63501 1.016 0.762 0.9525 0.889 0.889 1.0795 0.8255 1.2065 0.762 1.3335 0.6985 1.397 0.635 1.524 0.508 1.5875 0.4445 1.651 0.3175 1.7145 0.254 1.778 0.12699 1.7145 0.0635 1.778-0.0635 1.7145-0.12699 1.7145-0.254 1.651-0.3175 1.651-0.4445 1.4605-0.508 1.4605-0.635 1.3335-0.6985 1.2065-0.762 1.016-0.8255 0.95251-0.889 0.76198-0.9525 0.63502-1.016 0.44448-1.016 0.25402-1.0795 0.12699-1.0795" stroke-width=".1905"/><g stroke-width=".127"><path d="m76.162 83.344v-0.1905"/><path d="m76.162 83.153-0.4445-0.762-0.254-0.8255-0.19049-0.8255-0.0635-0.8255"/><path d="m78.448 84.55-2.2225-1.27"/><path d="m76.225 83.28 0.06351 0.127 0.0635 0.127"/><path d="m86.957 89.63-0.0635-0.0635v-0.127"/><path d="m86.893 89.44-3.3655-1.9685"/><path d="m76.162 83.153 0.0635 0.127"/><path d="m87.084 89.503v0.127l0.06351 0.0635"/><path d="m98.26 89.694 0.0635-0.0635v-0.127l-1.5875 0.254-1.5875 0.1905-1.651 0.0635h-1.5875l-1.651-0.0635-1.651-0.1905-1.524-0.254"/><path d="m86.893 89.44 0.19049 0.0635"/><path d="m101.88 87.471-3.3655 1.9685"/><path d="m98.514 89.44v0.127l-0.06351 0.0635"/><path d="m109.05 83.534 0.0635-0.127v-0.127"/><path d="m109.12 83.28-2.159 1.27"/><path d="m98.323 89.503 0.1905-0.0635"/><path d="m109.25 83.344v-0.1905"/><path d="m110.2 79.915-0.0635 0.8255-0.19052 0.8255-0.25399 0.8255-0.4445 0.762"/><path d="m109.12 83.28 0.12699-0.127"/></g><g stroke-width=".1905"><path d="m75.209 79.915 0.0635 0.889 0.19049 0.889 0.31751 0.8255 0.381 0.8255"/><path d="m86.957 89.63-3.683-2.0955"/><path d="m78.702 84.868-2.3495-1.3335"/></g></g><g transform="matrix(-.30395 .17907 .17907 .30395 76.574 83.058)"><path d="m1.35 0c0 0.23292-0.06026 0.46188-0.17494 0.66462" fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".54"/></g><path d="m87.147 89.694 1.3335 0.254 2.794 0.254 1.397 0.0635 1.4605-0.0635 2.794-0.254 1.3335-0.254" fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".1905"/><g transform="matrix(-.17641 .3055 .3055 .17641 87.242 89.218)"><path d="m1.35 0c0 0.14871-0.02457 0.29639-0.07272 0.43709" fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".54"/></g><path d="m109.05 83.534-2.3495 1.3335" fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".1905"/><path d="m102.13 87.535-3.683 2.0955" fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".1905"/><g transform="matrix(.067959 .34617 .34617 -.067959 98.164 89.218)"><path d="m1.35 0c0 0.14871-0.02457 0.29639-0.07272 0.43709" fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".54"/></g><path d="m109.25 83.344 0.38101-0.8255 0.31748-0.8255 0.19052-0.889 0.0635-0.889" fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".1905"/><g transform="matrix(.17635 .30554 .30554 -.17635 108.77 83.058)"><path d="m1.35 0c0 0.23292-0.06026 0.46188-0.17494 0.66462" fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".54"/></g><g fill="none" stroke="#000" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10"><g stroke-width=".1905"><path d="m100.23 86.9-0.5715-0.381-0.381-0.5715-0.3175-0.6985-0.19049-0.82551-0.06351-0.889 0.06351-1.016 0.19049-1.016 0.38101-1.016 0.44449-1.0795 0.508-1.016 0.63501-0.9525 0.69849-0.889"/><path d="m106.51 74.073 0.50801 0.0635 0.4445 0.254"/><path d="m107.47 74.39 0.31748 0.1905"/><path d="m100.23 86.9 0.3175 0.254"/></g><g stroke-width=".127"><path d="m98.514 89.44v-11.43l1.7145-1.016"/><path d="m109.12 71.85v4.3815"/><path d="m109.12 80.296v2.9845"/><path d="m108.36 72.295 0.76202-0.4445"/><path d="m109.25 83.153v-3.302"/><path d="m109.25 76.549v-4.826l-0.12699 0.127"/><path d="m98.323 78.073v11.43"/><path d="m98.45 77.756-0.0635 0.1905-0.0635 0.127"/><path d="m98.45 77.756 0.1905-0.1905"/><path d="m109.18 71.533-0.25401 0.0635-0.19049 0.1905-0.31749 0.3175-0.25401 0.3175-0.88901 0.8255-1.016 0.8255-1.2065 0.762-1.27 0.635-1.397 0.635-1.4605 0.50799-0.5715 0.1905-0.63501 0.1905-0.5715 0.254-0.508 0.3175"/><path d="m109.18 71.533h0.0635"/><path d="m109.25 71.723v-0.1905"/><path d="m108.42 78.518-0.25401-0.508-0.38101-0.381-0.508-0.1905-0.5715-0.0635-0.63499 0.127-0.63499 0.3175-0.635 0.4445-0.5715 0.5715-0.5715 0.635-0.50801 0.762-0.38099 0.8255-0.31751 0.8255-0.19049 0.8255-0.0635 0.762 0.0635 0.6985 0.19049 0.5715 0.31751 0.508 0.44449 0.3175 0.50801 0.127h0.5715"/><path d="m105.63 85.058-0.635 0.254-0.63499 0.127-0.508-0.0635-0.44451-0.254-0.38099-0.381-0.254-0.5715-0.0635-0.635v-0.762l0.1905-0.762 0.3175-0.8255 0.38099-0.8255 0.508-0.6985 0.5715-0.63499 0.63502-0.508 0.635-0.381 0.57149-0.1905 0.5715-0.0635 0.508 0.1905 0.44451 0.3175 0.25398 0.4445 0.19052 0.635 0.0635 0.6985-0.127 0.762-0.25401 0.8255-0.31751 0.8255-0.44448 0.762-0.5715 0.6985-0.57152 0.5715-0.63499 0.4445"/><path d="m105.24 85.566-0.69851 0.3175-0.635 0.127h-0.63499l-0.508-0.254-0.44451-0.3175-0.31749-0.508-0.25401-0.6985-0.0635-0.762 0.0635-0.8255 0.25401-0.889 0.31749-0.889 0.44451-0.8255 0.508-0.8255 0.63499-0.762 0.635-0.635 0.69851-0.4445 0.6985-0.3175 0.63499-0.127h0.635l0.508 0.1905 0.4445 0.381 0.38101 0.508 0.19049 0.635 0.0635 0.762-0.0635 0.8255-0.19049 0.889-0.38101 0.889-0.4445 0.889-0.508 0.8255-0.635 0.6985-0.63499 0.635-0.6985 0.508"/><path d="m102.13 86.011-0.44449-0.38099-0.31751-0.508-0.254-0.635-0.127-0.762 0.0635-0.889 0.12701-0.889 0.31749-0.889 0.381-0.9525 0.508-0.889 0.63501-0.8255 0.635-0.6985 0.6985-0.5715 0.69849-0.4445 0.76201-0.3175 0.635-0.127 0.63499 0.0635 0.5715 0.1905"/><path d="m108.74 77.883-0.19049-0.6985-0.25402-0.635-0.4445-0.508-0.508-0.3175-0.635-0.127h-0.63499l-0.76199 0.1905-0.69852 0.3175-0.76198 0.50799-0.76201 0.635-0.635 0.762-0.635 0.8255-0.508 0.9525-0.4445 0.95251-0.3175 0.9525-0.19049 0.9525-0.0635 0.889 0.0635 0.8255 0.254 0.6985 0.3175 0.635 0.44449 0.4445 0.508 0.254 0.63501 0.127 0.69849-0.0635 0.6985-0.1905"/><path d="m104.55 86.582-0.82549 0.381-0.76201 0.1905-0.76199 0.0635-0.63501-0.127-0.5715-0.3175-0.508-0.508-0.38099-0.635-0.254-0.6985-0.06351-0.889v-0.9525l0.1905-1.016 0.3175-1.016 0.4445-1.0795 0.508-1.016 0.635-0.9525 0.6985-0.8255 0.762-0.762 0.82549-0.635 0.76201-0.4445 0.82549-0.3175 0.76201-0.127 0.6985 0.0635 0.63499 0.1905 0.508 0.381 0.44451 0.5715 0.31751 0.6985 0.19049 0.8255v0.889l-0.127 1.016-0.19049 1.016-0.381 1.016-0.50801 1.0795-0.57149 0.9525-0.635 0.889-0.76201 0.8255-0.76199 0.6985-0.82551 0.5715"/><path d="m107.78 74.581-0.4445-0.254-0.50798-0.0635h-0.57152"/><path d="m102.51 76.232-0.76201 0.8255-0.635 0.8255-0.635 0.9525-0.508 1.016-0.381 1.016-0.31751 1.016-0.127 1.016-0.0635 0.9525 0.0635 0.889 0.1905 0.762 0.3175 0.6985 0.381 0.508 0.508 0.4445"/><path d="m108.1 72.612 0.0635-0.1905"/><path d="m108.8 71.914 0.25401-0.127h0.0635v0.0635"/><path d="m98.323 78.073 0.1905-0.0635"/><path d="m98.514 78.01 0.0635-0.127 0.127-0.127 0.38101-0.254"/><path d="m100.93 76.613-0.0635 0.127-0.0635 0.0635"/></g><g stroke-width=".1905"><path d="m104.29 85.693 0.4445-0.127 0.508-0.1905 0.44448-0.254 0.508-0.3175 0.44451-0.4445 0.38101-0.4445 0.381-0.508 0.31749-0.508 0.31751-0.5715 0.25398-0.5715 0.19052-0.5715 0.127-0.5715 0.0635-0.5715v-0.5715l-0.0635-0.508-0.1905-0.4445"/><path d="m102.13 86.011 0.3175 0.1905 0.762 0.127h0.38099l0.38101-0.0635 0.38101-0.127 0.76198-0.381 0.76202-0.50799 0.76199-0.635 0.63499-0.8255 0.5715-0.82551 0.4445-0.9525 0.38101-0.9525 0.19049-0.9525 0.0635-0.889-0.0635-0.8255-0.12699-0.4445-0.12699-0.3175-0.1905-0.381-0.19051-0.3175-0.25399-0.254-0.31751-0.1905"/><path d="m100.55 87.154 0.4445 0.1905 0.44451 0.127 0.508 0.0635 0.44449-0.0635 0.508-0.0635 0.508-0.127 1.016-0.508 0.508-0.3175 1.016-0.762 0.4445-0.4445 0.4445-0.508 0.38099-0.5715 0.4445-0.50799 0.31751-0.635 0.38098-0.5715 0.25402-0.635 0.25398-0.635 0.19052-0.635 0.19049-0.635 0.12699-0.635 0.0635-0.5715v-1.2065l-0.0635-0.508-0.12699-0.508-0.19049-0.50799-0.25401-0.4445-0.25399-0.381-0.31751-0.3175-0.44451-0.254"/><path d="m108.1 72.612 0.44451-0.4445 0.19049-0.1905 0.0635-0.0635"/><path d="m99.085 77.502 0.38099-0.1905 0.4445-0.1905 0.889-0.3175 1.143-0.381 1.0795-0.381 1.016-0.508 0.9525-0.508 0.88901-0.50799 0.82548-0.635 1.397-1.27"/><path d="m77.94 74.39 0.4445-0.254 0.50799-0.0635"/><path d="m83.782 76.549 0.6985 0.889 0.635 0.9525 0.508 1.016 0.4445 1.0795 0.3175 1.016 0.254 1.016 0.0635 1.016-0.0635 0.889-0.1905 0.82551-0.3175 0.6985-0.4445 0.5715-0.508 0.381"/><path d="m85.179 86.9-0.3175 0.254"/><path d="m77.94 74.39-0.381 0.1905"/></g><g stroke-width=".127"><path d="m76.225 71.85 0.8255 0.4445"/><path d="m76.225 83.28v-2.9845"/><path d="m76.225 76.232v-4.3815"/><path d="m76.162 71.723v4.826"/><path d="m76.162 79.851v3.302"/><path d="m76.162 71.533v0.1905"/><path d="m76.162 71.533h0.0635"/><path d="m86.766 77.565-0.508-0.3175-0.635-0.254-1.143-0.381-1.4605-0.50799-1.397-0.635-1.27-0.635-1.2065-0.762-1.016-0.8255-0.88901-0.8255-0.3175-0.3175-0.254-0.3175-0.254-0.1905-0.1905-0.0635"/><path d="m86.957 77.756-0.1905-0.1905"/><path d="m87.084 78.073-0.0635-0.127-0.0635-0.1905"/><path d="m87.084 89.503v-11.43"/><path d="m81.115 85.693h0.5715l0.508-0.127 0.4445-0.3175 0.3175-0.508 0.1905-0.5715 0.0635-0.6985-0.0635-0.762-0.1905-0.8255-0.3175-0.8255-0.381-0.8255-0.508-0.762-0.5715-0.635-0.635-0.5715-0.63501-0.4445-0.635-0.3175-0.5715-0.127-0.5715 0.0635-0.508 0.1905-0.38101 0.381-0.3175 0.508"/><path d="m82.702 83.344-0.0635 0.6985-0.1905 0.5715-0.3175 0.4445-0.4445 0.254-0.508 0.127-0.635-0.0635-0.5715-0.254-0.635-0.381-0.635-0.5715-0.5715-0.635-0.4445-0.762-0.381-0.8255-0.254-0.8255-0.19049-0.762v-0.762l0.19049-0.635 0.254-0.508 0.381-0.3175 0.4445-0.1905 0.5715-0.0635 0.635 0.1905 0.635 0.3175 0.5715 0.4445 0.635 0.635 0.508 0.6985 0.4445 0.762 0.3175 0.8255 0.1905 0.8255 0.0635 0.762"/><path d="m83.655 83.471-0.0635 0.762-0.1905 0.6985-0.3175 0.508-0.44449 0.3175-0.508 0.254h-0.63501l-0.635-0.127-0.6985-0.3175-0.69849-0.508-0.6985-0.635-0.5715-0.6985-0.5715-0.8255-0.4445-0.889-0.3175-0.889-0.1905-0.889-0.0635-0.8255 0.0635-0.762 0.1905-0.635 0.3175-0.508 0.4445-0.381 0.5715-0.1905h0.5715l0.6985 0.127 0.69849 0.3175 0.6985 0.4445 0.635 0.635 0.63501 0.762 0.508 0.8255 0.44449 0.8255 0.3175 0.889 0.1905 0.889 0.0635 0.8255"/><path d="m77.749 76.486 0.5715-0.1905 0.63501-0.0635 0.635 0.127 0.6985 0.3175 0.762 0.4445 0.69849 0.5715 0.63501 0.6985 0.5715 0.8255 0.508 0.889 0.44449 0.9525 0.254 0.889 0.1905 0.889v0.889l-0.0635 0.762-0.254 0.635-0.3175 0.508-0.4445 0.38099"/><path d="m81.496 86.265 0.6985 0.1905 0.6985 0.0635 0.635-0.127 0.508-0.254 0.4445-0.4445 0.3175-0.635 0.254-0.6985 0.0635-0.8255-0.0635-0.889-0.1905-0.9525-0.3175-0.9525-0.4445-0.95251-0.508-0.9525-0.63499-0.8255-0.6985-0.762-0.6985-0.635-0.762-0.50799-0.762-0.3175-0.6985-0.1905h-0.6985l-0.5715 0.127-0.508 0.3175-0.44449 0.508-0.254 0.635-0.1905 0.6985"/><path d="m85.623 83.788-0.0635 0.889-0.1905 0.8255-0.3175 0.63499-0.508 0.508-0.508 0.381-0.6985 0.1905h-0.69849l-0.762-0.1905-0.8255-0.381-0.82551-0.508-0.76199-0.63499-0.762-0.762-0.6985-0.889-0.5715-0.9525-0.508-1.0795-0.4445-1.016-0.254-1.016-0.127-1.016v-0.9525l0.127-0.8255 0.254-0.6985 0.4445-0.635 0.508-0.4445 0.5715-0.254 0.6985-0.0635 0.762 0.0635 0.76199 0.254 0.82551 0.4445 0.8255 0.5715 0.762 0.6985 1.397 1.778 0.508 1.016 0.508 1.016 0.3175 1.0795 0.1905 1.016 0.0635 0.95251"/><path d="m79.146 74.263h-0.5715l-0.508 0.0635-0.508 0.254"/><path d="m84.861 87.154 0.508-0.4445 0.381-0.508 0.31751-0.6985 0.19049-0.762 0.06351-0.889-0.06351-0.9525-0.12699-1.016-0.3175-1.016-0.381-1.016-0.508-1.016-0.635-0.9525-0.635-0.8255-0.76199-0.8255"/><path d="m84.607 76.803-0.0635-0.0635-0.0635-0.127"/><path d="m86.322 77.502 0.381 0.254 0.127 0.127 0.06351 0.127"/><path d="m86.893 89.44v-11.43l0.19049 0.0635"/><path d="m76.162 71.723 0.0635 0.127"/><path d="m76.225 71.85 0.06351-0.0635h0.0635l0.254 0.127"/><path d="m77.305 72.612-0.0635-0.1905"/><path d="m85.179 76.994 1.7145 1.016"/></g><g stroke-width=".1905"><path d="m76.924 78.518-0.127 0.4445-0.06351 0.508v0.5715l0.06351 0.5715 0.127 0.5715 0.1905 0.5715 0.508 1.143 0.762 1.016 0.381 0.4445 0.4445 0.4445 0.44449 0.3175 0.508 0.254 0.4445 0.1905 0.508 0.127"/><path d="m77.749 76.486-0.3175 0.1905-0.254 0.254-0.1905 0.3175-0.19049 0.381-0.127 0.3175-0.127 0.4445-0.06351 0.8255 0.06351 0.889 0.19049 0.9525 0.38101 0.9525 0.44449 0.9525 0.57151 0.82551 0.635 0.8255 0.762 0.635 0.6985 0.50799 0.82551 0.381 0.381 0.127 0.381 0.0635h0.381l0.381-0.0635 0.31751-0.0635 0.381-0.1905"/><path d="m77.559 74.581-0.381 0.254-0.3175 0.3175-0.254 0.381-0.254 0.4445-0.1905 0.50799-0.127 0.508-0.06351 0.508-0.0635 0.5715 0.0635 0.635 0.06351 0.5715 0.127 0.635 0.127 0.635 0.508 1.27 0.25399 0.635 0.31751 0.5715 0.381 0.635 0.381 0.50799 0.44449 0.5715 0.4445 0.508 0.4445 0.4445 0.508 0.381 0.50799 0.381 0.508 0.3175 1.016 0.508 0.508 0.127 0.4445 0.0635 0.508 0.0635 0.508-0.0635 0.44449-0.127 0.4445-0.1905"/><path d="m84.607 76.803 0.889 0.3175 0.4445 0.1905 0.381 0.1905"/><path d="m76.606 71.914 0.254 0.254 0.44449 0.4445 1.397 1.27 0.8255 0.635 0.889 0.50799 0.95251 0.508 1.016 0.508 1.0795 0.381 1.143 0.381"/><path d="m74.574 65.627v-0.8255"/><path d="m110.83 65.627v-0.8255"/><path d="m75.209 79.915v-11.494"/><path d="m110.2 79.915v-11.494"/></g></g></g></g></g></g>';
  sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '</g>';
  return sDis;
}
render_CENTRALINAGENERICA(dim_target, etk, obj) {
  let dimensioni = {
      w: 240.53,
      h: 123.45
  };
  //width="240.53mm" height="123.01mm"
  let info = this.setupCurrentScale(dimensioni, dim_target);
  let sDis = '';
  sDis += '<g>';
  //sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '<g transform="translate(' + info.pos.x + ' ' + info.pos.y + ')" ><g transform="scale(' + info.scale + ')" ><g transform="translate(49.218 -50.849)"><rect x="-49.218" y="50.849" width="241.24" height="123.51" style="fill:none;stroke-width:.55;stroke:#000000"/><g transform="matrix(.68191 0 0 .68191 25.303 -66.64)"><g transform="matrix(.35278 0 0 -.35278 7.5507 219.49)"><path d="m0 0c-45.13 14.108-90.61 17.886-129.65 10.584-36.937-6.908-63.536-22.87-71.152-42.701-5.89-15.339 2.025-29.687 9.702-39.023 7.88-9.583 19.369-18.902 34.259-27.806" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;stroke-width:.7;stroke:#040606"/></g><g transform="matrix(.35278 0 0 -.35278 -47.75 257.94)"><path d="m0 0c-17.955 10.201-31.727 21.062-41.024 32.369-13.103 15.934-16.94 32.401-11.095 47.62 8.701 22.656 37.723 40.638 77.637 48.102 40.323 7.542 87.159 3.707 133.54-10.742" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;stroke-width:.7;stroke:#040606"/></g><g transform="matrix(.35278 0 0 -.35278 43.227 308)"><path d="m0 0c-1.649-0.358-3.179-0.198-4.507 0.409l-1.54 0.636c-2.938 1.34-4.871 4.875-4.871 9.791 0 2.789 0.623 5.647 1.694 8.29 1.961 4.816 5.423 8.911 9.371 10.544 2.291 0.951 4.421 0.934 6.188 0.132l1.541-0.636c0.989-0.451 1.864-1.15 2.591-2.066" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 46.006 297.72)"><path d="m0 0c-1.769 0.805-3.896 0.82-6.189-0.13-3.948-1.634-7.408-5.73-9.37-10.544-1.073-2.643-1.696-5.502-1.696-8.29 0-4.915 1.935-8.448 4.872-9.793" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 49.069 309.67)"><path d="m0 0c-1.826-0.601-3.519-0.516-4.949 0.139l-10.937 4.541c-2.131 0.975-1.696 1.185-3.752 5.481-0.296 0.618-0.443 0.624-0.443 1.533 0 2.535 4.153 14.273 5.562 15.799 0.535 0.578 0.234 0.425 0.91 0.942 0.842 0.644 7.367 3.111 8.973 2.382l10.938-4.546c1.455-0.663 2.639-1.917 3.418-3.643" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 44.268 299.64)"><path d="m0 0s6.789-2.881 8.291-3.382c1.5-0.497 8.39 0.688 11.62 1.219" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 43.947 299.97)"><path d="m0 0s7.6-3.217 9.102-3.719" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 42.142 306.09)"><path d="m0 0s8.261-3.487 9.306-3.789c1.045-0.304 3.178-2.654 5.382-6.233" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 41.985 305.54)"><path d="m0 0s8.26-3.487 9.305-3.789" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 45.268 306.88)"><path d="m0 0c0.846 1.026 3.016 4.677 4.404 8.005 1.819 4.357 1.771 6.93 0.955 7.864" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 43.853 300.42)"><path d="m0 0s7.601-3.217 9.103-3.719" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 44.848 299.47)"><path d="m0 0s7.6-3.217 9.103-3.719" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 45.9 299.2)"><path d="m0 0s7.6-3.217 9.102-3.719" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 46.628 298.94)"><path d="m0 0s8.164-3.456 9.777-3.995" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 42.189 304.95)"><path d="m0 0s7.6-3.217 9.102-3.719" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 42.605 306.77)"><path d="m0 0s7.6-3.217 9.102-3.719" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 43.145 307.59)"><path d="m0 0s8.346-3.533 9.995-4.083" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 43.437 301.04)"><path d="m0 0s8.196-3.47 9.816-4.01" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 42.235 304.23)"><path d="m0 0s8.196-3.469 9.816-4.01" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 43.229 301.6)"><path d="m0 0s8.562-3.624 10.253-4.189" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 42.397 303.59)"><path d="m0 0s8.562-3.624 10.253-4.189" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 42.998 302.25)"><path d="m0 0s9.039-3.826 10.825-4.423" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 42.674 302.94)"><path d="m0 0s9.039-3.826 10.825-4.423" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 43.465 308.02)"><path d="m0 0-5.006 2.076c-2.13 0.974-1.695 1.184-3.751 5.481-0.296 0.618-0.444 0.624-0.444 1.532 0 2.536 4.154 14.273 5.562 15.799 0.535 0.579 0.235 0.425 0.91 0.942 0.843 0.645 7.367 3.111 8.974 2.383l5.005-2.081" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 42.503 298.9)"><path d="m0 0s0.856-0.416 2.358-0.917c0.703-0.232 2.585-0.097 4.721 0.168" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 42.182 299.24)"><path d="m0 0s1.668-0.751 3.17-1.253" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 40.376 305.35)"><path d="m0 0s2.328-1.021 3.373-1.323c0.334-0.097 0.779-0.404 1.302-0.892" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 40.219 304.81)"><path d="m0 0s2.329-1.021 3.373-1.323" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 43.48 300.61)"><path d="m0 0c0.113 1.305-0.103 2.181-0.511 2.648" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 41.409 305.28)"><path d="m0 0c0.499 0.605 1.459 2.125 2.448 3.953" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 51.616 301.27)"><path d="m0 0c-1.408 0.642-3.094 0.651-4.929-0.107-3.137-1.301-5.906-4.564-7.448-8.386-0.849-2.117-1.355-4.387-1.355-6.601 0-3.924 1.542-6.734 3.883-7.798" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 48.656 304.75)"><path d="m0 0c-0.675-1.685-1.078-3.492-1.078-5.253 0-3.123 1.227-5.361 3.092-6.207" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 52.131 302.37)"><path d="m0 0c-1.12 0.511-2.462 0.519-3.923-0.085" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 53.744 304.13)"><path d="m0 0c-0.405 3.931-2.703 7.021-6.033 8.104" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 48.142 309.34)"><path d="m0 0c2.832-1.307 5.963-0.903 8.7 0.703" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 52.087 304.09)"><path d="m0 0c-0.625 0.285-1.38 0.291-2.192-0.046-1.398-0.579-2.625-2.03-3.319-3.736-0.381-0.936-0.601-1.949-0.601-2.937 0-1.741 0.684-2.993 1.726-3.469" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 53.742 304.91)"><path d="m0 0c0.028 0.365 0.044 0.729 0.044 1.091 0 3.468-1.363 5.961-3.438 6.908" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 49.465 309.24)"><path d="m0 0c1.245-0.568 2.748-0.579 4.364 0.091 1.213 0.502 2.361 1.334 3.384 2.393" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -47.664 249.02)"><path d="m0 0c-0.033-0.587 0.485-1.179 1.558-1.624l225.23-93.606c2.078-0.864 5.479-0.864 7.557 0l80.64 33.513c1.028 0.427 1.547 0.989 1.558 1.552" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 59.459 312.42)"><path d="m12.538 5.5042-81.848-34.289c-2.078-0.863-5.478-0.863-7.556 0l-225.23 93.607c-1.072 0.446-1.59 1.037-1.557 1.624v85.677" style="fill:none;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 64.006 301.98)"><path d="m0 0v-23.314c-5e-3 -0.265-0.122-0.528-0.351-0.778" style="fill:none;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 64.006 279.98)"><path d="m0 0v-52.729" style="fill:none;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -47.664 258.75)"><path d="m0 0c-0.033-0.587 0.485-1.179 1.558-1.624l225.23-93.606c2.078-0.864 5.479-0.864 7.557 0l80.64 33.513c1.028 0.427 1.547 0.989 1.558 1.553v27.583c0.012 0.576-0.508 1.153-1.558 1.589l-225.23 93.607c-2.078 0.864-5.48 0.864-7.558 0l-80.639-33.514c-1.007-0.418-1.526-0.966-1.558-1.517z" style="fill:none;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 33.625 293.91)"><path d="m0 0v-78.781" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 32.036 281.22)"><path d="m0 0v1.673c0 1.46 2.821 2.641 6.295 2.641 3.49 0 6.322-1.181 6.322-2.641v-1.647" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 32.21 280.99)"><path d="m0 0c-0.319 0.312-0.495 0.656-0.495 1.016" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 32.686 281.28)"><path d="m0 0c-0.569 0.236-1.031 0.517-1.35 0.829" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 35.125 281.48)"><path d="m0 0c-0.757-0.131-1.588-0.205-2.461-0.205-1.736 0-3.31 0.292-4.45 0.764" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 36.487 280.63)"><path d="m0 0c0-0.541-0.709-1.184-1.392-1.6v-0.857" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 32.723 279.98)"><path d="m0 0c0.73 0.185 1.521 0.029 2.293-0.308v-1.551" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 34.09 280.42)"><path d="m0 0c1.603-1.155 2.842-2.654 2.842-2.654v-1.081" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 34.348 279.88)"><path d="m0 0c-0.812 0.376-1.65 0.561-2.421 0.366" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 35.996 281.19)"><path d="m0 0s-1.415 1.655-3.146 2.646" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 35.787 281.55)"><path d="m0 0c-0.594 0.365-1.569 0.957-2.635 1.566" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 34.352 280.51)"><path d="m0 0v1.83c0.569 0.125 1.155 0.203 1.747 0.214l1.72-0.882" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 32.571 280.68)"><path d="m0 0c0.638 0.436 1.596 1.027 2.733 1.527" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 35.575 280.1)"><path d="m0 0c-0.581 7e-3 -1.471-0.194-2.034-0.302v-2.237" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 34.088 280.42)"><path d="m0 0c-1.347-0.555-2.473-1.261-3.16-1.74l-1.142 1.008" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 32.124 280.28)"><path d="m0 0c-0.591-0.425-0.929-0.918-0.929-1.444" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 36.7 280.79)"><path d="m0 0c0 0.464-0.262 0.901-0.729 1.29" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 31.797 280.79)"><path d="m0 0c0-0.797 0.778-1.52 2.035-2.042 1.258-0.522 2.995-0.846 4.914-0.846 1.877 0 3.579 0.309 4.829 0.811 1.308 0.525 2.121 1.262 2.121 2.077" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 57.257 270.74)"><path d="m0 0v1.674c0 1.459 2.822 2.64 6.296 2.64 3.489 0 6.322-1.181 6.322-2.64v-1.648" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 57.432 270.51)"><path d="m0 0c-0.318 0.312-0.495 0.655-0.495 1.016" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 57.908 270.8)"><path d="m0 0c-0.57 0.236-1.031 0.517-1.351 0.829" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 60.346 271)"><path d="m0 0c-0.756-0.132-1.588-0.205-2.46-0.205-1.736 0-3.311 0.292-4.45 0.764" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 61.709 270.15)"><path d="m0 0c0-0.541-0.71-1.184-1.392-1.601v-0.857" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 57.945 269.5)"><path d="m0 0c0.73 0.186 1.52 0.029 2.292-0.308v-1.551" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 59.312 269.94)"><path d="m0 0c1.602-1.156 2.842-2.654 2.842-2.654v-1.082" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 59.57 269.4)"><path d="m0 0c-0.813 0.376-1.65 0.562-2.421 0.366" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 61.218 270.71)"><path d="m0 0s-1.415 1.656-3.146 2.646" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 61.009 271.07)"><path d="m0 0c-0.594 0.365-1.57 0.957-2.636 1.566" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 59.574 270.03)"><path d="m0 0v1.83c0.569 0.125 1.155 0.203 1.747 0.214l1.72-0.882" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 57.792 270.2)"><path d="m0 0c0.638 0.436 1.597 1.027 2.734 1.527" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 60.797 269.62)"><path d="m0 0c-0.582 8e-3 -1.472-0.193-2.035-0.302v-2.237" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 59.31 269.94)"><path d="m0 0c-1.348-0.555-2.474-1.262-3.161-1.74l-1.142 1.008" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 57.346 269.8)"><path d="m0 0c-0.591-0.425-0.929-0.918-0.929-1.444" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 61.922 270.31)"><path d="m0 0c0 0.463-0.263 0.901-0.729 1.29" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 57.019 270.31)"><path d="m0 0c0-0.798 0.778-1.52 2.035-2.042 1.258-0.522 2.995-0.847 4.914-0.847 1.877 0 3.578 0.309 4.829 0.812 1.308 0.525 2.121 1.262 2.121 2.077" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -44.953 249.23)"><path d="m0 0v1.674c0 1.459 2.822 2.64 6.296 2.64 3.489 0 6.322-1.181 6.322-2.64v-1.648" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -44.779 249)"><path d="m0 0c-0.318 0.312-0.495 0.655-0.495 1.016" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -44.302 249.29)"><path d="m0 0c-0.57 0.236-1.031 0.517-1.351 0.829" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -41.864 249.49)"><path d="m0 0c-0.756-0.132-1.588-0.205-2.46-0.205-1.736 0-3.311 0.292-4.45 0.764" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -40.502 248.64)"><path d="m0 0c0-0.541-0.71-1.184-1.392-1.601v-0.857" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -44.266 247.99)"><path d="m0 0c0.73 0.185 1.52 0.029 2.292-0.308v-1.551" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -42.899 248.43)"><path d="m0 0c1.602-1.156 2.842-2.654 2.842-2.654v-1.082" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -42.641 247.89)"><path d="m0 0c-0.813 0.376-1.65 0.562-2.421 0.366" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -40.993 249.2)"><path d="m0 0s-1.415 1.656-3.146 2.646" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -41.202 249.56)"><path d="m0 0c-0.594 0.365-1.57 0.957-2.636 1.566" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -42.636 248.52)"><path d="m0 0v1.83c0.569 0.125 1.155 0.203 1.747 0.214l1.72-0.882" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -44.418 248.69)"><path d="m0 0c0.638 0.436 1.597 1.027 2.734 1.527" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -41.413 248.11)"><path d="m0 0c-0.582 8e-3 -1.472-0.193-2.035-0.302v-2.237" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -42.9 248.43)"><path d="m0 0c-1.348-0.555-2.474-1.261-3.161-1.739l-1.142 1.007" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -44.864 248.29)"><path d="m0 0c-0.591-0.425-0.93-0.918-0.93-1.444" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -40.289 248.8)"><path d="m0 0c0 0.463-0.263 0.901-0.729 1.29" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -45.192 248.8)"><path d="m0 0c0-0.798 0.779-1.52 2.036-2.042 1.258-0.522 2.995-0.847 4.914-0.847 1.876 0 3.578 0.309 4.829 0.812 1.308 0.525 2.121 1.262 2.121 2.077" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -19.731 238.75)"><path d="m0 0v1.674c0 1.459 2.822 2.64 6.296 2.64 3.489 0 6.322-1.181 6.322-2.64v-1.648" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -19.557 238.52)"><path d="m0 0c-0.318 0.312-0.495 0.656-0.495 1.017" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -19.081 238.81)"><path d="m0 0c-0.569 0.236-1.031 0.517-1.35 0.829" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -16.642 239.01)"><path d="m0 0c-0.757-0.132-1.588-0.205-2.46-0.205-1.737 0-3.311 0.292-4.451 0.763" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -15.28 238.16)"><path d="m0 0c0-0.541-0.71-1.184-1.392-1.601v-0.857" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -19.044 237.51)"><path d="m0 0c0.729 0.185 1.52 0.029 2.292-0.308v-1.551" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -17.677 237.95)"><path d="m0 0c1.602-1.155 2.842-2.654 2.842-2.654v-1.081" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -17.419 237.41)"><path d="m0 0c-0.813 0.376-1.65 0.561-2.422 0.366" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -15.771 238.72)"><path d="m0 0s-1.415 1.655-3.146 2.646" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -15.98 239.08)"><path d="m0 0c-0.593 0.365-1.569 0.956-2.635 1.566" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -17.415 238.04)"><path d="m0 0v1.829c0.569 0.126 1.156 0.204 1.748 0.215l1.72-0.882" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -19.196 238.21)"><path d="m0 0c0.638 0.436 1.597 1.027 2.734 1.527" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -16.191 237.63)"><path d="m0 0c-0.582 7e-3 -1.472-0.193-2.035-0.302v-2.237" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -17.678 237.95)"><path d="m0 0c-1.348-0.555-2.474-1.261-3.161-1.74l-1.142 1.008" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -19.643 237.81)"><path d="m0 0c-0.59-0.425-0.929-0.918-0.929-1.443" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -15.067 238.32)"><path d="m0 0c0 0.463-0.263 0.901-0.729 1.289" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 -19.97 238.32)"><path d="m0 0c0-0.798 0.778-1.52 2.035-2.042 1.258-0.523 2.996-0.847 4.915-0.847 1.876 0 3.578 0.309 4.828 0.812 1.309 0.525 2.122 1.261 2.122 2.077" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 102.17 251.53)"><path d="m0 0c-1.242-0.516-2.928-0.807-4.687-0.807-1.756 0-3.442 0.291-4.684 0.807l-217.16 90.253v5.764l52.429 21.789c1.242 0.516 2.927 0.806 4.687 0.807 1.756-1e-3 3.443-0.29 4.686-0.806l219.41-91.188c1.242-0.516 1.94-1.217 1.94-1.948 0-0.73-0.698-1.43-1.942-1.947z" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 137.43 270.02)"><path d="m0 0 9.035 3.755c1.13 0.47 1.765 1.107 1.765 1.772v2.204" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.7;stroke:#050606"/></g><g transform="matrix(.35278 0 0 -.35278 105.75 278.19)"><path d="m0 0 12.779-5.312h-2e-3c1.13-0.47 2.665-0.733 4.263-0.733 1.597-1e-3 3.13 0.263 4.26 0.733l18.887 7.85 30.245 12.568" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.7;stroke:#050606"/></g><g transform="matrix(.35278 0 0 -.35278 105.75 277.41)"><path d="m0 0 12.779-5.311-2e-3 -1e-3c1.13-0.469 2.665-0.733 4.263-0.733 1.597-1e-3 3.13 0.264 4.26 0.733l45.58 18.945" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 141.24 267.29)"><path d="m0 0c0-0.664-0.635-1.302-1.765-1.771l-11.559-4.805" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 136.11 264.02)"><path d="m0 0 12.78-5.311-4e-3 -1e-3c1.13-0.47 1.765-1.106 1.765-1.771v-2.191" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.7;stroke:#050606"/></g><g transform="matrix(.35278 0 0 -.35278 135.49 269.27)"><path d="m0 0 14.535 6.041c1.13 0.469 1.765 1.107 1.765 1.771" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 105.98 276.73)"><path d="m0 0 12.126-5.035-2e-3 -1e-3c1.13-0.469 2.665-0.733 4.263-0.733 1.596-1e-3 3.13 0.264 4.259 0.733l18.887 7.85c1.13 0.469 1.765 1.107 1.765 1.771" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 119.93 276.51)"><path d="m0 0c1.13 0.469 1.765 1.107 1.765 1.771" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 115.42 272.62)"><path d="m0 0 12.781-5.312-4e-3 -1e-3c1.13-0.47 1.763-1.107 1.765-1.77v-2.191" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 8.0589 236.81)"><path d="m0 0-12.779 5.311h-1e-3c-1.13 0.469-1.765 1.107-1.765 1.771" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 7.8088 235.93)"><path d="m0 0-12.07 5.015h-1e-3c-1.13 0.469-1.765 1.107-1.765 1.771" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 8.0589 237.58)"><path d="m0 0-12.779 5.311h-1e-3c-1.13 0.469-1.765 1.106-1.765 1.771v4.397c-2e-3 0.663 0.635 1.3 1.765 1.77l12.615 5.243" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 117.84 261.7)"><path d="m0 0-8.507-3.523v5.478l8.507 3.524z" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 126.84 257.96)"><path d="m0 0-8.507-3.523v5.478l8.507 3.524z" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 58.482 254.22)"><path d="m0 0-8.507 3.523v-5.478l8.507-3.524z" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 96.124 271.74)"><path d="m0 0 8.507-3.523v5.478l-8.507 3.524z" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 17.841 237.39)"><path d="m0 0v-5.479l-8.506 3.523v5.479z" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 8.843 220.35)"><path d="m0 0 272.81-113" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 8.5481 223.89)"><path d="m0 0 272.81-113" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 8.2119 237.14)"><path d="m0 0 276.49-114.53v0.381" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 105.78 256.83)"><path d="m0 0-272.32 113.18" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 105.75 276.3)"><path d="m0 0v32.545l-0.966 1.433v13.043s1.672 5.224 2.195 6.583c0.522 1.357 1.044 1.984 2.673 2.734l77.466 32.163c1.213 0.462 1.852 0.414 2.289 0.142" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 105.75 278.19)"><path d="m0 0-276.93 115.09" style="fill:none;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 8.0589 235.71)"><path d="m0 0v32.568l-0.966 1.432v13.043s1.672 5.225 2.195 6.583c0.522 1.358 1.044 1.985 2.673 2.735l77.466 32.163c1.214 0.462 1.852 0.414 2.289 0.142l276.93-115.09c0.37-0.23 0.596-0.619 0.904-0.994 0.672-0.819 2.657-4.998 2.657-4.998v-13.044l-1.16-1.29v-33.487" style="fill:none;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 8.1929 235.9)"><path d="m0 0 0.852 0.742 6.823 5.958c0.531 0.466 0.831 1.27 0.831 2.239l-2e-3 11.998c0 1.453-0.447 3.033-1.245 4.391-0.798 1.356-1.881 2.383-3.009 2.85l1e-3 9e-3 -2.41 0.998" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 105.08 264.95)"><path d="m0 0-3.119 1.292 3e-3 -8e-3c-1.128 0.467-2.211 0.338-3.009-0.359s-1.245-1.904-1.245-3.357v-10.772c0-0.969-0.299-1.774-0.831-2.237-0.531-0.464-1.253-0.552-2.005-0.241l-252.39 104.54c-0.752 0.311-1.472 0.996-2.004 1.901-0.533 0.905-0.832 1.957-0.832 2.926v10.772c0 1.453-0.447 3.03-1.245 4.388-0.798 1.359-1.881 2.385-3.009 2.853l3e-3 5e-3 -3.119 1.292" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 105.73 276.3)"><path d="m0 0-0.852 1.447-6.822 11.61c-0.531 0.906-0.832 1.959-0.832 2.928l2e-3 11.997c0 1.453 0.447 2.662 1.245 3.359 0.798 0.695 1.881 0.825 3.009 0.358l-1e-3 9e-3 2.41-0.999v3.46" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 105.75 277.05)"><path d="m0 0-8.991 15.303 2e-3 0.019c-0.14 0.218-0.278 0.434-0.43 0.633-0.152 0.197-0.318 0.378-0.491 0.541-0.171 0.163-0.349 0.31-0.531 0.427-0.181 0.118-0.368 0.21-0.553 0.3l-254.61 105.46c-0.187 0.064-0.373 0.126-0.554 0.158-0.183 0.035-0.361 0.035-0.531 0.013-0.173-0.019-0.339-0.063-0.492-0.133-0.152-0.073-0.29-0.176-0.428-0.278l1e-3 -0.02-8.992-7.855" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 105.02 264.12)"><path d="m0 0v13.043s1.672 5.225 2.194 6.583c0.523 1.358 1.045 1.985 2.674 2.735l77.466 32.162c1.213 0.463 1.852 0.414 2.289 0.143" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 8.1116 223.91)"><path d="m0 0v13.043s1.672 5.225 2.193 6.583c0.523 1.358 1.045 1.985 2.674 2.735l77.466 32.162c1.214 0.463 1.853 0.414 2.29 0.143" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 117.63 272.47)"><path d="m0 0-3.474-1.443" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 136.11 264.02)"><path d="m0 0-12.817-5.349" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 115.42 272.62)"><path d="m0 0-26.599-11.099" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 105.73 276.31)"><path d="m0 0c0-0.505 0.317-1.044 0.709-1.207l-3e-3 8e-3" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 101.43 254.12)"><path d="m0 0 4.278-1.778 5.846 0.651 1.566 2.429-4.279 1.779-5.845-0.651z" style="fill:none;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 124.95 244.35)"><path d="m0 0 4.279-1.778 5.845 0.651 1.566 2.429-4.278 1.778-5.846-0.651z" style="fill:none;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 14.588 218.03)"><path d="m0 0-4.278 1.778 1.566 2.43 5.845 0.65 4.279-1.778-1.566-2.429z" style="fill:none;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 38.108 208.26)"><path d="m0 0-4.279 1.778 1.566 2.43 5.846 0.65 4.278-1.777-1.565-2.43z" style="fill:none;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 33.84 209.45)"><path d="m0 0 8.512-3.538-31.408-13.053-8.513 3.537z" style="fill:none;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 8.0589 235.71)"><path d="m0 0c0-0.242-0.075-0.444-0.207-0.56-0.133-0.115-0.314-0.137-0.502-0.06" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 114.39 276.19)"><path d="m0 0c0 0.532-0.519 1.014-1.358 1.362-0.838 0.349-1.998 0.565-3.279 0.565-1.312 0-2.498-0.227-3.342-0.592-0.8-0.346-1.293-0.816-1.293-1.335" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 111.12 276.19)"><path d="m0 0c0-0.532 0.519-1.014 1.357-1.362 0.839-0.349 1.998-0.565 3.279-0.565 1.252 0 2.387 0.206 3.221 0.541 0.873 0.35 1.415 0.842 1.415 1.386" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 114.86 276.45)"><path d="m0 0v0.704c0 0.689-0.672 1.313-1.759 1.764-1.085 0.451-2.586 0.731-4.243 0.731-1.7 0-3.234-0.294-4.326-0.765-1.038-0.449-1.676-1.059-1.676-1.73v-0.704" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 110.63 276.2)"><path d="m0 0c0-0.689 0.672-1.312 1.758-1.764 1.086-0.451 2.587-0.731 4.244-0.731 1.62 0 3.09 0.267 4.17 0.701 1.13 0.454 1.832 1.089 1.832 1.794" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 110.63 276.45)"><path d="m0 0c0-0.689 0.672-1.312 1.758-1.764 1.086-0.451 2.587-0.731 4.244-0.731 1.62 0 3.09 0.267 4.17 0.701 1.13 0.454 1.832 1.089 1.832 1.794" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 137.36 266.65)"><path d="m0 0c0 0.532-0.52 1.014-1.358 1.362-0.839 0.349-1.998 0.565-3.279 0.565-1.313 0-2.498-0.227-3.342-0.592-0.801-0.346-1.294-0.816-1.294-1.335" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 134.09 266.65)"><path d="m0 0c0-0.532 0.52-1.014 1.358-1.362 0.839-0.349 1.998-0.565 3.279-0.565 1.252 0 2.386 0.206 3.221 0.541 0.872 0.35 1.415 0.842 1.415 1.386" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 137.83 266.91)"><path d="m0 0v0.704c0 0.689-0.672 1.313-1.759 1.764-1.086 0.451-2.586 0.731-4.244 0.731-1.699 0-3.234-0.294-4.326-0.765-1.037-0.449-1.676-1.059-1.676-1.73v-0.704" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 133.6 266.66)"><path d="m0 0c0-0.689 0.672-1.312 1.758-1.764 1.086-0.451 2.587-0.731 4.244-0.731 1.621 0 3.091 0.267 4.171 0.701 1.129 0.454 1.832 1.089 1.832 1.794" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 133.6 266.91)"><path d="m0 0c0-0.689 0.672-1.313 1.758-1.764s2.587-0.731 4.244-0.731c1.621 0 3.091 0.267 4.171 0.701 1.129 0.454 1.832 1.089 1.832 1.794" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 7.9748 232.23)"><path d="m0 0c-0.714-0.1-1.352-0.27-1.862-0.491-0.802-0.346-1.295-0.817-1.295-1.336" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 6.861 232.87)"><path d="m0 0c0-0.532 0.52-1.014 1.358-1.362 0.488-0.203 1.083-0.361 1.747-0.457" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 8.0482 232.02)"><path d="m0 0c-1.199-0.104-2.268-0.358-3.087-0.712-1.037-0.449-1.676-1.058-1.676-1.729v-0.705" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 6.368 232.88)"><path d="m0 0c0-0.689 0.673-1.312 1.758-1.764 0.744-0.309 1.682-0.537 2.732-0.651" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 6.368 233.13)"><path d="m0 0c0-0.689 0.673-1.313 1.758-1.764 0.724-0.3 1.634-0.525 2.65-0.642" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 125.67 259.9)"><path d="m0 0c-0.969 0.567-2.305 0.615-3.773 6e-3l-12.918-5.35c-2.939-1.218-5.344-4.618-5.344-7.558v-19.711c0-1.47 0.601-2.556 1.57-3.124" style="fill:none;stroke-linejoin:bevel;stroke-miterlimit:22.926;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 126.22 263.89)"><path d="m0 0v8.199c0 1.469-0.602 2.556-1.57 3.124l-2.367 0.988c-0.968 0.567-2.304 0.615-3.774 6e-3l-12.917-5.35c-2.939-1.217-5.344-4.618-5.344-7.557v-19.712c0-1.469 0.601-2.556 1.57-3.124l2.367-0.988c0.968-0.567 2.304-0.615 3.773-6e-3l10.09 4.179" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 123.8 262.41)"><path d="m0 0c-1.094 0.5-2.324 0.19-3.162-0.157-2.658-1.1-5.245-4.086-6.752-7.791-0.849-2.084-1.297-4.256-1.297-6.282v-4.96" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 123.49 262.36)"><path d="m0 0 3.627-1.444c0.819-0.373 1.533-0.976 2.105-1.775" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 122.31 270.55)"><path d="m0 0c-0.792-0.018-1.533 0.135-2.203 0.441l-2.395 0.957c-0.798 0.365-1.495 0.947-2.059 1.717" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 120.35 268.72)"><path d="m0 0c0.506-2.324 1.722-3.986 3.358-4.733" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 124.77 262.87)"><path d="m0 0c-1.31 0.598-2.891 0.609-4.592-0.095-2.928-1.213-5.498-4.252-6.951-7.826-0.703-1.726-1.145-3.578-1.24-5.408l2.441-0.973" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 123.63 271.02)"><path d="m0 0c-0.335 0.069-0.656 0.175-0.962 0.314l-2.77 1.107c-1.526 0.698-2.66 2.247-3.13 4.412l-2.43 0.677" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 121.13 267.91)"><path d="m0 0c0.081 1.729 0.495 3.481 1.159 5.113 1.355 3.33 3.751 6.162 6.48 7.292 1.585 0.657 3.057 0.646 4.277 0.09l2.772-1.108c0.716-0.326 1.346-0.841 1.862-1.518" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 123.29 270.91)"><path d="m0 0c-2.033 0.929-3.369 3.374-3.369 6.773 0 1.928 0.43 3.906 1.173 5.732 1.016 2.498 2.617 4.716 4.506 6.145l2.672-0.973" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 126.31 263.89)"><path d="m0 0c-1.144 0.522-2.51 0.564-3.98 0.027" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 128.17 265.02)"><path d="m0 0c-0.288 0.229-0.599 0.42-0.927 0.57l-2.681 1.071c-0.884 0.403-1.908 0.51-3.01 0.27l-2.632 1.318" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 125.05 264.67)"><path d="m0 0c-2.174-1.319-4.039-3.727-5.163-6.49-0.719-1.767-1.135-3.679-1.135-5.544 0-3.288 1.293-5.652 3.26-6.551l2.681-1.07c0.776-0.356 1.66-0.482 2.61-0.346" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 123.81 269.87)"><path d="m0 0c0.354-2.446 1.52-4.195 3.148-4.938" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 127.84 264.82)"><path d="m0 0c-1.181 0.539-2.605 0.549-4.139-0.086-2.638-1.093-4.955-3.832-6.265-7.053-0.481-1.182-0.826-2.428-1.002-3.682l2.434-0.317" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 127.69 272.13)"><path d="m0 0c-1.099-0.257-2.116-0.16-2.995 0.242l-2.581 1.031c-1.603 0.732-2.74 2.473-3.053 4.908l-2.388 0.226" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 124.67 268.75)"><path d="m0 0c0.177 1.145 0.498 2.28 0.937 3.359 1.262 3.103 3.495 5.741 6.037 6.793 1.476 0.612 2.848 0.602 3.984 0.084l2.583-1.032c0.236-0.108 0.464-0.238 0.679-0.389" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 126.64 272.04)"><path d="m0 0c-1.894 0.866-3.139 3.143-3.139 6.31 0 1.795 0.401 3.638 1.093 5.339 1.105 2.715 2.95 5.074 5.098 6.327l2.271-1.078" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 129.45 265.5)"><path d="m0 0c-0.471 0.215-0.981 0.342-1.523 0.375" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 131.19 266.16)"><path d="m0 0-2.479 0.99c-0.704 0.321-1.5 0.439-2.359 0.324l-1.616 0.914" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 128.52 266.08)"><path d="m0 0c-1.898-1.249-3.521-3.393-4.514-5.836-0.665-1.634-1.049-3.401-1.049-5.125 0-3.04 1.195-5.226 3.013-6.057l2.478-0.99c0.948-0.433 2.064-0.498 3.269-0.124" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 127.45 270.68)"><path d="m0 0c0.254-2.466 1.367-4.23 2.958-4.957" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 131.19 266.16)"><path d="m0 0c-1.092 0.498-2.409 0.507-3.826-0.08-2.44-1.01-4.581-3.543-5.792-6.521-0.333-0.816-0.596-1.667-0.775-2.528l2.87-0.366" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 130.32 272.7)"><path d="m0 0-2.384 0.952c-1.531 0.7-2.603 2.397-2.847 4.77l-2.922-1e-3" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 128.54 269.51)"><path d="m0 0c0.172 0.906 0.44 1.802 0.789 2.659 1.165 2.865 3.227 5.301 5.574 6.273 1.364 0.565 2.631 0.556 3.68 0.078l2.385-0.953" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 132.92 266.67)"><path d="m0 0c-1.05 0.479-2.317 0.488-3.681-0.077-2.347-0.972-4.408-3.408-5.573-6.273-0.64-1.572-1.01-3.273-1.01-4.931 0-2.925 1.151-5.028 2.9-5.827" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 133.12 268.15)"><path d="m0 0c-0.36 0.831-0.919 1.435-1.611 1.75" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 130.71 271.81)"><path d="m0 0c0.645-0.294 1.403-0.338 2.222-0.086" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 133.93 268.43)"><path d="m0 0c-0.194 2.498-1.286 4.287-2.868 5.01" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 130.32 272.7)"><path d="m0 0c1.05-0.479 2.317-0.488 3.681 0.077 0.644 0.266 1.266 0.643 1.854 1.109" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 130.71 271.82)"><path d="m0 0c-1.244 0.567-2.063 2.063-2.063 4.142 0 1.211 0.278 2.454 0.755 3.596 0.834 1.997 2.28 3.687 3.923 4.367 0.971 0.402 1.872 0.395 2.618 0.054" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 196.07 275.68)"><path d="m0 0c-16.484 6.828-33.427 3.519-54.917-0.269-15.163-2.673-31.954-5.631-51.406-5.632-24.703-1e-3 -44.813 2.035-80.072 18.171" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 131.63 267.55)"><path d="m0 0c60.664-27.999 92.729-17.962 125.78-12.137 22.389 3.946 41.726 7.354 61.266-0.741" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 197.51 275.17)"><path d="m0 0c-0.562-0.633-1.207-1.129-1.895-1.414-0.811-0.336-1.565-0.33-2.19-0.044" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 198.11 274.06)"><path d="m0 0c-0.07-0.244-0.153-0.486-0.246-0.723" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 197.62 272.09)"><path d="m0 0c0.911-0.416 1.549-1.425 1.693-2.835" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/><path d="m0 0c-0.624 0.285-1.377 0.29-2.188-0.046-1.395-0.578-2.62-2.026-3.313-3.729-0.38-0.934-0.6-1.945-0.6-2.931 0-1.738 0.684-2.988 1.723-3.463" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 196.65 275.03)"><path d="m0 0c-0.289-0.033-0.557 9e-3 -0.795 0.118" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 197.62 274.01)"><path d="m0 0c-0.054-0.182-0.117-0.361-0.19-0.536" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 197.31 272.8)"><path d="m0 0c0.254-0.116 0.473-0.307 0.645-0.562" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/><path d="m0 0c-0.382 0.174-0.842 0.177-1.338-0.028-0.852-0.353-1.6-1.238-2.024-2.279-0.233-0.57-0.367-1.189-0.367-1.791 0-1.062 0.418-1.826 1.053-2.117" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 203.28 274.64)"><path d="m0 0c-0.07-0.052-0.144-0.095-0.219-0.126-0.177-0.074-0.343-0.073-0.48-0.01" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 203.37 273.9)"><path d="m0 0c0.171-0.078 0.299-0.252 0.352-0.495" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/><path d="m0 0c-0.137 0.062-0.303 0.064-0.48-0.01-0.306-0.127-0.576-0.445-0.727-0.819-0.084-0.204-0.132-0.426-0.132-0.643 0-0.381 0.15-0.655 0.378-0.76" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 204.01 274.28)"><path d="m0 0c-0.085 0.038-0.187 0.039-0.298-6e-3 -0.19-0.077-0.357-0.27-0.451-0.496-0.052-0.125-0.082-0.26-0.082-0.391 0-0.232 0.093-0.399 0.234-0.461" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 203.35 274.07)"><path d="m0 0c-0.085 0.038-0.187 0.039-0.298-6e-3 -0.19-0.077-0.357-0.27-0.451-0.497-0.052-0.124-0.082-0.259-0.082-0.391 0-0.231 0.093-0.398 0.234-0.461" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 202.68 275.67)"><path d="m0 0c-0.077-0.06-0.157-0.109-0.241-0.144-0.178-0.073-0.344-0.072-0.481-9e-3" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 202.76 274.94)"><path d="m0 0c0.171-0.078 0.299-0.252 0.352-0.495" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/><path d="m0 0c-0.137 0.062-0.303 0.063-0.48-0.01-0.307-0.127-0.576-0.445-0.727-0.819-0.084-0.205-0.132-0.426-0.132-0.643 0-0.382 0.15-0.656 0.378-0.76" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 203.03 274.68)"><path d="m0 0c-4.612 1.611-6.737 1.463-9.146 1.409-2.333-0.052-5.814 0.376-10.121 1.889" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 196.9 272.87)"><path d="m0 0c3.883-1.363 5.97-1.317 8.178-1.268 2.521 0.055 5.128 0.114 10.162-1.645" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 202.42 275.73)"><path d="m0 0c-4.612 1.611-6.741 1.463-9.146 1.409-2.33-0.05-4.377-0.199-8.684 1.314" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 196.09 273.87)"><path d="m0 0c3.883-1.364 6.544-1.44 8.753-1.391 2.52 0.058 5.127 0.114 10.161-1.644" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 203.35 274.07)"><path d="m0 0 1.851-0.59c0.141-0.063 0.234-0.23 0.234-0.462 0-0.135-0.031-0.273-0.086-0.4-0.095-0.223-0.26-0.411-0.446-0.487-0.111-0.045-0.214-0.044-0.299-6e-3l-1.704 0.534" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 203.37 275.31)"><path d="m0 0c-0.085 0.038-0.187 0.039-0.298-6e-3 -0.19-0.077-0.357-0.27-0.451-0.496-0.052-0.125-0.082-0.26-0.082-0.391 0-0.232 0.094-0.398 0.235-0.461" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 202.71 275.1)"><path d="m0 0c-0.085 0.038-0.187 0.039-0.298-6e-3 -0.19-0.077-0.356-0.27-0.451-0.497-0.052-0.124-0.082-0.259-0.082-0.391 0-0.231 0.094-0.398 0.235-0.461" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/><path d="m0 0 1.851-0.59c0.141-0.063 0.235-0.23 0.235-0.462 0-0.135-0.032-0.273-0.086-0.4-0.096-0.223-0.26-0.411-0.447-0.487-0.111-0.044-0.213-0.044-0.298-6e-3l-1.705 0.534" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 49.928 299.66)"><path d="m0 0c0.087 2.582 0.694 5.205 1.684 7.645 1.959 4.813 5.418 8.904 9.364 10.537 2.289 0.949 4.418 0.933 6.183 0.131l1.54-0.635c0.989-0.45 1.863-1.149 2.588-2.065" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 56.55 293.42)"><path d="m0 0c-1.767 0.805-3.894 0.82-6.185-0.13-3.944-1.633-7.402-5.725-9.362-10.537-0.952-2.344-1.55-4.859-1.673-7.343" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 52.689 301.78)"><path d="m0 0c-0.295 0.618-0.443 0.623-0.443 1.531 0 2.533 4.151 14.263 5.558 15.788 0.534 0.578 0.234 0.425 0.909 0.941 0.842 0.644 7.362 3.11 8.967 2.381l10.931-4.542c1.454-0.663 2.638-1.916 3.415-3.641" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 59.612 305.37)"><path d="m0 0c-1.825-0.601-3.516-0.516-4.945 0.139l-10.93 4.538" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 54.814 295.34)"><path d="m0 0s6.784-2.879 8.285-3.38c1.498-0.496 8.383 0.688 11.612 1.218" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 54.494 295.67)"><path d="m0 0s7.595-3.215 9.096-3.716" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 52.689 301.78)"><path d="m0 0s8.255-3.484 9.299-3.786c1.045-0.304 3.177-2.653 5.38-6.229" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 52.533 301.24)"><path d="m0 0s8.255-3.484 9.299-3.786" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 55.813 302.58)"><path d="m0 0c0.845 1.025 3.014 4.674 4.401 8 1.817 4.354 1.769 6.925 0.954 7.858" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 54.4 296.12)"><path d="m0 0s7.595-3.215 9.096-3.716" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 55.393 295.17)"><path d="m0 0s7.595-3.215 9.096-3.716" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 56.445 294.91)"><path d="m0 0s7.595-3.215 9.096-3.716" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 57.173 294.64)"><path d="m0 0s8.158-3.453 9.771-3.992" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 52.736 300.65)"><path d="m0 0s7.595-3.215 9.096-3.716" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 53.425 302.58)"><path d="m0 0c1.973-0.831 7.116-2.987 8.322-3.39" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 53.692 303.29)"><path d="m0 0s8.34-3.531 9.988-4.081" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 53.984 296.74)"><path d="m0 0s8.19-3.467 9.809-4.008" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 52.782 299.93)"><path d="m0 0s8.19-3.467 9.81-4.008" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 53.776 297.3)"><path d="m0 0s8.555-3.621 10.246-4.186" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 52.944 299.29)"><path d="m0 0s8.555-3.622 10.246-4.186" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 53.545 297.95)"><path d="m0 0s9.033-3.823 10.818-4.419" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 53.221 298.64)"><path d="m0 0s9.033-3.823 10.818-4.419" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 50.855 299.93)"><path d="m0 0c0.911 4.105 4.111 12.843 5.312 14.145 0.535 0.578 0.235 0.425 0.91 0.941 0.842 0.644 7.362 3.109 8.967 2.381l5.001-2.079" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 54.012 303.71)"><path d="m0 0-0.818 0.339" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 53.05 294.61)"><path d="m0 0s0.856-0.415 2.357-0.917c0.702-0.232 2.583-0.096 4.718 0.169" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 52.729 294.94)"><path d="m0 0s1.667-0.751 3.168-1.252" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 54.026 296.32)"><path d="m0 0c0.113 1.304-0.103 2.18-0.51 2.646" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 52.084 300.81)"><path d="m0 0c0.532 0.758 1.301 2.017 2.088 3.472" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 62.157 296.97)"><path d="m0 0c-1.407 0.641-3.092 0.651-4.926-0.107-3.136-1.3-5.901-4.56-7.443-8.38-0.847-2.116-1.355-4.384-1.355-6.596 0-3.921 1.541-6.73 3.882-7.793" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 59.199 300.45)"><path d="m0 0c-0.674-1.684-1.077-3.49-1.077-5.25 0-3.121 1.226-5.356 3.089-6.203" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 62.672 298.07)"><path d="m0 0c-1.12 0.51-2.461 0.518-3.92-0.085" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 64.284 299.83)"><path d="m0 0c-0.405 3.927-2.702 7.016-6.029 8.098" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 58.685 305.04)"><path d="m0 0c2.829-1.306 5.959-0.903 8.694 0.702" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 62.628 299.79)"><path d="m0 0c-0.625 0.285-1.379 0.291-2.19-0.045-1.398-0.58-2.623-2.029-3.317-3.734-0.381-0.935-0.601-1.948-0.601-2.935 0-1.74 0.684-2.992 1.725-3.467" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 61.079 303.38)"><path d="m0 0c0.625-0.285 1.379-0.291 2.19 0.046 1.398 0.579 2.623 2.028 3.318 3.733 0.38 0.935 0.6 1.948 0.6 2.935 0 1.74-0.684 2.992-1.725 3.467" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 50.541 307.68)"><path d="m0 0c0.625-0.285 1.379-0.291 2.19 0.046 1.398 0.579 2.623 2.028 3.318 3.733 0.38 0.935 0.6 1.948 0.6 2.935 0 1.74-0.684 2.992-1.725 3.467" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.3;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 60.007 304.94)"><path d="m0 0c1.243-0.568 2.745-0.579 4.36 0.091 2.782 1.152 5.222 4.038 6.603 7.432 0.758 1.862 1.196 3.878 1.196 5.842 0 3.465-1.362 5.957-3.434 6.903" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g><g transform="matrix(.35278 0 0 -.35278 49.467 309.23)"><path d="m0 0c1.243-0.568 2.745-0.579 4.36 0.091 2.782 1.152 5.222 4.038 6.603 7.432 0.758 1.862 1.196 3.878 1.196 5.842 0 3.465-1.362 5.957-3.434 6.903" style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke-width:.7;stroke:#231f20"/></g></g></g></g></g>';
  sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '</g>';
  return sDis;
}
render_nexta_solo_LED(dim_target, etk, obj) {
  let dimensioni = {
      w: 96.326,
      h: 73.108
  };
  //width="136.38mm" height="89.479mm"
  let info = this.setupCurrentScale(dimensioni, dim_target);
  let sDis = '';
  sDis += '<g>';
  sDis += '<defs><clipPath id="clipPath4987"><path d="m94.963 202.1h456.48v499.64h-456.48z"/></clipPath><clipPath id="clipPath5449"><path d="m94.963 202.1h456.48v499.64h-456.48z"/></clipPath><clipPath id="clipPath9949"><path d="m25.937 43.937h109.02v91.862h-109.02z"/></clipPath><clipPath id="clipPath10007"><path d="m25.937 43.937h109.02v91.862h-109.02z"/></clipPath><clipPath id="clipPath14911"><path d="m123.45 43.937h461.39v111.94h-461.39z"/></clipPath><clipPath id="clipPath19977"><path d="m79.88 301.66h47.107v49.888h-47.107z"/></clipPath><clipPath id="clipPath20061"><path d="m79.88 301.66h47.107v49.888h-47.107z"/></clipPath></defs>';
  sDis += '<g transform="translate(' + info.pos.x + ' ' + info.pos.y + ')" ><g transform="scale(' + info.scale + ')">';
  sDis += '<g transform="translate(-81.582 -126.45)"><g transform="matrix(2.0308 0 0 2.0308 61.273 -249.25)"><g transform="translate(10,185)"><g transform="scale(.26508)"><g transform="translate(-9.669,-81.716)"><g transform="matrix(.35278 0 0 -.35278 2.7159 292.34)"><g clip-path="url(#clipPath4987)"><text transform="matrix(1,0,0,-1,420.7,751.17)" fill="#231f20" font-size="11.06px"><tspan x="0 6.1493602 12.29872 18.44808 21.52276 30.735741" y="0">488 mm</tspan><tspan x="-255.79568 -249.64632 -243.49696 -240.42229 -231.2093" y="-40.7561">52 mm</tspan></text></g><g clip-path="url(#clipPath5449)"><text transform="matrix(0,1,1,0,842.45,117.02)" fill="#ffffff" font-size="6.1557px" font-weight="bold"><tspan x="0 3.3240781 6.6974015 10.347732 12.102106" y="0">STRIP</tspan></text><text transform="matrix(.80002 0 0 -1 815.2 143.77)" fill="#ffffff" font-size="4.3785px" font-weight="bold"><tspan x="0 2.644614 4.7458563 7.7319932" y="0">BLUE</tspan><tspan x="0 2.4738524 5.6127992" y="9.2911768">COM</tspan><tspan x="0 2.4738524 5.6127992" y="18.315266">COM</tspan><tspan x="0 2.4738524 5.6127992" y="27.190485">COM</tspan></text><text transform="matrix(1,0,0,-1,812.24,134.48)" fill="#ffffff" font-size="2.4643px" font-weight="bold"><tspan x="0" y="0">7</tspan><tspan x="0" y="9.0242662">6</tspan><tspan x="0" y="17.97707">5</tspan></text><text transform="matrix(1,0,0,-1,818.56,136.7)" fill="#231f20" font-size="9.48px"><tspan x="0 5.5363202 8.1717596 15.01632 22.39176" y="0">+ COM</tspan></text><g transform="translate(859.39,118.47)"><path d="m0 0c0 2.286-1.852 4.138-4.138 4.138s-4.138-1.852-4.138-4.138c0-2.282 1.852-4.138 4.138-4.138s4.138 1.856 4.138 4.138" fill="#231f20"/></g><g transform="translate(874.05,130.92)"><path d="m0 0c0 1.935-1.593 3.508-3.558 3.508-1.966 0-3.558-1.573-3.558-3.508 0-1.939 1.592-3.508 3.558-3.508 1.965 0 3.558 1.569 3.558 3.508" fill="#eb222c"/><path d="m0 0c0 1.935-1.593 3.508-3.558 3.508-1.966 0-3.558-1.573-3.558-3.508 0-1.939 1.592-3.508 3.558-3.508 1.965 0 3.558 1.569 3.558 3.508z" fill="none" stroke="#eb222c" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.582"/></g><path d="m873.05-3.729h-20.074v96.121h20.074z" fill="#fff"/><g transform="translate(873.05,-3.7295)"><path d="m0 0h-20.074v96.121h20.074z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.311"/></g><text transform="matrix(1,0,0,-1,818.36,107.18)" fill="#231f20" font-size="15.8px"><tspan x="0" y="0">-</tspan></text><g transform="translate(797.31,129.51)"><path d="m0 0c0-2.226-1.804-4.029-4.031-4.029-2.226 0-4.029 1.803-4.029 4.029s1.803 4.031 4.029 4.031c2.227 0 4.031-1.805 4.031-4.031" fill="#e5e4e4"/><path d="m0 0c0-2.226-1.804-4.029-4.031-4.029-2.226 0-4.029 1.803-4.029 4.029s1.803 4.031 4.029 4.031c2.227 0 4.031-1.805 4.031-4.031z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(797.31,117.6)"><path d="m0 0c0-2.226-1.804-4.029-4.031-4.029-2.226 0-4.029 1.803-4.029 4.029s1.803 4.029 4.029 4.029c2.227 0 4.031-1.803 4.031-4.029" fill="#e5e4e4"/><path d="m0 0c0-2.226-1.804-4.029-4.031-4.029-2.226 0-4.029 1.803-4.029 4.029s1.803 4.029 4.029 4.029c2.227 0 4.031-1.803 4.031-4.029z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(790.68,130.36)"><path d="m0 0h4.985" fill="#e5e4e4" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(790.68,128.64)"><path d="m0 0h4.985" fill="#e5e4e4" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(790.68,118.47)"><path d="m0 0h4.985" fill="#e5e4e4" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(790.68,116.74)"><path d="m0 0h4.985" fill="#e5e4e4" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(813.82,64.773)"><path d="m0 0h-170.92v79h170.92z" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width="1.185"/></g><g transform="translate(665.25,97.254)"><path d="m0 0h-30.159" fill="none" stroke="#eb222c" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.58"/></g><g transform="translate(665.16,109.53)"><path d="m0 0h-30.161" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.58"/></g><path d="m646.52 117.09h28.456v-26.174h-28.456z" fill="#4f4c4d"/><g transform="translate(646.52,117.09)"><path d="m0 0h28.456v-26.174h-28.456z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(655.28,90.917)"><path d="m0 0v26.174" fill="#4f4c4d" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(658.39,98.104)"><path d="m0 0c0 2.226 1.804 4.029 4.031 4.029 2.226 0 4.029-1.803 4.029-4.029s-1.803-4.031-4.029-4.031c-2.227 0-4.031 1.805-4.031 4.031" fill="#e5e4e4"/><path d="m0 0c0 2.226 1.804 4.029 4.031 4.029 2.226 0 4.029-1.803 4.029-4.029s-1.803-4.031-4.029-4.031c-2.227 0-4.031 1.805-4.031 4.031z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(658.39,110.02)"><path d="m0 0c0 2.226 1.804 4.029 4.031 4.029 2.226 0 4.029-1.803 4.029-4.029s-1.803-4.029-4.029-4.029c-2.227 0-4.031 1.803-4.031 4.029" fill="#e5e4e4"/><path d="m0 0c0 2.226 1.804 4.029 4.031 4.029 2.226 0 4.029-1.803 4.029-4.029s-1.803-4.029-4.029-4.029c-2.227 0-4.031 1.803-4.031 4.029z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(665.02,97.254)"><path d="m0 0h-4.985" fill="#e5e4e4" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(665.02,98.982)"><path d="m0 0h-4.985" fill="#e5e4e4" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(665.02,109.15)"><path d="m0 0h-4.985" fill="#e5e4e4" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><g transform="translate(665.02,110.88)"><path d="m0 0h-4.985" fill="#e5e4e4" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.232"/></g><path d="m803.53 76.876h-14.282v6.848h14.282z" fill="#fff"/><g transform="translate(803.53,76.876)"><path d="m0 0h-14.282v6.848h14.282z" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width="1.58"/></g><g transform="translate(722.43,128.64)"><path d="m0 0c0-4.653-3.773-8.426-8.426-8.426s-8.428 3.773-8.428 8.426 3.775 8.426 8.428 8.426 8.426-3.773 8.426-8.426" fill="#a7a5a6"/><path d="m0 0c0-4.653-3.773-8.426-8.426-8.426s-8.428 3.773-8.428 8.426 3.775 8.426 8.428 8.426 8.426-3.773 8.426-8.426z" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width="1.58"/></g><g transform="translate(718.74,128.64)"><path d="m0 0c0-2.618-2.124-4.74-4.74-4.74-2.617 0-4.74 2.122-4.74 4.74s2.123 4.74 4.74 4.74c2.616 0 4.74-2.122 4.74-4.74" fill="#fff"/><path d="m0 0c0-2.618-2.124-4.74-4.74-4.74-2.617 0-4.74 2.122-4.74 4.74s2.123 4.74 4.74 4.74c2.616 0 4.74-2.122 4.74-4.74z" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width="1.58"/></g><text transform="matrix(0,1,1,0,833.25,294.82)" fill="#ffffff" font-size="6.1557px" font-weight="bold"><tspan x="0 3.3240781 6.6974015 10.347732 12.102106" y="0">STRIP</tspan></text><text transform="matrix(.80002 0 0 -1 806.01 321.57)" fill="#ffffff" font-size="4.3785px" font-weight="bold"><tspan x="0 2.644614 4.7458563 7.7319932" y="0">BLUE</tspan><tspan x="0 2.4738524 5.6127992" y="9.2911768">COM</tspan><tspan x="0 2.4738524 5.6127992" y="18.315266">COM</tspan><tspan x="0 2.4738524 5.6127992" y="27.190485">COM</tspan></text><text transform="matrix(1,0,0,-1,803.05,312.28)" fill="#ffffff" font-size="2.4643px" font-weight="bold"><tspan x="0" y="0">7</tspan><tspan x="0" y="9.0242662">6</tspan><tspan x="0" y="17.97707">5</tspan></text><text transform="matrix(1,0,0,-1,806.21,314.5)" fill="#231f20" font-size="9.48px"><tspan x="0 5.5363202 8.1717596 15.01632 22.39176" y="0">+ COM</tspan></text><g transform="translate(850.2,293.1)"><path d="m0 0c0 2.286-1.852 4.138-4.138 4.138s-4.138-1.852-4.138-4.138c0-2.281 1.852-4.138 4.138-4.138s4.138 1.857 4.138 4.138" fill="#231f20"/></g><g transform="translate(864.86,308.72)"><path d="m0 0c0 1.935-1.593 3.508-3.558 3.508-1.966 0-3.558-1.573-3.558-3.508 0-1.939 1.592-3.508 3.558-3.508 1.965 0 3.558 1.569 3.558 3.508" fill="#eb222c"/><path d="m0 0c0 1.935-1.593 3.508-3.558 3.508-1.966 0-3.558-1.573-3.558-3.508 0-1.939 1.592-3.508 3.558-3.508 1.965 0 3.558 1.569 3.558 3.508z" fill="none" stroke="#eb222c" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.582"/></g><path d="m863.86 319.98h-20.074v45.006h20.074z" fill="#fff"/><g transform="translate(863.86,319.98)"><path d="m0 0h-20.074v45.006h20.074z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.185"/></g><text transform="matrix(1,0,0,-1,806.01,281.82)" fill="#231f20" font-size="15.8px"><tspan x="0" y="0">-</tspan></text><g transform="translate(745.02,303.29)"><path d="m0 0h-12.18c-0.319 0-0.319 0-0.319 0.321 0 0 0 0.32 0.319 0.32h12.18c0.321 0 0.321-0.32 0.321-0.32 0-0.321 0-0.321-0.321-0.321" fill="#231f20" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g><g transform="translate(745.02,296.88)"><path d="m0 0h-12.18c-0.319 0-0.319 0-0.319 0.319 0 0 0 0.319 0.319 0.319h12.18c0.321 0 0.321-0.319 0.321-0.319 0-0.319 0-0.319-0.321-0.319" fill="#231f20" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g><g transform="translate(766.5,297.2)"><path d="m0 0v-10.896c0-0.322-0.321-0.322-0.321-0.322-0.32 0-0.32 0-0.32 0.322v10.896s0 0.319 0.32 0.319z" fill="#231f20"/><path d="m0 0v-10.896c0-0.322-0.321-0.322-0.321-0.322-0.32 0-0.32 0-0.32 0.322v10.896s0 0.319 0.32 0.319l0.321-0.319" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g><g transform="translate(733.16,297.2)"><path d="m0 0v-10.896c0-0.322-0.321-0.322-0.321-0.322-0.319 0-0.319 0-0.319 0.322v10.896s0 0.319 0.319 0.319z" fill="#231f20"/><path d="m0 0v-10.896c0-0.322-0.321-0.322-0.321-0.322-0.319 0-0.319 0-0.319 0.322v10.896s0 0.319 0.319 0.319l0.321-0.319" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g><g transform="translate(745.35,303.61)"><path d="m 0,0 v -6.41 c 0,-0.319 0,-0.319 -0.321,-0.319 0,0 -0.32,0 -0.32,0.319 V 0 l 0.32,0.321 C 0,0.321 0,0 0,0" fill="#231f20" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g><g transform="translate(754,303.61)"><path d="m 0,0 v -6.41 c 0,-0.319 0,-0.319 -0.321,-0.319 0,0 -0.321,0 -0.321,0.319 V 0 l 0.321,0.321 C 0,0.321 0,0 0,0" fill="#231f20" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g><g transform="translate(766.18,285.98)"><path d="m 0,0 h -33.333 c -0.319,0 -0.319,0 -0.319,0.321 0,0 0,0.32 0.319,0.32 H 0 L 0.321,0.321 C 0.321,0 0,0 0,0" fill="#231f20" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g><g transform="translate(766.18,296.88)"><path d="m 0,0 h -12.498 c 0,0 -0.321,0 -0.321,0.319 l 0.321,0.319 H 0 L 0.321,0.319 C 0.321,0 0,0 0,0" fill="#231f20" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g><g transform="translate(766.18,303.29)"><path d="m 0,0 h -12.498 c 0,0 -0.321,0 -0.321,0.321 l 0.321,0.32 H 0 L 0.321,0.321 C 0.321,0 0,0 0,0" fill="#231f20" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g><g transform="translate(766.5,314.5)"><path d="m0 0v-10.896c0-0.322-0.321-0.322-0.321-0.322-0.32 0-0.32 0-0.32 0.322v10.896s0 0.321 0.32 0.321z" fill="#231f20"/><path d="m0 0v-10.896c0-0.322-0.321-0.322-0.321-0.322-0.32 0-0.32 0-0.32 0.322v10.896s0 0.321 0.32 0.321l0.321-0.321" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g><g transform="translate(733.16,314.5)"><path d="m0 0v-10.896c0-0.322-0.321-0.322-0.321-0.322-0.319 0-0.319 0-0.319 0.322v10.896s0 0.321 0.319 0.321z" fill="#231f20"/><path d="m0 0v-10.896c0-0.322-0.321-0.322-0.321-0.322-0.319 0-0.319 0-0.319 0.322v10.896s0 0.321 0.319 0.321l0.321-0.321" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g><g transform="translate(766.18,314.18)"><path d="m 0,0 h -33.333 c -0.319,0 -0.319,0 -0.319,0.321 0,0 0,0.32 0.319,0.32 H 0 L 0.321,0.321 C 0.321,0 0,0 0,0" fill="#231f20" stroke="#231f20" stroke-miterlimit="10" stroke-width=".79"/></g></g><g clip-path="url(#clipPath9949)"><text transform="matrix(1,0,0,-1,-211.86,47.738)" fill="#231f20" font-size="7.7205px"><tspan x="0 4.2925978 8.5851955 12.877794 15.024093 21.455269" y="0">488 mm</tspan><tspan x="-178.55972 -174.26712 -169.97453 -167.82823 -161.39705" y="-28.450043">52 mm</tspan></text></g><g clip-path="url(#clipPath10007)"><g transform="translate(-362.99,-189.29)"><path d="m0 0c0.346-1.479-0.349-2.905-1.55-3.186-1.202-0.28-2.456 0.689-2.802 2.168-0.345 1.478 0.348 2.905 1.549 3.186 1.202 0.28 2.458-0.691 2.803-2.168" fill="#231f20"/><path d="m0 0c0.346-1.479-0.349-2.905-1.55-3.186-1.202-0.28-2.456 0.689-2.802 2.168-0.345 1.478 0.348 2.905 1.549 3.186 1.202 0.28 2.458-0.691 2.803-2.168z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".505"/></g><g transform="translate(-353.68,-192.98)"><path d="m0 0c0.346-1.479-0.349-2.905-1.55-3.186-1.202-0.28-2.456 0.689-2.802 2.168-0.345 1.478 0.348 2.905 1.549 3.186 1.202 0.28 2.458-0.691 2.803-2.168" fill="#231f20"/><path d="m0 0c0.346-1.479-0.349-2.905-1.55-3.186-1.202-0.28-2.456 0.689-2.802 2.168-0.345 1.478 0.348 2.905 1.549 3.186 1.202 0.28 2.458-0.691 2.803-2.168z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".505"/></g><g transform="translate(-371.7,-185.51)"><path d="m0 0c0.346-1.479-0.349-2.905-1.55-3.186-1.202-0.28-2.456 0.689-2.802 2.168-0.345 1.478 0.348 2.905 1.549 3.186 1.202 0.28 2.458-0.691 2.803-2.168" fill="#231f20"/><path d="m0 0c0.346-1.479-0.349-2.905-1.55-3.186-1.202-0.28-2.456 0.689-2.802 2.168-0.345 1.478 0.348 2.905 1.549 3.186 1.202 0.28 2.458-0.691 2.803-2.168z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".505"/></g><g transform="translate(-305.53,-448.61)"><path d="m0 0-38.189-27.434-16.96 7.074 38.605 26.979z" fill="#d3d2d2"/><path d="m0 0-38.189-27.434-16.96 7.074 38.605 26.979z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".551"/></g><g transform="translate(-305.53,-481.7)"><path d="m0 0v-4.695" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".551"/></g><g transform="translate(-343.72,-513.68)"><path d="m0 0v-10.569l-16.96 7.013v10.449l16.96-6.893 38.189 27.289" fill="#918f90" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".551"/></g><g transform="translate(-343.72,-476.05)"><path d="M 0,0 38.189,27.434 V 22.739 L 0,-4.55" fill="#bdbcbc" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".551"/></g><g transform="translate(-360.68,-473.7)"><path d="m0 0v4.73l16.96-7.074v-4.549z" fill="#bdbcbc"/><path d="m0 0v4.73l16.96-7.074v-4.549z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".551"/></g><g transform="translate(-188.74,-397.72)"><path d="m0 0-15.625 4.596-117.71-81.958 16.544-6.619 116.79 83.981v-12.224l-154.98-114.31v10.569l38.189 27.29v4.694" fill="#918f90" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".551"/></g><g transform="translate(-350.36,-514.8)"><path d="m0 0c0.346-1.479-0.349-2.905-1.55-3.186-1.202-0.28-2.456 0.689-2.802 2.168-0.345 1.478 0.348 2.905 1.549 3.186 1.202 0.28 2.458-0.691 2.803-2.168" fill="#231f20"/><path d="m0 0c0.346-1.479-0.349-2.905-1.55-3.186-1.202-0.28-2.456 0.689-2.802 2.168-0.345 1.478 0.348 2.905 1.549 3.186 1.202 0.28 2.458-0.691 2.803-2.168z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".505"/></g><g transform="translate(-346.87,-472.08)"><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603" fill="#231f20"/><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".375"/></g><g transform="translate(-357.03,-468.35)"><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603" fill="#231f20"/><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".375"/></g><g transform="translate(-313.62,-448.74)"><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603" fill="#231f20"/><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".375"/></g><g transform="translate(-323.77,-445.01)"><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603" fill="#231f20"/><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".375"/></g><g transform="translate(-354.5,-181.69)"><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603" fill="#231f20"/><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".375"/></g><g transform="translate(-372.4,-174.32)"><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.198-0.759 2.171-1.604-0.029-0.843-1.048-1.495-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603" fill="#231f20"/><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.198-0.759 2.171-1.604-0.029-0.843-1.048-1.495-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".375"/></g><g transform="translate(-313.53,-151.73)"><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603" fill="#231f20"/><path d="m0 0c0.028 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.494-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".375"/></g><g transform="translate(-331.74,-144.54)"><path d="m0 0c0.026 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.495-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603" fill="#231f20"/><path d="m0 0c0.026 0.845 1.048 1.494 2.273 1.454 1.228-0.042 2.199-0.759 2.171-1.604-0.029-0.843-1.048-1.495-2.275-1.453-1.226 0.041-2.199 0.759-2.169 1.603z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".375"/></g><g transform="translate(-305.53,-486.4)"><path d="m0 0-38.189-27.289-16.96 6.894 38.605 26.888v4.821l16.544-6.619z" fill="#231f20"/><path d="m0 0-38.189-27.289-16.96 6.894 38.605 26.888v4.821l16.544-6.619z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".551"/></g><g transform="translate(-354,-452.25)"><path d="m0 0-0.019-3.599s0.031-1.206-0.753-1.778l-0.148 1e-3c-0.777 0.579-0.732 1.787-0.732 1.787l0.017 3.6" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".386"/></g><g transform="translate(-355.61,-454.01)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.798-0.518 0.443-3e-3 0.802 0.226 0.805 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-355.62,-454.51)"><path d="m0 0c-1e-3 -0.283 0.355-0.515 0.799-0.517 0.441-3e-3 0.801 0.225 0.802 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-355.62,-455.03)"><path d="m0 0c-1e-3 -0.282 0.355-0.514 0.799-0.517 0.441-3e-3 0.801 0.225 0.804 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-355.62,-455.59)"><path d="m0 0c-2e-3 -0.282 0.355-0.514 0.799-0.517 0.442-3e-3 0.801 0.225 0.802 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-355.63,-456.09)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.799-0.517 0.442-2e-3 0.801 0.224 0.804 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-355.61,-453.45)"><path d="m0 0c-1e-3 -0.282 0.356-0.514 0.799-0.517 0.442-2e-3 0.801 0.225 0.804 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-355.61,-452.95)"><path d="m0 0c-1e-3 -0.282 0.356-0.514 0.797-0.516 0.443-2e-3 0.803 0.224 0.804 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-355.49,-456.81)"><path d="m0 0c0.083-0.182 0.336-0.315 0.639-0.318 0.302-2e-3 0.558 0.132 0.643 0.315" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-355.61,-452.47)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.797-0.517 0.443-4e-3 0.803 0.224 0.804 0.506" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-355.59,-452.2)" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0-0.828 0.931c-0.14 0.149-0.22 0.319-0.22 0.501v0.125c0 0.58 0.817 1.053 1.824 1.053 1.009 0 1.827-0.473 1.827-1.053v-0.125c-1e-3 -0.182-0.081-0.352-0.221-0.501l-0.828-0.93" fill="#fff" stroke-width=".467"/><path d="m0 0c0.142-0.163 0.438-0.277 0.776-0.277 0.341 0 0.635 0.114 0.778 0.278" fill="none" stroke-width=".156"/></g><g transform="translate(-354.82,-450.88)"><path d="m0 0 0.705-0.293 0.146 0.086 0.148 0.085-0.507 0.407 0.507 0.407-0.148 0.084-0.146 0.085-0.705-0.292-0.706 0.292-0.147-0.085-0.147-0.084 0.507-0.407-0.507-0.407 0.147-0.085 0.147-0.086z" fill="#231f20"/><path d="M 0,0 0.705,-0.293 0.851,-0.207 0.999,-0.122 0.492,0.285 0.999,0.692 0.851,0.776 0.705,0.861 0,0.569 -0.706,0.861 -0.853,0.776 -1,0.692 -0.493,0.285 -1,-0.122 -0.853,-0.207 -0.706,-0.293 0,0" fill="none" stroke="#fff" stroke-width=".233"/></g><g transform="translate(-356.41,-451.27)"><path d="m0 0c0.309-0.329 0.912-0.553 1.605-0.553s1.296 0.224 1.606 0.553" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".156"/></g><g transform="translate(-356.63,-450.64)"><path d="m0 0c0-0.581 0.817-1.053 1.824-1.053 1.008 0 1.827 0.472 1.827 1.053" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".156"/></g><g transform="translate(-354.76,-457.63)"><path d="m0 0v-10.197" fill="none" stroke="#231f20" stroke-dasharray="1.285" stroke-linecap="round" stroke-linejoin="round" stroke-width=".257"/></g><g transform="translate(-320.74,-429.48)"><path d="m0 0-0.019-3.599s0.031-1.206-0.753-1.778l-0.148 1e-3c-0.777 0.579-0.732 1.787-0.732 1.787l0.017 3.6" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".386"/></g><g transform="translate(-322.36,-431.24)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.799-0.518 0.442-3e-3 0.801 0.226 0.804 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-322.36,-431.74)"><path d="m0 0c-1e-3 -0.283 0.355-0.515 0.798-0.517 0.442-3e-3 0.802 0.225 0.803 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-322.36,-432.26)"><path d="m0 0c-1e-3 -0.282 0.355-0.514 0.799-0.517 0.441-2e-3 0.801 0.225 0.804 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-322.37,-432.82)"><path d="m0 0c-2e-3 -0.282 0.355-0.514 0.799-0.517 0.442-2e-3 0.801 0.225 0.802 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-322.37,-433.32)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.799-0.517 0.442-3e-3 0.801 0.224 0.804 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-322.36,-430.68)"><path d="m0 0c-1e-3 -0.282 0.356-0.514 0.799-0.517 0.442-3e-3 0.801 0.225 0.804 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-322.35,-430.18)"><path d="m0 0c-1e-3 -0.282 0.356-0.514 0.797-0.516 0.443-2e-3 0.803 0.224 0.804 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-322.23,-434.04)"><path d="m0 0c0.083-0.182 0.336-0.315 0.639-0.318 0.302-2e-3 0.558 0.132 0.643 0.315" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-322.35,-429.7)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.797-0.517 0.443-4e-3 0.803 0.224 0.804 0.506" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-322.33,-429.43)" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0-0.828 0.931c-0.14 0.149-0.22 0.319-0.22 0.501v0.125c0 0.58 0.817 1.052 1.824 1.052 1.009 0 1.827-0.472 1.827-1.052v-0.125c-1e-3 -0.182-0.081-0.352-0.221-0.501l-0.828-0.93" fill="#fff" stroke-width=".467"/><path d="m0 0c0.142-0.163 0.438-0.277 0.776-0.277 0.341 0 0.635 0.114 0.778 0.278" fill="none" stroke-width=".156"/></g><g transform="translate(-321.56,-428.11)"><path d="m0 0 0.705-0.293 0.146 0.086 0.148 0.085-0.507 0.407 0.507 0.407-0.148 0.084-0.146 0.085-0.705-0.292-0.706 0.292-0.147-0.085-0.147-0.084 0.507-0.407-0.507-0.407 0.147-0.085 0.147-0.086z" fill="#231f20"/><path d="M 0,0 0.705,-0.293 0.851,-0.207 0.999,-0.122 0.492,0.285 0.999,0.692 0.851,0.776 0.705,0.861 0,0.569 -0.706,0.861 -0.853,0.776 -1,0.692 -0.493,0.285 -1,-0.122 -0.853,-0.207 -0.706,-0.293 0,0" fill="none" stroke="#fff" stroke-width=".233"/></g><g transform="translate(-323.16,-428.5)"><path d="m0 0c0.309-0.329 0.912-0.553 1.605-0.553s1.296 0.224 1.606 0.553" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".156"/></g><g transform="translate(-323.38,-427.87)"><path d="m0 0c0-0.581 0.817-1.053 1.824-1.053 1.008 0 1.827 0.472 1.827 1.053" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".156"/></g><g transform="translate(-321.5,-434.86)"><path d="m0 0v-10.197" fill="none" stroke="#231f20" stroke-dasharray="1.285" stroke-linecap="round" stroke-linejoin="round" stroke-width=".257"/></g><g transform="translate(-343.75,-455.5)"><path d="m0 0-0.019-3.599s0.031-1.206-0.753-1.778l-0.148 1e-3c-0.777 0.579-0.732 1.787-0.732 1.787l0.017 3.6" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".386"/></g><g transform="translate(-345.37,-457.26)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.798-0.518 0.443-3e-3 0.802 0.226 0.805 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-345.37,-457.76)"><path d="m0 0c-1e-3 -0.283 0.355-0.515 0.799-0.517 0.441-3e-3 0.801 0.225 0.802 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-345.37,-458.29)"><path d="m0 0c-1e-3 -0.282 0.355-0.514 0.799-0.517 0.441-3e-3 0.801 0.225 0.804 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-345.38,-458.84)"><path d="m0 0c-2e-3 -0.282 0.355-0.514 0.799-0.517 0.442-2e-3 0.801 0.225 0.802 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-345.38,-459.34)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.799-0.517 0.442-2e-3 0.801 0.224 0.804 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-345.36,-456.71)"><path d="m0 0c-1e-3 -0.282 0.356-0.514 0.799-0.517 0.442-2e-3 0.801 0.225 0.804 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-345.36,-456.21)"><path d="m0 0c-1e-3 -0.282 0.356-0.514 0.797-0.516 0.443-2e-3 0.803 0.224 0.804 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-345.24,-460.06)"><path d="m0 0c0.083-0.182 0.336-0.315 0.639-0.318 0.302-2e-3 0.558 0.132 0.643 0.315" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-345.36,-455.73)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.797-0.517 0.443-4e-3 0.803 0.224 0.804 0.506" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-345.34,-455.45)" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0-0.828 0.931c-0.14 0.149-0.22 0.319-0.22 0.501v0.125c0 0.58 0.817 1.053 1.824 1.053 1.009 0 1.827-0.473 1.827-1.053v-0.125c-1e-3 -0.182-0.081-0.352-0.221-0.501l-0.828-0.93" fill="#fff" stroke-width=".467"/><path d="m0 0c0.142-0.163 0.438-0.277 0.776-0.277 0.341 0 0.635 0.114 0.778 0.278" fill="none" stroke-width=".156"/></g><g transform="translate(-344.57,-454.14)"><path d="m0 0 0.705-0.293 0.146 0.086 0.148 0.085-0.507 0.407 0.507 0.407-0.148 0.084-0.146 0.085-0.705-0.292-0.706 0.292-0.147-0.085-0.147-0.084 0.507-0.407-0.507-0.407 0.147-0.085 0.147-0.086z" fill="#231f20"/><path d="M 0,0 0.705,-0.293 0.851,-0.207 0.999,-0.122 0.492,0.285 0.999,0.692 0.851,0.776 0.705,0.861 0,0.569 -0.706,0.861 -0.853,0.776 -1,0.692 -0.493,0.285 -1,-0.122 -0.853,-0.207 -0.706,-0.293 0,0" fill="none" stroke="#fff" stroke-width=".233"/></g><g transform="translate(-346.17,-454.52)"><path d="m0 0c0.309-0.329 0.912-0.553 1.605-0.553s1.296 0.224 1.606 0.553" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".156"/></g><g transform="translate(-346.39,-453.9)"><path d="m0 0c0-0.581 0.817-1.053 1.824-1.053 1.008 0 1.827 0.472 1.827 1.053" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".156"/></g><g transform="translate(-344.51,-460.88)"><path d="m0 0v-10.197" fill="none" stroke="#231f20" stroke-dasharray="1.285" stroke-linecap="round" stroke-linejoin="round" stroke-width=".257"/></g><g transform="translate(-310.5,-432.73)"><path d="m0 0-0.019-3.599s0.031-1.206-0.753-1.778l-0.148 1e-3c-0.777 0.579-0.732 1.787-0.732 1.787l0.017 3.6" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".386"/></g><g transform="translate(-312.11,-434.49)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.799-0.518 0.442-3e-3 0.801 0.226 0.804 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-312.11,-434.99)"><path d="m0 0c-1e-3 -0.283 0.355-0.515 0.799-0.517 0.441-2e-3 0.801 0.225 0.802 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-312.12,-435.51)"><path d="m0 0c-1e-3 -0.282 0.355-0.514 0.798-0.517 0.442-2e-3 0.802 0.225 0.805 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-312.12,-436.07)"><path d="m0 0c-2e-3 -0.282 0.355-0.514 0.799-0.517 0.442-2e-3 0.801 0.225 0.802 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-312.12,-436.57)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.799-0.517 0.442-3e-3 0.801 0.224 0.804 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-312.11,-433.93)"><path d="m0 0c-1e-3 -0.282 0.356-0.514 0.798-0.517 0.443-3e-3 0.802 0.225 0.805 0.508" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-312.11,-433.43)"><path d="m0 0c-1e-3 -0.282 0.356-0.514 0.797-0.516 0.443-2e-3 0.803 0.224 0.804 0.507" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-311.99,-437.29)"><path d="m0 0c0.083-0.182 0.336-0.315 0.639-0.318 0.302-2e-3 0.558 0.132 0.643 0.315" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-312.11,-432.96)"><path d="m0 0c-1e-3 -0.283 0.356-0.515 0.797-0.517 0.443-4e-3 0.803 0.224 0.804 0.506" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".129"/></g><g transform="translate(-312.08,-432.68)" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0-0.828 0.931c-0.14 0.149-0.22 0.319-0.22 0.501v0.125c0 0.58 0.817 1.052 1.824 1.052 1.009 0 1.827-0.472 1.827-1.052v-0.125c-1e-3 -0.182-0.081-0.352-0.221-0.501l-0.828-0.93" fill="#fff" stroke-width=".467"/><path d="m0 0c0.142-0.163 0.438-0.277 0.776-0.277 0.341 0 0.635 0.114 0.778 0.278" fill="none" stroke-width=".156"/></g><g transform="translate(-311.32,-431.37)"><path d="m0 0 0.705-0.293 0.146 0.086 0.148 0.085-0.507 0.407 0.507 0.407-0.148 0.084-0.146 0.085-0.705-0.292-0.706 0.292-0.147-0.085-0.147-0.084 0.507-0.407-0.507-0.407 0.147-0.085 0.147-0.086z" fill="#231f20"/><path d="M 0,0 0.705,-0.293 0.851,-0.207 0.999,-0.122 0.492,0.285 0.999,0.692 0.851,0.776 0.705,0.861 0,0.569 -0.706,0.861 -0.853,0.776 -1,0.692 -0.493,0.285 -1,-0.122 -0.853,-0.207 -0.706,-0.293 0,0" fill="none" stroke="#fff" stroke-width=".233"/></g><g transform="translate(-312.91,-431.75)"><path d="m0 0c0.309-0.329 0.912-0.553 1.605-0.553 0.694 0 1.296 0.224 1.606 0.553" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".156"/></g><g transform="translate(-313.13,-431.13)"><path d="m0 0c0-0.581 0.817-1.053 1.824-1.053 1.008 0 1.827 0.472 1.827 1.053" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".156"/></g><g transform="translate(-311.26,-438.11)"><path d="m0 0v-10.197" fill="none" stroke="#231f20" stroke-dasharray="1.285" stroke-linecap="round" stroke-linejoin="round" stroke-width=".257"/></g></g><g clip-path="url(#clipPath14911)"><g transform="translate(176.86,-213.22)"><path d="m0 0c0.415-1.774-0.418-3.484-1.858-3.821-1.442-0.336-2.946 0.827-3.361 2.6-0.414 1.773 0.418 3.484 1.858 3.821 1.441 0.336 2.947-0.829 3.361-2.6" fill="#231f20"/><path d="m0 0c0.415-1.774-0.418-3.484-1.858-3.821-1.442-0.336-2.946 0.827-3.361 2.6-0.414 1.773 0.418 3.484 1.858 3.821 1.441 0.336 2.947-0.829 3.361-2.6z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".606"/></g><g transform="translate(188.02,-217.64)"><path d="m0 0c0.415-1.773-0.418-3.484-1.858-3.821-1.442-0.336-2.946 0.827-3.361 2.6-0.414 1.773 0.418 3.484 1.858 3.821 1.441 0.336 2.947-0.829 3.361-2.6" fill="#231f20"/><path d="m0 0c0.415-1.773-0.418-3.484-1.858-3.821-1.442-0.336-2.946 0.827-3.361 2.6-0.414 1.773 0.418 3.484 1.858 3.821 1.441 0.336 2.947-0.829 3.361-2.6z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".606"/></g><g transform="translate(166.41,-208.68)"><path d="m0 0c0.415-1.774-0.418-3.484-1.858-3.821-1.442-0.336-2.945 0.827-3.361 2.6-0.414 1.772 0.418 3.484 1.858 3.821 1.441 0.336 2.947-0.829 3.361-2.6" fill="#231f20"/><path d="m0 0c0.415-1.774-0.418-3.484-1.858-3.821-1.442-0.336-2.945 0.827-3.361 2.6-0.414 1.772 0.418 3.484 1.858 3.821 1.441 0.336 2.947-0.829 3.361-2.6z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".606"/></g><g transform="translate(245.77,-524.18)"><path d="m0 0-45.793-32.897-20.339 8.483 46.294 32.351z" fill="#d3d2d2"/><path d="m0 0-45.793-32.897-20.339 8.483 46.294 32.351z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".661"/></g><g transform="translate(245.77,-563.85)"><path d="m0 0v-5.63" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".661"/></g><g transform="translate(199.97,-602.21)"><path d="m0 0v-12.674l-20.337 8.41v12.53l20.337-8.266 45.793 32.723" fill="#918f90" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".661"/></g><g transform="translate(199.97,-557.07)"><path d="m 0,0 45.793,32.897 v -5.63 L 0,-5.456" fill="#bdbcbc" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".661"/></g><g transform="translate(179.63,-554.26)"><path d="m0 0v5.672l20.337-8.482v-5.456z" fill="#bdbcbc"/><path d="m0 0v5.672l20.337-8.482v-5.456z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".661"/></g><g transform="translate(385.81,-463.15)"><path d="m0 0-18.737 5.511-141.14-98.279 19.838-7.936 140.04 100.7v-14.658l-185.84-137.07v12.674l45.793 32.724v5.629" fill="#918f90" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".661"/></g><g transform="translate(192,-603.54)"><path d="m0 0c0.415-1.774-0.418-3.484-1.858-3.821-1.442-0.336-2.946 0.827-3.361 2.6-0.414 1.772 0.418 3.484 1.858 3.821 1.441 0.336 2.947-0.829 3.361-2.6" fill="#231f20"/><path d="m0 0c0.415-1.774-0.418-3.484-1.858-3.821-1.442-0.336-2.946 0.827-3.361 2.6-0.414 1.772 0.418 3.484 1.858 3.821 1.441 0.336 2.947-0.829 3.361-2.6z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".606"/></g><g transform="translate(196.19,-552.31)"><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922" fill="#231f20"/><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".45"/></g><g transform="translate(184.01,-547.84)"><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922" fill="#231f20"/><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".45"/></g><g transform="translate(236.06,-524.33)"><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922" fill="#231f20"/><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".45"/></g><g transform="translate(223.89,-519.86)"><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922" fill="#231f20"/><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".45"/></g><g transform="translate(187.04,-204.1)"><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922" fill="#231f20"/><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".45"/></g><g transform="translate(165.58,-195.26)"><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.636-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922" fill="#231f20"/><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.636-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".45"/></g><g transform="translate(236.17,-168.18)"><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922" fill="#231f20"/><path d="m0 0c0.033 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".45"/></g><g transform="translate(214.34,-159.55)"><path d="m0 0c0.032 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922" fill="#231f20"/><path d="m0 0c0.032 1.013 1.256 1.792 2.726 1.743 1.472-0.05 2.637-0.91 2.603-1.923-0.035-1.01-1.257-1.792-2.728-1.742-1.47 0.049-2.637 0.91-2.601 1.922z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".45"/></g><g transform="translate(245.77,-569.48)"><path d="m0 0-45.793-32.723-20.339 8.266 46.294 32.243v5.781l19.838-7.937z" fill="#231f20"/><path d="m0 0-45.793-32.723-20.339 8.266 46.294 32.243v5.781l19.838-7.937z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".661"/></g><g transform="translate(187.64,-528.54)"><path d="m0 0-0.022-4.315s0.037-1.447-0.904-2.132l-0.177 1e-3c-0.932 0.694-0.878 2.142-0.878 2.142l0.021 4.317" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".463"/></g><g transform="translate(185.7,-530.65)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.958-0.622 0.53-2e-3 0.961 0.271 0.964 0.61" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(185.7,-531.25)"><path d="m0 0c-1e-3 -0.34 0.426-0.618 0.958-0.62 0.529-3e-3 0.961 0.27 0.962 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(185.7,-531.87)"><path d="m0 0c-1e-3 -0.339 0.426-0.616 0.958-0.62 0.529-3e-3 0.961 0.269 0.964 0.609" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(185.69,-532.54)"><path d="m0 0c-3e-3 -0.339 0.426-0.616 0.958-0.62 0.53-3e-3 0.961 0.27 0.962 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(185.69,-533.14)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.958-0.62 0.53-3e-3 0.961 0.268 0.964 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(185.71,-529.98)"><path d="m0 0c-1e-3 -0.339 0.427-0.616 0.958-0.62 0.53-3e-3 0.961 0.27 0.964 0.609" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(185.71,-529.38)"><path d="m0 0c-1e-3 -0.339 0.427-0.616 0.956-0.619 0.531-3e-3 0.963 0.269 0.964 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(185.86,-534)"><path d="m0 0c0.099-0.218 0.403-0.378 0.766-0.381 0.362-3e-3 0.669 0.157 0.771 0.377" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(185.71,-528.81)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.956-0.62 0.531-4e-3 0.963 0.268 0.964 0.607" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(185.74,-528.48)" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0-0.993 1.116c-0.168 0.179-0.263 0.382-0.263 0.601v0.15c0 0.696 0.98 1.262 2.187 1.262 1.209 0 2.19-0.566 2.19-1.262v-0.15c-1e-3 -0.219-0.096-0.422-0.264-0.601l-0.994-1.115" fill="#fff" stroke-width=".559"/><path d="m0 0c0.171-0.196 0.525-0.332 0.931-0.332 0.409 0 0.761 0.136 0.932 0.333" fill="none" stroke-width=".186"/></g><g transform="translate(186.66,-526.9)"><path d="m0 0 0.845-0.352 0.176 0.103 0.177 0.102-0.608 0.488 0.608 0.488-0.177 0.102-0.176 0.102-0.845-0.351-0.846 0.351-0.176-0.102-0.178-0.102 0.609-0.488-0.609-0.488 0.178-0.102 0.176-0.103z" fill="#231f20"/><path d="M 0,0 0.845,-0.352 1.021,-0.249 1.198,-0.147 0.59,0.341 1.198,0.829 1.021,0.931 0.845,1.033 0,0.682 -0.846,1.033 -1.022,0.931 -1.2,0.829 -0.591,0.341 -1.2,-0.147 -1.022,-0.249 -0.846,-0.352 0,0" fill="none" stroke="#fff" stroke-width=".279"/></g><g transform="translate(184.75,-527.36)"><path d="m0 0c0.37-0.394 1.094-0.663 1.924-0.663 0.832 0 1.554 0.269 1.926 0.663" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".186"/></g><g transform="translate(184.48,-526.61)"><path d="m0 0c0-0.697 0.98-1.263 2.188-1.263s2.19 0.566 2.19 1.263" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".186"/></g><g transform="translate(186.73,-534.99)"><path d="m0 0v-12.227" fill="none" stroke="#231f20" stroke-dasharray="1.541" stroke-linecap="round" stroke-linejoin="round" stroke-width=".308"/></g><g transform="translate(227.52,-501.23)"><path d="m0 0-0.022-4.315s0.037-1.447-0.904-2.132l-0.177 1e-3c-0.932 0.694-0.878 2.142-0.878 2.142l0.021 4.317" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".463"/></g><g transform="translate(225.58,-503.34)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.958-0.622 0.53-2e-3 0.961 0.272 0.964 0.61" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(225.58,-503.94)"><path d="m0 0c-1e-3 -0.34 0.426-0.618 0.958-0.62 0.529-3e-3 0.961 0.27 0.962 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(225.58,-504.57)"><path d="m0 0c-1e-3 -0.339 0.426-0.616 0.958-0.62 0.529-3e-3 0.961 0.27 0.964 0.609" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(225.57,-505.24)"><path d="m0 0c-3e-3 -0.339 0.426-0.616 0.958-0.62 0.53-3e-3 0.961 0.27 0.962 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(225.57,-505.84)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.958-0.62 0.53-3e-3 0.961 0.268 0.964 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(225.59,-502.68)"><path d="m0 0c-1e-3 -0.339 0.427-0.616 0.958-0.62 0.53-3e-3 0.961 0.27 0.964 0.609" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(225.59,-502.07)"><path d="m0 0c-1e-3 -0.339 0.427-0.616 0.956-0.619 0.531-3e-3 0.963 0.269 0.964 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(225.74,-506.7)"><path d="m0 0c0.099-0.218 0.403-0.378 0.766-0.381 0.362-3e-3 0.669 0.157 0.771 0.377" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(225.59,-501.5)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.956-0.62 0.531-4e-3 0.963 0.268 0.964 0.607" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(225.62,-501.17)" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0-0.993 1.116c-0.168 0.179-0.263 0.382-0.263 0.601v0.15c0 0.696 0.98 1.262 2.187 1.262 1.209 0 2.19-0.566 2.19-1.262v-0.15c-1e-3 -0.219-0.096-0.422-0.264-0.601l-0.994-1.115" fill="#fff" stroke-width=".559"/><path d="m0 0c0.171-0.196 0.525-0.332 0.931-0.332 0.409 0 0.761 0.136 0.932 0.333" fill="none" stroke-width=".186"/></g><g transform="translate(226.54,-499.59)"><path d="m0 0 0.845-0.352 0.176 0.103 0.177 0.102-0.608 0.488 0.608 0.488-0.177 0.102-0.176 0.102-0.845-0.351-0.846 0.351-0.176-0.102-0.178-0.102 0.609-0.488-0.609-0.488 0.178-0.102 0.176-0.103z" fill="#231f20"/><path d="M 0,0 0.845,-0.352 1.021,-0.249 1.198,-0.147 0.59,0.341 1.198,0.829 1.021,0.931 0.845,1.033 0,0.682 -0.846,1.033 -1.022,0.931 -1.2,0.829 -0.591,0.341 -1.2,-0.147 -1.022,-0.249 -0.846,-0.352 0,0" fill="none" stroke="#fff" stroke-width=".279"/></g><g transform="translate(224.62,-500.06)"><path d="m0 0c0.37-0.394 1.094-0.663 1.924-0.663 0.832 0 1.554 0.269 1.926 0.663" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".186"/></g><g transform="translate(224.36,-499.31)"><path d="m0 0c0-0.697 0.98-1.263 2.188-1.263s2.19 0.566 2.19 1.263" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".186"/></g><g transform="translate(226.61,-507.68)"><path d="m0 0v-12.227" fill="none" stroke="#231f20" stroke-dasharray="1.541" stroke-linecap="round" stroke-linejoin="round" stroke-width=".308"/></g><g transform="translate(199.93,-532.44)"><path d="m0 0-0.022-4.315s0.037-1.447-0.904-2.132l-0.177 1e-3c-0.932 0.694-0.878 2.142-0.878 2.142l0.021 4.317" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".463"/></g><g transform="translate(197.99,-534.55)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.958-0.622 0.53-2e-3 0.961 0.272 0.964 0.61" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(197.99,-535.15)"><path d="m0 0c-1e-3 -0.34 0.426-0.618 0.958-0.62 0.529-3e-3 0.961 0.269 0.962 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(197.99,-535.78)"><path d="m0 0c-1e-3 -0.339 0.426-0.616 0.958-0.62 0.529-3e-3 0.961 0.269 0.964 0.609" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(197.98,-536.44)"><path d="m0 0c-3e-3 -0.339 0.426-0.616 0.958-0.62 0.53-3e-3 0.961 0.269 0.962 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(197.98,-537.04)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.958-0.62 0.53-3e-3 0.961 0.268 0.964 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(198,-533.88)"><path d="m0 0c-1e-3 -0.339 0.427-0.616 0.958-0.62 0.53-3e-3 0.961 0.27 0.964 0.609" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(198,-533.28)"><path d="m0 0c-1e-3 -0.339 0.427-0.616 0.956-0.619 0.531-3e-3 0.963 0.269 0.964 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(198.14,-537.9)"><path d="m0 0c0.099-0.218 0.403-0.378 0.766-0.381 0.362-3e-3 0.669 0.157 0.771 0.377" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(198,-532.71)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.956-0.62 0.531-4e-3 0.963 0.268 0.964 0.607" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(198.03,-532.38)" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0-0.993 1.116c-0.168 0.179-0.263 0.382-0.263 0.601v0.15c0 0.696 0.98 1.262 2.187 1.262 1.209 0 2.19-0.566 2.19-1.262v-0.15c-1e-3 -0.219-0.096-0.422-0.264-0.601l-0.994-1.115" fill="#fff" stroke-width=".559"/><path d="m0 0c0.171-0.196 0.525-0.332 0.931-0.332 0.409 0 0.761 0.136 0.932 0.333" fill="none" stroke-width=".186"/></g><g transform="translate(198.95,-530.8)"><path d="m0 0 0.845-0.352 0.176 0.103 0.177 0.102-0.608 0.488 0.608 0.488-0.177 0.102-0.176 0.102-0.845-0.351-0.846 0.351-0.176-0.102-0.178-0.102 0.609-0.488-0.609-0.488 0.178-0.102 0.176-0.103z" fill="#231f20"/><path d="M 0,0 0.845,-0.352 1.021,-0.249 1.198,-0.147 0.59,0.341 1.198,0.829 1.021,0.931 0.845,1.033 0,0.682 -0.846,1.033 -1.022,0.931 -1.2,0.829 -0.591,0.341 -1.2,-0.147 -1.022,-0.249 -0.846,-0.352 0,0" fill="none" stroke="#fff" stroke-width=".279"/></g><g transform="translate(197.03,-531.26)"><path d="m0 0c0.37-0.394 1.094-0.663 1.924-0.663 0.832 0 1.554 0.269 1.926 0.663" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".186"/></g><g transform="translate(196.77,-530.51)"><path d="m0 0c0-0.697 0.98-1.263 2.188-1.263s2.19 0.566 2.19 1.263" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".186"/></g><g transform="translate(199.02,-538.89)"><path d="m0 0v-12.227" fill="none" stroke="#231f20" stroke-dasharray="1.541" stroke-linecap="round" stroke-linejoin="round" stroke-width=".308"/></g><g transform="translate(239.81,-505.13)"><path d="m0 0-0.022-4.315s0.037-1.447-0.904-2.132l-0.177 1e-3c-0.932 0.694-0.878 2.142-0.878 2.142l0.021 4.317" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".463"/></g><g transform="translate(237.87,-507.24)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.958-0.622 0.53-2e-3 0.961 0.272 0.964 0.61" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(237.87,-507.85)"><path d="m0 0c-1e-3 -0.34 0.426-0.618 0.958-0.62 0.529-3e-3 0.961 0.27 0.962 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(237.86,-508.47)"><path d="m0 0c-1e-3 -0.339 0.426-0.616 0.958-0.62 0.529-3e-3 0.961 0.27 0.964 0.609" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(237.86,-509.14)"><path d="m0 0c-3e-3 -0.339 0.426-0.616 0.958-0.62 0.53-3e-3 0.961 0.27 0.962 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(237.86,-509.74)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.958-0.62 0.53-3e-3 0.961 0.268 0.964 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(237.87,-506.58)"><path d="m0 0c-1e-3 -0.339 0.427-0.616 0.958-0.62 0.53-3e-3 0.961 0.27 0.964 0.609" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(237.88,-505.97)"><path d="m0 0c-1e-3 -0.339 0.427-0.616 0.956-0.619 0.531-3e-3 0.963 0.269 0.964 0.608" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(238.02,-510.6)"><path d="m0 0c0.099-0.218 0.403-0.378 0.766-0.381 0.362-3e-3 0.669 0.157 0.771 0.377" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(237.88,-505.4)"><path d="m0 0c-1e-3 -0.34 0.427-0.618 0.956-0.62 0.531-4e-3 0.963 0.268 0.964 0.607" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".155"/></g><g transform="translate(237.91,-505.07)" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round"><path d="m0 0-0.993 1.116c-0.168 0.179-0.263 0.382-0.263 0.601v0.15c0 0.696 0.98 1.262 2.187 1.262 1.209 0 2.19-0.566 2.19-1.262v-0.15c-1e-3 -0.219-0.096-0.422-0.264-0.601l-0.994-1.115" fill="#fff" stroke-width=".559"/><path d="m0 0c0.171-0.196 0.525-0.332 0.931-0.332 0.409 0 0.761 0.136 0.932 0.333" fill="none" stroke-width=".186"/></g><g transform="translate(238.83,-503.5)"><path d="m0 0 0.845-0.352 0.176 0.103 0.177 0.102-0.608 0.488 0.608 0.488-0.177 0.102-0.176 0.102-0.845-0.351-0.846 0.351-0.176-0.102-0.178-0.102 0.609-0.488-0.609-0.488 0.178-0.102 0.176-0.103z" fill="#231f20"/><path d="M 0,0 0.845,-0.352 1.021,-0.249 1.198,-0.147 0.59,0.341 1.198,0.829 1.021,0.931 0.845,1.033 0,0.682 -0.846,1.033 -1.022,0.931 -1.2,0.829 -0.591,0.341 -1.2,-0.147 -1.022,-0.249 -0.846,-0.352 0,0" fill="none" stroke="#fff" stroke-width=".279"/></g><g transform="translate(236.91,-503.96)"><path d="m0 0c0.37-0.394 1.094-0.663 1.924-0.663 0.832 0 1.554 0.269 1.926 0.663" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".186"/></g><g transform="translate(236.65,-503.21)"><path d="m0 0c0-0.697 0.98-1.263 2.188-1.263s2.19 0.566 2.19 1.263" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".186"/></g><g transform="translate(238.89,-511.58)"><path d="m0 0v-12.227" fill="none" stroke="#231f20" stroke-dasharray="1.541" stroke-linecap="round" stroke-linejoin="round" stroke-width=".308"/></g></g><g clip-path="url(#clipPath19977)"><g transform="translate(123.78,418.05)"><path d="m0 0c0-11.024-8.938-19.961-19.961-19.961s-19.961 8.937-19.961 19.961c0 11.022 8.938 19.959 19.961 19.959s19.961-8.937 19.961-19.959" fill="#24304f"/><path d="m0 0c0-11.024-8.938-19.961-19.961-19.961s-19.961 8.937-19.961 19.961c0 11.022 8.938 19.959 19.961 19.959s19.961-8.937 19.961-19.959z" fill="none" stroke="#24304f" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="3.864" stroke-width=".245"/></g></g><g clip-path="url(#clipPath20061)"><text transform="matrix(1,0,0,-1,128.37,320.26)" fill="#24304f" font-size="31.466px" font-weight="bold"><tspan x="0" y="0">/</tspan></text><g transform="translate(180.42,330.57)"><path d="m0 0c0-11.024-8.937-19.961-19.961-19.961-11.023 0-19.96 8.937-19.96 19.961 0 11.022 8.937 19.959 19.96 19.959 11.024 0 19.961-8.937 19.961-19.959" fill="#24304f"/><path d="m0 0c0-11.024-8.937-19.961-19.961-19.961-11.023 0-19.96 8.937-19.96 19.961 0 11.022 8.937 19.959 19.96 19.959 11.024 0 19.961-8.937 19.961-19.959z" fill="none" stroke="#24304f" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="3.864" stroke-width=".245"/></g><text transform="matrix(1,0,0,-1,145.89,326.95)" fill="#ffffff" font-size="21.482px" font-weight="bold"><tspan x="0 17.894506" y="0">M1</tspan></text><text transform="matrix(1,0,0,-1,149.42,317.67)" fill="#ffffff" font-size="7.7335px" font-weight="bold"><tspan x="0 4.2998261 8.5996523 13.757896 18.483065" y="0">24Vdc</tspan></text><g transform="translate(222.58,330.57)"><path d="m0 0c0-11.024-8.938-19.961-19.961-19.961s-19.96 8.937-19.96 19.961c0 11.022 8.937 19.959 19.96 19.959s19.961-8.937 19.961-19.959" fill="#24304f"/><path d="m0 0c0-11.024-8.938-19.961-19.961-19.961s-19.96 8.937-19.96 19.961c0 11.022 8.937 19.959 19.96 19.959s19.961-8.937 19.961-19.959z" fill="none" stroke="#24304f" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="3.864" stroke-width=".245"/></g><text transform="matrix(1,0,0,-1,188.05,325.5)" fill="#ffffff" font-size="21.482px" font-weight="bold"><tspan x="0 17.894506" y="0">M2</tspan></text><text transform="matrix(1,0,0,-1,191.58,316.21)" fill="#ffffff" font-size="7.7335px" font-weight="bold"><tspan x="0 4.2998261 8.5996523 13.757896 18.483065" y="0">24Vdc</tspan></text></g></g><rect x="9.9269" y="81.974" width="178.42" height="135.29" rx=".068942" ry=".068942" fill="none" stroke="#000" stroke-width=".51592"/><g transform="translate(-1.6409 .21461)"><path d="m148.03 115.62 3.0244-2.2691-16.85-6.8608-3.1874 2.0211z" fill="#bdbcbc"/><path d="m148.03 115.62 3.0244-2.2691-16.85-6.8608-3.1874 2.0211z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".27869"/><path d="m66.363 175.72 3.2254-2.1872-13.234-5.3887-3.4477 1.9537z" fill="#bdbcbc"/><path d="m66.363 175.72 3.2254-2.1872-13.234-5.3887-3.4477 1.9537z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".27869"/><path d="m169.57 112.22-0.0233-0.0367c-1.2326-1.8538-2.5054-3.7712-1.4055-7.2383 0.85302-2.6899 0.27481-3.8961-0.85654-4.8789-0.889-0.77258-1.6665-1.0841-2.3132-0.92534-1.0389 0.25647-1.6358 1.6778-1.6432 1.6923-0.0589 0.12206-0.39405 0.10477-0.95814-0.14605-0.63888-0.28469-0.75636-0.52564-0.75636-0.52564 0.0367-0.0942 0.92851-2.3192 2.9178-2.8085 1.2615-0.31044 2.5947 0.13547 3.962 1.3233 1.9346 1.6813 2.3668 3.7864 1.403 6.8255-0.83396 2.6261 0.0123 3.9003 1.1829 5.6628l0.0243 0.0367 0.76588 1.01c0.17004 0.23283-0.0261 0.66393-0.43709 0.96203-0.41134 0.29809-0.88124 0.35101-1.0506 0.11853z" fill="#231f20"/><path d="m169.57 112.22-0.0233-0.0367c-1.2326-1.8538-2.5054-3.7712-1.4055-7.2383 0.85302-2.6899 0.27481-3.8961-0.85654-4.8789-0.889-0.77258-1.6665-1.0841-2.3132-0.92534-1.0389 0.25647-1.6358 1.6778-1.6432 1.6923-0.0589 0.12206-0.39405 0.10477-0.95814-0.14605-0.63888-0.28469-0.75636-0.52564-0.75636-0.52564 0.0367-0.0942 0.92851-2.3192 2.9178-2.8085 1.2615-0.31044 2.5947 0.13547 3.962 1.3233 1.9346 1.6813 2.3668 3.7864 1.403 6.8255-0.83396 2.6261 0.0123 3.9003 1.1829 5.6628l0.0243 0.0367 0.76588 1.01c0.17004 0.23283-0.0261 0.66393-0.43709 0.96203-0.41134 0.29809-0.88124 0.35101-1.0506 0.11853z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".26317"/><path d="m170.38 113.29c-0.16898-0.23283 0.0268-0.66393 0.43744-0.96273 0.41099-0.29739 0.88195-0.35031 1.0502-0.11748" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13159"/><path d="m171.61 112.39c0.11148 0.15452-0.0173 0.43815-0.28822 0.635-0.27093 0.1972-0.58067 0.23177-0.69285 0.0773" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13159"/><path d="m173.17 122.56c-0.0328-0.0145-0.0624-0.0378-0.0857-0.0684-1.0576-1.4012-0.94933-2.618-0.82409-4.0294 0.0508-0.57679 0.10371-1.1733 0.0861-1.8429-0.0586-2.2228-1.5487-3.8128-1.5635-3.8287-0.0832-0.0868-0.0797-0.22543 7e-3 -0.30974 0.0882-0.0833 0.22683-0.0804 0.31044 8e-3 0.066 0.0684 1.6221 1.7223 1.6852 4.119 0.0176 0.69533-0.0356 1.3039-0.0885 1.8934-0.12207 1.3748-0.21802 2.4606 0.7373 3.7264 0.0723 0.097 0.0547 0.23389-0.043 0.30833-0.0653 0.0483-0.15028 0.0561-0.22119 0.0243" fill="#855333"/><path d="m173.17 122.56c-0.0328-0.0145-0.0624-0.0378-0.0857-0.0684-1.0576-1.4012-0.94933-2.618-0.82409-4.0294 0.0508-0.57679 0.10371-1.1733 0.0861-1.8429-0.0586-2.2228-1.5487-3.8128-1.5635-3.8287-0.0832-0.0868-0.0797-0.22543 7e-3 -0.30974 0.0882-0.0833 0.22683-0.0804 0.31044 8e-3 0.066 0.0684 1.6221 1.7223 1.6852 4.119 0.0176 0.69533-0.0356 1.3039-0.0885 1.8934-0.12207 1.3748-0.21802 2.4606 0.7373 3.7264 0.0723 0.097 0.0547 0.23389-0.043 0.30833-0.0653 0.0483-0.15028 0.0561-0.22119 0.0243z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".14605"/><path d="m175.17 122c-0.0212-0.01-0.0402-0.0222-0.0579-0.0384-1.2989-1.18-1.4185-2.3975-1.5579-3.8068-0.0572-0.57573-0.11501-1.1723-0.25647-1.8267-0.47167-2.1795-2.2303-3.459-2.2476-3.472-0.0984-0.0702-0.121-0.20673-0.0508-0.30551 0.0716-0.0984 0.2092-0.12135 0.30621-0.0504 0.0787 0.0561 1.9135 1.3917 2.4208 3.7349 0.14641 0.67945 0.20567 1.2887 0.26459 1.8761 0.13511 1.3748 0.2413 2.4599 1.4153 3.5267 0.0896 0.0815 0.097 0.22013 0.0155 0.31009-0.0656 0.0713-0.16827 0.0896-0.25188 0.0522" fill="#00adef"/><path d="m175.17 122c-0.0212-0.01-0.0402-0.0222-0.0579-0.0384-1.2989-1.18-1.4185-2.3975-1.5579-3.8068-0.0572-0.57573-0.11501-1.1723-0.25647-1.8267-0.47167-2.1795-2.2303-3.459-2.2476-3.472-0.0984-0.0702-0.121-0.20673-0.0508-0.30551 0.0716-0.0984 0.2092-0.12135 0.30621-0.0504 0.0787 0.0561 1.9135 1.3917 2.4208 3.7349 0.14641 0.67945 0.20567 1.2887 0.26459 1.8761 0.13511 1.3748 0.2413 2.4599 1.4153 3.5267 0.0896 0.0815 0.097 0.22013 0.0155 0.31009-0.0656 0.0713-0.16827 0.0896-0.25188 0.0522z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".14605"/><path d="m170.63 113.1c-0.11148-0.15275 0.018-0.43709 0.28928-0.63429 0.27023-0.19615 0.58032-0.23072 0.69179-0.078" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".26317"/><path d="m140.76 111.18c0.15064-0.23142 3.7673-5.666 10.973-5.4067 6.1221 0.22119 7.1064-1.2647 9.0678-4.2228l0.26035-0.39229c0.21237-0.31962 0.41346 0.21484 0.82868 0.45579 0.41486 0.24095 0.88618 0.097 0.6738 0.41592l-0.25894 0.39018c-2.0168 3.042-3.3482 5.0528-10.351 4.8002-6.3281-0.22789-9.6516 4.7713-9.6844 4.8218" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m165.48 101.2c-3.5595 0.3623-5.2222-2.359-5.2222-2.359" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".42933"/><path d="m165.08 102.1c-3.5588 0.36336-5.2222-2.359-5.2222-2.359" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".42933"/><path d="m94.042 148.31-24.258 17.43-13.171-5.3721 24.969-17.435z" fill="#d3d2d2"/><path d="m94.042 148.31-24.258 17.43-13.171-5.3721 24.969-17.435z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".27869"/><path d="m89.084 151.87v2.3728" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".27869"/><path d="m69.784 165.74v7.6408l-13.171-5.3418v-5.2804l4.5995-0.51471v2.3114l8.5711 3.4837 19.3-13.791" fill="#918f90" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".27869"/><path d="m69.784 165.74 24.258-17.43 0.08467 2.3347-24.343 17.394" fill="#bdbcbc" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".27869"/><path d="m56.613 162.76v-2.3908l13.171 5.3721v2.2994z" fill="#bdbcbc"/><path d="m56.613 162.76v-2.3908l13.171 5.3721v2.2994z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".27869"/><path d="m148.11 109.43-12.496-4.1197-54.027 37.619 12.46 5.377 54.063-38.876v6.1775l-78.321 57.769v-5.3414l24.343-17.394-0.08467-2.335" fill="#918f90" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".27869"/><path d="m63.991 167.78c0.17498 0.74754-0.17604 1.4683-0.78317 1.6104-0.60748 0.14146-1.2414-0.34854-1.4164-1.0961-0.17427-0.74683 0.17639-1.4679 0.78317-1.6101 0.60713-0.14181 1.2418 0.34925 1.4164 1.0957" fill="#231f20"/><path d="m63.991 167.78c0.17498 0.74754-0.17604 1.4683-0.78317 1.6104-0.60748 0.14146-1.2414-0.34854-1.4164-1.0961-0.17427-0.74683 0.17639-1.4679 0.78317-1.6101 0.60713-0.14181 1.2418 0.34925 1.4164 1.0957z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".25541"/><path d="m68.694 169.65c0.17498 0.74754-0.17604 1.4683-0.78317 1.6104-0.60748 0.14146-1.2414-0.34854-1.4164-1.0961-0.17427-0.74683 0.17639-1.4679 0.78317-1.6101 0.60713-0.14181 1.2418 0.34925 1.4164 1.0957" fill="#231f20"/><path d="m68.694 169.65c0.17498 0.74754-0.17604 1.4683-0.78317 1.6104-0.60748 0.14146-1.2414-0.34854-1.4164-1.0961-0.17427-0.74683 0.17639-1.4679 0.78317-1.6101 0.60713-0.14181 1.2418 0.34925 1.4164 1.0957z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".25541"/><path d="m59.586 165.87c0.17498 0.74754-0.17604 1.4683-0.78317 1.6104-0.60748 0.14146-1.2414-0.34854-1.4164-1.0961-0.17427-0.74683 0.17639-1.4679 0.78317-1.6101 0.60713-0.14181 1.2418 0.34925 1.4164 1.0957" fill="#231f20"/><path d="m59.586 165.87c0.17498 0.74754-0.17604 1.4683-0.78317 1.6104-0.60748 0.14146-1.2414-0.34854-1.4164-1.0961-0.17427-0.74683 0.17639-1.4679 0.78317-1.6101 0.60713-0.14181 1.2418 0.34925 1.4164 1.0957z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".25541"/><path d="m82.455 155.62 5.4829-3.7991" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".27869"/><path d="m84.189 150.59 3.9017 1.1148" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".27869"/><path d="m78.841 154.51 3.9017 1.1148" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".27869"/><path d="m78.941 154.4 5.3799-3.72" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".27869"/><path d="m83.876 153.27c0.0067-0.20249 0.29422-0.35666 0.641-0.34502 0.34713 0.0117 0.62371 0.18521 0.61701 0.38806-0.0071 0.20179-0.29422 0.35595-0.6417 0.34431-0.34713-0.0116-0.62371-0.18486-0.6163-0.38735" fill="#231f20"/><path d="m83.876 153.27c0.0067-0.20249 0.29422-0.35666 0.641-0.34502 0.34713 0.0117 0.62371 0.18521 0.61701 0.38806-0.0071 0.20179-0.29422 0.35595-0.6417 0.34431-0.34713-0.0116-0.62371-0.18486-0.6163-0.38735z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".18944"/><path d="m82.796 153.93c0.0067-0.20249 0.29422-0.35666 0.641-0.34502 0.34713 0.0117 0.62371 0.18521 0.61701 0.38806-0.0071 0.20179-0.29422 0.35595-0.6417 0.34431-0.34713-0.0116-0.62371-0.18486-0.6163-0.38735" fill="#231f20"/><path d="m82.796 153.93c0.0067-0.20249 0.29422-0.35666 0.641-0.34502 0.34713 0.0117 0.62371 0.18521 0.61701 0.38806-0.0071 0.20179-0.29422 0.35595-0.6417 0.34431-0.34713-0.0116-0.62371-0.18486-0.6163-0.38735z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".18944"/><path d="m81.716 154.68c0.0067-0.20214 0.29422-0.35666 0.641-0.34502 0.34713 0.0117 0.62371 0.18521 0.61701 0.38806-0.0071 0.20179-0.29422 0.35595-0.6417 0.34431-0.34713-0.0116-0.62371-0.18486-0.6163-0.38735" fill="#231f20"/><path d="m81.716 154.68c0.0067-0.20214 0.29422-0.35666 0.641-0.34502 0.34713 0.0117 0.62371 0.18521 0.61701 0.38806-0.0071 0.20179-0.29422 0.35595-0.6417 0.34431-0.34713-0.0116-0.62371-0.18486-0.6163-0.38735z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".18944"/><path d="m85.708 152.91 1.5628-1.083" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".13935"/><path d="m84.927 152.65 1.5628-1.083" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".13935"/><path d="m87.271 151.82-0.7814-0.254" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".13935"/><path d="m85.708 152.91-0.7814-0.254" fill="none" stroke="#231f20" stroke-miterlimit="10" stroke-width=".13935"/><path d="m77.79 201.12-6.6118 5.891 1.1934 1.2058 6.3197-5.8427" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".41804"/><path d="m77.382 200.39 1.8771 2.3989-1.5639 1.2248c-0.08925 0.0695-0.21802 0.0543-0.28751-0.0353l-1.6256-2.0768c-0.0695-0.0885-0.05397-0.21731 0.03528-0.28716z" fill="#fff"/><path d="m77.382 200.39 1.8771 2.3989-1.5639 1.2248c-0.08925 0.0695-0.21802 0.0543-0.28751-0.0353l-1.6256-2.0768c-0.0695-0.0885-0.05397-0.21731 0.03528-0.28716z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m77.777 203.95 1.4376-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m77.659 203.8 1.4379-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m77.542 203.65 1.4376-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m77.425 203.5 1.4376-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m77.307 203.35 1.4379-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m77.19 203.2 1.4379-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m77.073 203.05 1.4376-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m78.393 201.78-1.4379 1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m76.838 202.75 1.4376-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m76.721 202.6 1.4376-1.1261" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m76.603 202.45 1.4376-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m76.486 202.3 1.4376-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m76.368 202.15 1.4379-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m76.251 202 1.4379-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m76.134 201.85 1.4376-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m76.016 201.7 1.4379-1.1261" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m75.899 201.55 1.4379-1.1254" fill="#fff" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m64.536 194.9c1.7932 0 1.7963-2.7869 0-2.7869-1.7932 0-1.7963 2.7869 0 2.7869" fill="#fff"/><path d="m62.855 168.71c0.89923 0 0.88018-1.3935-0.01658-1.3935-0.89923 0-0.88018 1.3935 0.01658 1.3935" fill="#231f20"/><path d="m61.929 167.15c-3.6805 4.3321-7.8387 8.128-12.358 11.564-2.3178 1.7611-4.4235 3.659-6.356 5.8385-1.7646 1.9904-3.8259 4.0552-4.8503 6.55-1.989 4.8443-0.54469 10.629 2.9168 14.423 1.8133 1.9872 4.2171 3.2833 6.6058 4.4485 2.6106 1.2749 5.2243 2.5255 8.1365 2.9037 3.2477 0.42016 6.6026 0.0924 9.8167-0.46002 3.0854-0.52952 5.2239-2.4846 7.288-4.6994 0.9151-0.98249-0.59408-2.4289-1.5145-1.4414-1.6288 1.748-3.2897 3.4727-5.7072 4.0054-2.6035 0.57362-5.4423 0.79375-8.1026 0.66781-2.7118-0.12876-5.1396-0.99659-7.566-2.1583-2.2796-1.0911-4.6732-2.1604-6.5793-3.8559-3.4382-3.0589-5.1287-8.3206-3.496-12.729 0.87136-2.3516 2.8526-4.2739 4.4831-6.1182 1.7413-1.971 3.6057-3.7536 5.6967-5.3509 4.7696-3.6449 9.2057-7.5618 13.101-12.146 0.86607-1.0195-0.64064-2.4705-1.5145-1.4414" fill="#231f20"/><path d="m77.763 201.15 1.5067-1.0862c0.19791-0.14323 0.3489-0.34184 0.4325-0.5708l0.12312-0.33514 3.2576-2.3343-0.11889-0.16792 1.977-1.4023 1.548 2.1826-1.977 1.4026-0.11818-0.16827-3.2805 2.304-0.35701 5e-3c-0.24377 3e-3 -0.48119 0.0801-0.68192 0.21908l-1.5226 1.0629z" fill="#040606"/><path d="m77.763 201.15 1.5067-1.0862c0.19791-0.14323 0.3489-0.34184 0.4325-0.5708l0.12312-0.33514 3.2576-2.3343-0.11889-0.16792 1.977-1.4023 1.548 2.1826-1.977 1.4026-0.11818-0.16827-3.2805 2.304-0.35701 5e-3c-0.24377 3e-3 -0.48119 0.0801-0.68192 0.21908l-1.5226 1.0629z" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m79.826 199.16 1.3077 1.8143" fill="#231f20" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m80.07 198.99 1.3077 1.8161" fill="#231f20" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m78.232 200.76 1.0516 1.4633" fill="#231f20" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m78.432 200.62 1.0569 1.4693" fill="#231f20" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m78.633 200.48 1.059 1.4743" fill="#231f20" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m83.002 196.63 1.5395 2.1382" fill="#231f20" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m83.633 196.11 1.585 2.2133c0.05927 0.0832 0.1651 0.1083 0.23777 0.0557 0.07056-0.0508 0.08184-0.15946 0.02328-0.24166l-1.5854-2.214c-0.05891-0.0822-0.16651-0.10654-0.23742-0.0564-0.07303 0.0519-0.0822 0.16122-0.02328 0.24306" fill="#fff"/><path d="m83.633 196.11 1.585 2.2133c0.05927 0.0832 0.1651 0.1083 0.23777 0.0557 0.07056-0.0508 0.08184-0.15946 0.02328-0.24166l-1.5854-2.214c-0.05891-0.0822-0.16651-0.10654-0.23742-0.0564-0.07303 0.0519-0.0822 0.16122-0.02328 0.24306z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".13935"/><path d="m85.895 196.6c-0.15487 0.11148-0.37006 0.0751-0.48048-0.0797-0.11148-0.15451-0.0762-0.37077 0.07867-0.48083" fill="#231f20" stroke="#fff" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".27869"/><path d="m66.375 170.18c-0.79481 2.19-2.534 3.8534-3.6992 5.8335-1.1617 1.9745-1.8845 4.4235-0.94615 6.6308 1.9784 4.6535 8.1206 4.293 11.955 2.515 1.1652-0.54081 2.2585-1.2972 3.1475-2.2278 0.79869-0.83609 1.4302-1.8644 2.4846-2.4045 1.198-0.61277 0.14182-2.4169-1.0552-1.8048-1.7166 0.87877-2.5837 2.7312-4.1578 3.8008-1.6238 1.1024-3.6347 1.7551-5.5975 1.8108-1.8175 0.0512-3.8276-0.55457-4.7431-2.2574-0.9465-1.7604-0.01129-3.8795 0.96344-5.4077 1.2636-1.9823 2.8501-3.689 3.6643-5.933 0.46002-1.2661-1.5596-1.8119-2.0154-0.55562" fill="#231f20"/><path d="m84.828 171.85-8.1964 6.5832" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m76.632 178.43 2.9178 3.6329" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m79.55 182.07 8.1478-6.5444" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m77.195 177.98 2.9178 3.6329" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m78.317 176.8-1.8228 1.4637" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m81.53 180.8-1.8228 1.4637" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m82.181 175.76-4.0986 3.2914" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m83.301 177.16-4.0037 3.2156" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m82.181 175.76 1.1204 1.3945" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m78.978 178.33 1.1204 1.3945" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m81.574 174.46 2.9178 3.6329" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m81.776 174.3 2.9178 3.6329" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m81.979 174.14 2.9178 3.6329" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m85.883 173.16-3.1425 2.5238" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m86.637 174.1-3.2551 2.6141" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m84.828 171.85 1.0552 1.3134" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m86.637 174.1 1.1204 1.3945" fill="#231f20" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".2219"/><path d="m54.806 169.88c0.0078-0.24306 0.30092-0.42968 0.65334-0.41804 0.35278 0.0123 0.63182 0.21837 0.62406 0.46108-0.0081 0.24236-0.30127 0.42968-0.6537 0.41804-0.35278-0.0123-0.63218-0.21872-0.62371-0.46108" fill="#231f20"/><path d="m54.806 169.88c0.0078-0.24306 0.30092-0.42968 0.65334-0.41804 0.35278 0.0123 0.63182 0.21837 0.62406 0.46108-0.0081 0.24236-0.30127 0.42968-0.6537 0.41804-0.35278-0.0123-0.63218-0.21872-0.62371-0.46108z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".18944"/><path d="m65.989 174.36c0.0078-0.24236 0.30092-0.42968 0.65334-0.41804 0.35278 0.0123 0.63182 0.21837 0.62406 0.46143-0.0081 0.24201-0.30127 0.42933-0.6537 0.41769-0.35278-0.012-0.63218-0.21872-0.62371-0.46108" fill="#231f20"/><path d="m65.989 174.36c0.0078-0.24236 0.30092-0.42968 0.65334-0.41804 0.35278 0.0123 0.63182 0.21837 0.62406 0.46143-0.0081 0.24201-0.30127 0.42933-0.6537 0.41769-0.35278-0.012-0.63218-0.21872-0.62371-0.46108z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".18944"/><path d="m148.3 113.67c8e-3 -0.24236 0.30092-0.42933 0.65229-0.41734 0.35207 0.012 0.63076 0.21767 0.623 0.46038-8e-3 0.24165-0.30092 0.42862-0.65264 0.41698-0.35172-0.012-0.63112-0.21801-0.62265-0.46002" fill="#231f20"/><path d="m148.3 113.67c8e-3 -0.24236 0.30092-0.42933 0.65229-0.41734 0.35207 0.012 0.63076 0.21767 0.623 0.46038-8e-3 0.24165-0.30092 0.42862-0.65264 0.41698-0.35172-0.012-0.63112-0.21801-0.62265-0.46002z" fill="none" stroke="#231f20" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".18944"/><text x="44.437756" y="160.35172" fill="#ffffff" font-size="2.7282px" font-weight="bold" stroke-width=".35278"><tspan x="44.437756 45.954639 47.471519 49.291237 50.958168" y="160.35172" stroke-width=".35278">24Vdc</tspan></text><text x="59.312737" y="191.72707" fill="#ffffff" font-size="2.7282px" font-weight="bold" stroke-width=".35278"><tspan x="59.312737 60.829617 62.3465 64.166214 65.833153" y="191.72707" stroke-width=".35278">24Vdc</tspan></text><path transform="matrix(.49149 0 0 .49149 -140.24 -153.4)" d="m473.18 611.9c-1.5938-0.71135-6.9031-3.0186-11.798-5.1272s-8.8968-3.9055-8.8921-3.9931c5e-3 -0.0876 6.9906-5.0144 15.524-10.949s32.965-22.943 54.292-37.797c21.327-14.854 38.963-27.003 39.19-26.998 0.5628 0.0129 23.538 7.5592 23.825 7.8254 0.12554 0.11643-0.18494 0.50081-0.68997 0.85418-0.92754 0.649-15.713 11.272-36.563 26.269-6.2468 4.4933-12.208 8.7772-13.247 9.5198s-5.0566 3.6294-8.9274 6.4152c-10.28 7.3986-22.5 16.185-24.563 17.661-0.98665 0.70595-4.5262 3.2517-7.8656 5.6571-3.3395 2.4055-8.4579 6.0912-11.374 8.1905s-5.4624 3.8051-5.6578 3.7906c-0.19536-0.0145-1.6592-0.6083-3.2531-1.3196z" fill="#d3d2d2" stroke-width=".53198"/><path transform="matrix(.49149 0 0 .49149 -140.24 -153.4)" d="m427.66 659.16 0.0135-4.9326 49.669-35.326-0.16375-2.365-0.16375-2.365 53.88-38.757c29.634-21.316 54.235-38.988 54.668-39.271l0.78812-0.51368-0.1494 11.501-4.9678 3.667c-2.7323 2.0169-8.8178 6.505-13.523 9.9737-4.7056 3.4687-13.461 9.9277-19.457 14.353s-14.752 10.884-19.457 14.351c-4.7056 3.4676-13.461 9.9258-19.457 14.351s-14.752 10.884-19.457 14.351c-4.7056 3.4676-13.417 9.8924-19.359 14.277-5.9418 4.3849-13.58 10.019-16.973 12.519-3.3935 2.5007-10.455 7.7043-15.692 11.564-5.2369 3.8592-9.6768 7.1377-9.8666 7.2855-0.27325 0.21287-0.34217-0.75691-0.33145-4.6638z" fill="#d3d2d2" stroke-width=".53198"/><path transform="matrix(.49149 0 0 .49149 -140.24 -153.4)" d="m424.75 663.4c-0.75896-0.31776-1.4196-0.60615-1.4682-0.64088-0.16345-0.11695 1.0631-2.3245 1.2915-2.3245 0.41411 0 0.86665-1.3902 0.86665-2.6625 0-1.061-0.146-1.4026-0.93836-2.1949-1.2224-1.2224-2.3649-1.2654-3.4987-0.13163-0.62608 0.62607-0.80674 1.0571-0.80674 1.9245 0 1.2342-1.0554 3.6965-1.5074 3.5167-6.951-2.7649-6.8226-2.699-6.3278-3.2457 0.25799-0.28508 0.76848-0.51833 1.1344-0.51833 0.9605 0 1.6679-0.45343 2.1441-1.3744 0.5362-1.0369 0.52769-1.9623-0.0288-3.1292-1.0147-2.1278-3.4322-2.399-4.6329-0.51969-0.35896 0.56183-1.3192 1.741-2.1339 2.6203l-1.4812 1.5988-6.4857-2.6076v-9.8069l0.75896 0.27591c0.41743 0.15174 6.2235 2.4739 12.902 5.1604l12.143 4.8845 0.0754 4.8988c0.0589 3.8309-1e-3 4.8939-0.27599 4.8764-0.19324-0.0123-0.97232-0.28233-1.7313-0.60009zm-18.486-11.025c0.65759-0.78151 0.72949-1.0594 0.61895-2.3923-0.10477-1.2635-0.26692-1.6348-0.99982-2.2896-1.1833-1.0573-2.308-1.038-3.4044 0.0583-0.78022 0.78022-0.83077 0.95025-0.71119 2.3923 0.10877 1.3116 0.26438 1.6735 1.0035 2.334 1.2383 1.1064 2.507 1.0691 3.4929-0.10261z" fill="#d3d2d2" stroke-width=".53198"/></g></g></g></g></g></g>';
  sDis += '</g></g>';
  sDis += this.ScriviLabel(info.pos, etk, obj);
  sDis += '</g>';
  return sDis;
}
render_NOS_WHITE(dim_target, etk, obj)
{
let dimensioni = {w:243.93, h:108.45};
let info = this.setupCurrentScale(dimensioni, dim_target);
let sDis = '';
sDis += '<g>';
//sDis += ScriviLabel(info.pos, etk, obj);
sDis += '<g transform="translate('+info.pos.x+' '+info.pos.y+')" ><g transform="scale('+info.scale+')" ><g transform="matrix(.66978 0 0 .66978 56.649 -30.439)"><g transform="matrix(.35278 0 0 -.35278 200.8 88.148)"><path d="m0 0-11.776-4.91" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 200.8 95.092)"><path d="m0 0-2.124-0.886" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 220.12 123.45)"><path d="m0 0c0 39.646-38.684 75.538-101.19 101.5-62.501 25.982-148.85 42.049-244.21 42.049-97.825 0-186.1-16.894-248.96-44.045-59.708-25.801-96.411-60.88-96.411-99.505v-19.626c0-39.647 38.653-75.523 101.16-101.49 62.501-25.998 148.82-42.049 244.21-42.049 93.227 0 177.8 15.347 239.97 40.305 64.995 26.098 105.42 62.712 105.42 103.23z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -23.569 123.45)"><path d="m0 0c0-39.644 38.652-75.535 101.16-101.49 62.501-25.964 148.82-42.062 244.21-42.062 93.228 0 177.8 15.363 239.97 40.32 64.995 26.1 105.42 62.699 105.42 103.23" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -20.412 123.45)"><path d="m0 0c0-16.893 8.23-33.545 24.463-49.494 16.576-16.288 40.523-31 71.177-43.727 64.231-26.682 149.74-41.377 240.78-41.377 88.866 0 172.91 14.09 236.64 39.676 31.92 12.818 56.893 27.742 74.224 44.358 16.975 16.273 25.582 33.286 25.582 50.564" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 216.96 123.45)"><path d="m0 0c0 16.89-8.235 33.543-24.477 49.497-16.581 16.287-40.534 31.004-71.194 43.738-64.165 26.675-149.67 41.365-240.78 41.365-47.286 0-93.042-3.936-136-11.699-41.32-7.465-78.13-18.102-109.41-31.612-29.238-12.634-52.043-27.108-67.782-43.02-15.413-15.584-23.228-31.825-23.228-48.269" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -18.305 121.65)"><path d="m0 0c-2.388-4.902-4.062-9.844-5.019-14.813" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 216.57 126.61)"><path d="m0 0c-2.735 13.228-10.565 26.248-23.377 38.833-16.581 16.287-40.534 31.004-71.194 43.738-16.041 6.669-33.416 12.589-51.879 17.717" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 218.47 123.45)"><path d="m0 0c0-18.494-9.052-36.551-26.904-53.666-17.731-16.997-43.164-32.219-75.598-45.242-64.229-25.785-148.84-39.986-238.24-39.986-91.589 0-177.68 14.812-242.43 41.706-31.163 12.938-55.568 27.955-72.539 44.629-17.085 16.788-25.748 34.471-25.748 52.559" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -21.927 123.45)"><path d="m0 0c0 17.616 8.233 34.872 24.47 51.289 16.128 16.306 39.387 31.09 69.133 43.943 31.58 13.64 68.706 24.372 110.35 31.897 43.207 7.808 89.22 11.767 136.76 11.767 91.656 0 177.75-14.807 242.42-41.694 31.169-12.945 55.581-27.965 72.556-44.64 17.094-16.792 25.762-34.476 25.762-52.562" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 114.65 73.314)"><path d="m0 0c95.359 0 181.71-16.066 244.21-42.049v-19.681" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 196.64 89.88)"><path d="m0 0c-26.529 10.313-56.401 18.671-88.592 24.895" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 142.99 76.332)"><path d="m0 0c58.165-5.766 111.72-17.797 155.9-35.277" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 133.5 168.66)"><path d="m0 0c29.912 5.876 57.123 13.74 80.65 23.186 56.621 22.736 91.841 54.633 91.841 89.93v19.64c0 34.539-33.7 65.806-88.151 88.425-54.449 22.635-129.67 36.631-212.75 36.631-85.221 0-162.12-14.717-216.88-38.37-52.016-22.476-83.99-53.037-83.99-86.686v-19.64c0-4.317 0.525-8.583 1.552-12.787" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -17.935 121.83)"><path d="m0 0c0-34.536 33.673-65.804 88.124-88.411 54.449-22.619 129.65-36.643 212.75-36.643 81.217 0 154.9 13.384 209.06 35.126 56.621 22.737 91.841 54.62 91.841 89.928" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -16.294 121.83)"><path d="m0 0c0 15.184 7.114 30.075 21.145 44.261 13.995 14.149 34.194 26.986 60.037 38.153 56.718 24.497 133.09 37.989 215.04 37.989 79.77 0 154.69-12.883 210.96-36.276 27.081-11.249 48.284-24.292 63.017-38.764 14.774-14.511 22.265-29.774 22.265-45.363" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 192.71 121.83)"><path d="m0 0c0-31.714-32.411-62.917-88.921-85.608-55.886-22.436-129.52-34.791-207.32-34.791-79.712 0-154.63 12.886-210.96 36.286-27.077 11.242-48.274 24.281-63.004 38.754-14.765 14.507-22.251 29.768-22.251 45.359" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 191.2 121.83)"><path d="m0 0c0 14.394-7.059 28.625-20.979 42.299-14.339 14.085-35.084 26.823-61.657 37.861-55.761 23.181-130.1 35.947-209.31 35.947-81.377 0-157.14-13.366-213.33-37.636-25.335-10.949-45.081-23.475-58.687-37.232-13.207-13.352-19.903-27.226-19.903-41.239" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -10.135 116.87)"><path d="m0 0c-6.052-7.613-10.032-15.369-11.909-23.198" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 190.73 124.96)"><path d="m0 0c-2.638 10.716-9.219 21.284-19.658 31.539-14.34 14.086-35.084 26.824-61.657 37.862-49.203 20.454-112.87 32.799-181.58 35.421" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -14.778 121.83)"><path d="m0 0c0-14.395 7.054-28.625 20.967-42.295 14.334-14.085 35.073-26.82 61.64-37.85 55.82-23.189 130.16-35.959 209.32-35.959 77.275 0 150.34 12.247 205.72 34.482 54.797 22.004 86.226 51.754 86.226 81.622" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 140.43 156.93)"><path d="m0 0c45.233 18.942 73.186 45.033 73.186 73.822v19.627c0 28.949-28.247 55.157-73.887 74.115-45.637 18.972-108.69 30.704-178.32 30.704-71.429 0-135.88-12.336-181.78-32.162-43.597-18.838-70.398-44.454-70.398-72.657v-19.627c0-0.493 8e-3 -0.986 0.024-1.477" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -11.694 123.96)"><path d="m0 0c0-28.948 28.225-55.155 73.864-74.104 45.638-18.959 108.67-30.713 178.32-30.713 68.074 0 129.83 11.217 175.23 29.441 47.459 19.058 76.979 45.781 76.979 75.376" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -10.052 123.96)"><path d="m0 0c0 12.521 5.89 24.823 17.505 36.567 11.663 11.792 28.515 22.497 50.085 31.818 47.448 20.494 111.35 31.78 179.94 31.78 66.764 0 129.46-10.778 176.54-30.349 45.132-18.747 71.017-44.194 71.017-69.816" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 164.6 123.96)"><path d="m0 0c0-26.259-26.994-52.157-74.059-71.057-46.754-18.769-108.37-29.106-173.49-29.106-66.718 0-129.41 10.78-176.54 30.356-45.117 18.733-70.994 44.176-70.994 69.807" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 9.1315 110.64)"><path d="m0 0c-14.026-7.297-25.364-15.281-33.819-23.83-7.702-7.788-12.695-15.767-14.922-23.823" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -8.5367 123.96)"><path d="m0 0c0-23.808 24.912-47.806 68.347-65.839 46.614-19.364 108.72-30.028 174.89-30.028 64.589 0 125.64 10.226 171.89 28.797 45.352 18.211 71.363 42.657 71.363 67.07" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 163.09 123.96)"><path d="m0 0c0 23.8-24.92 47.802-68.37 65.85-46.567 19.358-108.68 30.019-174.89 30.019-68.015 0-131.31-11.161-178.24-31.428-21.064-9.101-37.461-19.496-48.735-30.894-10.791-10.911-16.263-22.198-16.263-33.547" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 162.48 127.05)"><path d="m0 0c-14.269 54.16-193.53 97.966-259.98 87.644" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 20.062 104.38)"><path d="m0 0c-39.411-18.494-63.286-42.934-63.286-69.58v-19.627c0-0.493 9e-3 -0.986 0.024-1.478" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -2.2642 128.93)"><path d="m0 0c0-9.845 3.265-19.372 9.367-28.404" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -.62226 128.93)"><path d="m0 0c0 12.521 5.889 24.823 17.505 36.567 10.934 11.057 26.432 21.158 46.102 30.057" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 6.3306 142.54)"><path d="m0 0c-12.837 12.216-19.709 25.375-19.709 38.584" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 23.823 113.12)"><path d="m0 0c-21.064-9.102-37.461-19.496-48.735-30.895-7.703-7.788-12.695-15.766-14.922-23.823" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 .89324 128.93)"><path d="m0 0c0-16.847 12.473-33.787 35.155-48.644" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 23.823 106.2)"><path d="m0 0c-21.064-9.102-37.461-19.496-48.735-30.895-10.791-10.911-16.263-22.198-16.263-33.546" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 196.64 89.88)"><path d="m0 0v-9.449" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 198.44 89.489)"><path d="m0 0v-13.1" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 23.823 113.12)"><path d="m0 0 22.723 9.258c2.532 1.158 4.198 4.201 4.198 8.435 0 2.402-0.536 4.865-1.462 7.14-1.688 4.147-4.671 7.674-8.07 9.081-1.973 0.817-3.808 0.805-5.327 0.112l-22.724-9.258" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 27.972 111.44)"><path d="m0 0c2.532 1.157 4.198 4.201 4.198 8.436 0 2.401-0.536 4.864-1.462 7.138-1.687 4.148-4.671 7.675-8.07 9.082-1.973 0.818-3.808 0.805-5.327 0.113" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 24.788 107.63)"><path d="m0 0c0.927-2.275 1.462-4.738 1.462-7.139 0-4.234-1.664-7.279-4.196-8.435" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 20.062 104.38)"><path d="m0 0c1.521 0.693 3.354 0.707 5.328-0.111" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 32.249 109.66)"><path d="m0 0c0.444 0.086 0.87 0.223 1.273 0.407l32.525 15.629c1.921 0.879 3.184 3.187 3.184 6.398 0 1.82-0.407 3.688-1.108 5.413-1.28 3.145-3.543 5.819-6.12 6.886-1.496 0.621-2.888 0.611-4.04 0.085l-35.103-9.643c-0.255-0.116-0.502-0.252-0.738-0.406" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 28.937 100.78)"><path d="m0 0c1.521 0.693 3.355 0.707 5.329-0.111 3.399-1.408 6.381-4.935 8.068-9.082 0.926-2.276 1.461-4.739 1.461-7.139 0-4.234-1.664-7.278-4.196-8.436" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 79.566 107.29)"><path d="m0 0c0 5.586-6.042 11.299-16.576 15.673-11.554 4.805-26.988 7.45-43.461 7.45-13.496 0-26.642-1.862-37.244-5.2" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 44.395 98.92)"><path d="m0 0c11.327 3.666 25.108 5.648 39.659 5.648 17.279 0 33.567-2.815 45.862-7.928 13.176-5.471 20.433-13.09 20.433-21.452" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 73.457 112.93)"><path d="m0 0c11.005 4.419 17.316 10.241 17.316 15.975" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 81.773 107.29)"><path d="m0 0c0-8.546-7.544-16.281-21.242-21.782" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 66.689 115.65)"><path d="m0 0c5.418 2.322 13.527 5.744 19.185 7.702" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 74.28 114.98)"><path d="m0 0c-5.837-1.956-12.733-4.901-18.952-7.679" fill="none" stroke="#040606" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".7"/></g><g transform="translate(152.36,-122.19)"><g transform="matrix(.35278 0 0 -.35278 -95.468 244.73)"><path d="m0 0c1.266-1.673 2.81-2.987 4.476-3.677 1.612-0.668 3.111-0.656 4.352-0.089" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -95.423 238.93)"><path d="m0 0c-2.067-0.943-3.428-3.428-3.428-6.885 0-1.001 0.114-2.015 0.326-3.015" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -94.689 244.42)"><path d="m0 0c1.266-1.673 2.81-2.986 4.476-3.677 0.629-0.261 1.242-0.418 1.828-0.478" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -95.245 239.08)"><path d="m0 0c-1.08-1.272-1.727-3.194-1.727-5.578 0-1.001 0.115-2.014 0.327-3.014" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -93.911 244.1)"><path d="m0 0c1.266-1.672 2.81-2.986 4.477-3.676 0.292-0.121 0.58-0.22 0.863-0.297" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -94.699 239.1)"><path d="m0 0c-0.679-1.206-1.067-2.777-1.067-4.626 0-1.001 0.113-2.016 0.325-3.015" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -93.132 243.79)"><path d="m0 0c1.109-1.466 2.433-2.657 3.865-3.393" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -94.133 239.28)"><path d="m0 0c-0.301-0.941-0.464-2.024-0.464-3.223 0-1.001 0.113-2.015 0.326-3.015" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -92.353 243.47)"><path d="m0 0c0.769-1.017 1.641-1.9 2.58-2.592" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -93.489 239.6)"><path d="m0 0c-0.054-0.452-0.081-0.925-0.081-1.419 0-1.001 0.114-2.015 0.326-3.015" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -91.574 243.16)"><path d="m0 0c0.209-0.276 0.425-0.542 0.648-0.797" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -92.716 240.25)"><path d="m0 0c0.055-0.563 0.143-1.127 0.261-1.686" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -95.423 238.93)"><path d="m0 0c1.242 0.566 2.738 0.577 4.35-0.09 2.773-1.149 5.208-4.028 6.584-7.412 0.755-1.857 1.193-3.867 1.193-5.826 0-3.455-1.358-5.94-3.425-6.884" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -96.021 245.1)"><path d="m0 0c1.653-2.347 3.733-4.198 5.994-5.135 2.022-0.837 3.9-0.823 5.456-0.111l16.432 6.801c9.762 4.114 0.845 30.216-10.906 25.341l-16.434-6.803c-2.593-1.182-4.299-4.298-4.299-8.631 0-1.493 0.202-3.009 0.574-4.491" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -95.83 238.02)"><path d="m0 0c1.556 0.71 3.433 0.723 5.452-0.113 3.477-1.44 6.528-5.049 8.255-9.292 0.947-2.328 1.495-4.848 1.495-7.304 0-4.332-1.703-7.446-4.294-8.63" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -98.151 243.75)"><path d="m0 0c3.899 1.629 10.239 5.115 17.523 8.042" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -91.314 242.59)"><path d="m0 0c-7.142-2.798-13.244-6.086-17.321-7.761" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -110.19 247.26)"><path d="m0 0-1.472-0.604" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -101.98 246.13)"><path d="m0 0c-0.947 1.651-2.274 2.984-3.743 3.592-1.078 0.447-2.081 0.44-2.911 0.061l-2.452-1.035" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -102.82 249.86)"><path d="m0 0 1.566 0.686c1.385 0.633 2.295 2.296 2.295 4.611 0 0.913-0.141 1.842-0.398 2.742" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -108.76 252.32)"><path d="m0 0 2.258 0.935" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -103.56 247.41)"><path d="m0 0 1.237-0.445c0.504-0.193 0.827-0.677 0.827-1.368v-4.545c0-1.204-0.984-2.598-2.188-3.096l-9.642-3.994c-0.544-0.225-1.044-0.231-1.427-0.058l-1.237 0.444" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -107.51 252.17)"><path d="m0 0c-0.465 0.209-0.761 0.681-0.761 1.341v4.546c0 1.203 0.985 2.596 2.189 3.095l9.641 3.994c0.514 0.212 0.987 0.23 1.362 0.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -107.95 252.02)"><path d="m0 0c-0.466 0.209-0.762 0.681-0.762 1.341v4.546c0 1.203 0.986 2.596 2.189 3.095l9.642 3.994c0.513 0.212 0.987 0.23 1.361 0.086" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -107.3 249.64)"><path d="m0 0v-6.018" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -106.76 249.41)"><path d="m0 0v-6.018" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -106.22 249.19)"><path d="m0 0v-6.018" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -105.68 248.97)"><path d="m0 0v-6.018" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -105.14 248.74)"><path d="m0 0v-6.019" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -104.6 248.52)"><path d="m0 0v-6.018" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -104.06 248.3)"><path d="m0 0v-6.018" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -103.52 248.07)"><path d="m0 0v-6.018" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -103.81 246.18)"><path d="m0 0-10.945-4.549c-0.852-0.354-4.374 0.572-5.226 0.926-0.406 0.169-1.008 0.541-1.434 0.923" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -103.76 246.45)"><path d="m0 0c0.093-0.196 0.066-0.357-0.146-0.445l-10.946-4.549c-0.851-0.354-4.374 0.572-5.225 0.926-0.852 0.354-2.567 1.604-1.715 1.958" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -103.76 246.45)"><path d="m0 0v1.198c-0.28 0.59-1.638 1.503-2.276 1.768-0.851 0.353-3.959 1.025-4.81 0.671l-10.946-4.549v-1.198" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -109.61 246.64)"><path d="m0 0 7.464-1.993" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -109.7 247.21)"><path d="m0 0 5.193-1.387" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -106.13 246.98)"><path d="m0 0-7.465 1.993" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -108.03 245.89)"><path d="m0 0 7.464-1.993" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -107.1 245.55)"><path d="m0 0 7.464-1.993" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -106.08 245.24)"><path d="m0 0 4.911-1.312" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -105.29 245.4)"><path d="m0 0-6.377-6.376" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -104.56 245.46)"><path d="m0 0-4.368-4.369" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -104.13 245.86)"><path d="m0 0-1.626-1.626" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -106.01 245.25)"><path d="m0 0-6.376-6.376" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -107.33 245.69)"><path d="m0 0-5.136-5.136" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -108.7 246.22)"><path d="m0 0-2.821-2.821" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -111.29 253.88)"><path d="m0 0c0.442 0.04 0.86 0.151 1.248 0.329l3.512 1.397c1.7 0.777 2.818 2.82 2.818 5.664 0 1.612-0.359 3.265-0.98 4.793-1.134 2.784-3.137 5.152-5.419 6.097-1.325 0.549-2.557 0.54-3.576 0.075l-3.513-1.397c-0.128-0.06-0.254-0.125-0.375-0.198" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -113.38 247.9)"><path d="m0 0c1.021 0.466 2.253 0.474 3.578-0.075 2.281-0.945 4.284-3.313 5.417-6.097 0.622-1.528 0.982-3.182 0.982-4.793 0-2.843-1.119-4.887-2.819-5.664" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -115.48 253.52)"><path d="m0 0c0.881-1.073 1.921-1.914 3.036-2.375 1.19-0.493 2.296-0.484 3.212-0.065l3.149 1.253c1.526 0.697 2.53 2.53 2.53 5.081 0 1.446-0.323 2.929-0.881 4.299-1.017 2.498-2.814 4.622-4.86 5.47-1.189 0.492-2.293 0.484-3.208 0.067l-3.151-1.254c-1.526-0.696-2.53-2.53-2.53-5.081 0-0.348 0.018-0.698 0.055-1.048" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -115.54 249.12)"><path d="m0 0c0.915 0.418 2.021 0.426 3.209-0.067 2.047-0.848 3.844-2.972 4.859-5.47 0.558-1.37 0.88-2.853 0.88-4.299 0-2.55-1.002-4.384-2.527-5.08" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -115.05 248.96)"><path d="m0 0c0.542 1.041 1.332 1.832 2.32 2.283 1.228 0.561 2.634 0.542 4.067-0.052 2.243-0.928 4.278-3.193 5.443-6.057 0.627-1.541 0.959-3.168 0.959-4.704 0-2.89-1.18-5.154-3.155-6.057-0.596-0.272-1.235-0.408-1.898-0.408-0.415 0-0.84 0.054-1.27 0.16" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -114.04 252.86)"><path d="m0 0c0.618 0.282 1.024 1.025 1.024 2.058 0 0.586-0.13 1.186-0.356 1.741-0.412 1.012-1.14 1.872-1.969 2.216-0.481 0.199-0.928 0.196-1.3 0.027l-14.278-5.967c-0.618-0.282-1.025-1.025-1.025-2.058 0-0.602 0.137-1.22 0.375-1.788 0.415-0.991 1.133-1.831 1.95-2.17 0.481-0.199 0.93-0.196 1.301-0.026z" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -119.99 252.83)"><path d="m0 0c0.371 0.169 0.818 0.172 1.3-0.027 0.829-0.343 1.556-1.204 1.968-2.216 0.226-0.555 0.356-1.155 0.356-1.741 0-1.033-0.405-1.776-1.023-2.058" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -119.3 254.39)"><path d="m0 0c0.282 0.129 0.469 0.469 0.469 0.942 0 0.276-0.064 0.558-0.172 0.818-0.19 0.453-0.519 0.838-0.892 0.992-0.22 0.092-0.426 0.09-0.595 0.013" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -119.3 254.39)"><path d="m0 0c-0.17-0.077-0.375-0.078-0.595 0.013-0.38 0.157-0.713 0.55-0.901 1.013-0.103 0.254-0.163 0.529-0.163 0.797 0 0.473 0.186 0.813 0.469 0.942" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -119.41 252.59)"><path d="m0 0c0.37 0.169 0.818 0.172 1.3-0.027 0.829-0.344 1.556-1.204 1.968-2.216 0.226-0.555 0.356-1.155 0.356-1.741 0-1.033-0.405-1.776-1.023-2.058" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -100.65 245.58)"><path d="m0 0c-0.941 1.664-2.271 3.009-3.745 3.619-1.069 0.443-2.065 0.436-2.889 0.061l-2.013-0.86c-0.251-0.115-0.488-0.264-0.705-0.445" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -101.93 249.41)"><path d="m0 0c0.266 0.045 0.52 0.124 0.76 0.233l2.012 0.859c1.374 0.629 2.278 2.279 2.278 4.575 0 0.866-0.129 1.745-0.363 2.6" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -100.99 246.77)"><path d="m0 0c0.244-0.875 0.379-1.777 0.379-2.664 0-2.295-0.902-3.947-2.275-4.574" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -103.7 244.58)"><path d="m0 0c0.824 0.376 1.819 0.383 2.89-0.061 1.478-0.612 2.812-1.964 3.755-3.637" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -99.221 244.98)"><path d="m0 0c-0.943 1.679-2.28 3.037-3.763 3.65-1.07 0.444-2.065 0.437-2.888 0.061l-2.014-0.86c-0.314-0.143-0.604-0.34-0.863-0.585" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -100.65 248.81)"><path d="m0 0c0.411 0.019 0.799 0.113 1.154 0.275l2.013 0.86c1.374 0.628 2.277 2.278 2.277 4.574 0 0.848-0.123 1.708-0.347 2.546" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -99.559 246.2)"><path d="m0 0c0.227-0.843 0.352-1.71 0.352-2.563 0-2.296-0.904-3.947-2.277-4.574" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -102.28 243.98)"><path d="m0 0c0.824 0.376 1.819 0.383 2.89-0.06 1.442-0.598 2.747-1.899 3.684-3.516" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -99.217 248.21)"><path d="m0 0c0.403 0.021 0.784 0.115 1.135 0.274l2.012 0.86c1.374 0.628 2.277 2.278 2.277 4.574 0 1.303-0.291 2.638-0.792 3.872-0.916 2.249-2.533 4.162-4.377 4.925-1.07 0.443-2.066 0.436-2.889 0.061l-2.013-0.86c-0.309-0.141-0.593-0.333-0.849-0.573" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -98.131 245.62)"><path d="m0 0c0.214-0.817 0.33-1.656 0.33-2.481 0-2.297-0.902-3.948-2.275-4.575" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -100.86 243.37)"><path d="m0 0c0.824 0.376 1.819 0.383 2.89-0.06 1.507-0.624 2.864-2.018 3.808-3.735" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".3"/></g><g transform="matrix(.35278 0 0 -.35278 -101.98 246.13)"><path d="m0 0 1.76 0.683" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -101.61 247.01)"><path d="m0 0 1.76 0.683" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -100.27 246.49)"><path d="m0 0 1.76 0.683" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -100.65 245.58)"><path d="m0 0 1.76 0.683" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -99.221 244.98)"><path d="m0 0 1.759 0.683" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g><g transform="matrix(.35278 0 0 -.35278 -98.847 245.9)"><path d="m0 0 1.76 0.683" fill="none" stroke="#231f20" stroke-linecap="round" stroke-linejoin="round" stroke-width=".7"/></g></g></g><rect y="-.00087243" width="244.94" height="109.13" fill="none" stroke="#000" stroke-width=".26458"/><text x="111.3986" y="59.660587" fill="#000000" font-family="sans-serif" font-size="14.356px" letter-spacing="0px" stroke-width=".14954" word-spacing="0px" style="line-height:1.25" xml:space="preserve"><tspan x="111.3986" y="59.660587" stroke-width=".14954">'+etk.opt+'</tspan></text></g></g>';
sDis += this.ScriviLabel(info.pos, etk, obj);
sDis += '</g>';
return sDis;
}

setupCurrentScale(dimensioni, dim_target) {
      let info = new Object();
      info.scale = 0;
      info.pos = 0;
      

  try {
      let scale = 1;

      if (dim_target.w == 0 && dim_target.h == 0) {
          scale = 1;
      } 
      else 
      {
          if (dim_target.w != 0 && dim_target.h == 0) {
              scale = (dimensioni.w != 0) ? parseFloat(dim_target.w / dimensioni.w) : 1;
          } else 
          {
              if (dim_target.w == 0 && dim_target.h != 0) {
                  scale = (dimensioni.h != 0) ? parseFloat(dim_target.h / dimensioni.h) : 1;
              } else {
                  scale = (dimensioni.w != 0) ? parseFloat(dim_target.w / dimensioni.w) : 1;
              }
          }
      }

      let pos = {
          x: 0,
          y: 0
      };

      if (this.LAST_X_POSITION_ON_GRID + scale * dimensioni.w > 189) {
          this.LAST_X_POSITION_ON_GRID = this.FIRST_X_POSITION_ON_GRID;
          this.LAST_Y_POSITION_ON_GRID += parseFloat(scale * dimensioni.h);
          this.LAST_ROW_ON_GRID++;
      }

      pos.x = this.LAST_X_POSITION_ON_GRID;
      pos.y = this.LAST_Y_POSITION_ON_GRID;
      this.LAST_X_POSITION_ON_GRID += parseFloat(scale * dimensioni.w);

      
      info.scale = scale;
      info.pos = pos;
      
  } catch (error) {
      console.log(error);
  } 
  return info;        

}

ScriviLabel(posX, etk, obj) {

  let fontSize = this.ALTEZZA_RIQUADRI / 9;
  // 2
  let pos = {
      x: posX.x + fontSize,
      y: posX.y + fontSize
  };
  let sDis = '';
  sDis += '<g>';

  sDis += '<circle cx="' + pos.x + '" cy="' + pos.y + '" r="' + fontSize + '" style="fill:orange;stroke:black;stroke-width:0.3;" />';
  sDis += '<text x="' + parseFloat(pos.x - 0 * 0.5 * fontSize) + '" y="' + pos.y + '"  alignment-baseline="middle" text-anchor="middle" style="fill:black; stroke:none;  font-size: ' + fontSize + 'px;"> ' + etk.pallinatura + ' </text>';

  fontSize = 2;
  pos = {
      x: posX.x + fontSize,
      y: posX.y + fontSize
  };


  if (etk.lunghezza !== 0) {
      sDis += '<text x="' + parseFloat(posX.x + 15 * fontSize) + '" y="' + parseFloat(posX.y + this.ALTEZZA_RIQUADRI + fontSize - 2 * fontSize) + '"  text-anchor="middle" font-weight="bold" alignment-baseline="middle" style="fill:black; stroke:none;  font-size: ' + 2 * fontSize + 'px;"> ' + etk.lunghezza + 'm </text>';
  }


  sDis += '<rect x="' + posX.x + '" y="' + parseFloat(posX.y + this.ALTEZZA_RIQUADRI - 2 * fontSize) + '" width="' + 2.5 * fontSize + '" height="' + 2 * fontSize + '" style="fill:white;stroke:black;stroke-width:.2;" />';
  sDis += '<text x="' + parseFloat(pos.x + (0) * fontSize) + '" y="' + parseFloat(posX.y + this.ALTEZZA_RIQUADRI + 1.2 * fontSize - 2 * fontSize) + '"   font-weight="bold" alignment-baseline="middle" text-anchor="middle" style="fill:blue; stroke:none;  font-size: ' + 1.5 * fontSize + 'px;"> ' + etk.counter + ' </text>';

  if (etk.smeup !== '') {
      sDis += '<rect x="' + parseFloat(posX.x + 3 * fontSize) + '" y="' + parseFloat(posX.y + this.ALTEZZA_RIQUADRI - 2 * fontSize) + '" width="' + 6 * fontSize + '" height="' + 2 * fontSize + '" style="fill:yellow;stroke:black;stroke-width:0.2;" />';
      sDis += '<text x="' + parseFloat(posX.x + 6 * fontSize) + '" y="' + parseFloat(posX.y + this.ALTEZZA_RIQUADRI + fontSize - 2 * fontSize) + '"   font-weight="bold" alignment-baseline="middle" text-anchor="middle" style="fill:black; stroke:none;  font-size: ' + 1.5 * fontSize + 'px;"> ' + etk.smeup + ' </text>';
  }

  sDis += '</g>';
  return sDis;
}

disegnaElementiElettronici(etichetta)
{
let sDis = '';
this.ALTEZZA_RIQUADRI = 36

let num_righe_usate    = 1;



let DeltaCornicetta = 5;
let max_altezza        = parseFloat(282-4*DeltaCornicetta);
let max_contenimento   = parseFloat(0.7*max_altezza)

this.FIRST_X_POSITION_ON_GRID = parseFloat(2*DeltaCornicetta);
this.FIRST_Y_POSITION_ON_GRID = (max_altezza-parseFloat(COMPONENTS_FLAG.filter(el=> {return el.counter>0;}).length)*ALTEZZA_RIQUADRI/3)/2; //165;
this.LAST_X_POSITION_ON_GRID = this.FIRST_X_POSITION_ON_GRID;
this.LAST_Y_POSITION_ON_GRID = this.FIRST_Y_POSITION_ON_GRID;
this.LAST_ROW_ON_GRID = 1;
let dim_target = {w:0, h:this.ALTEZZA_RIQUADRI};
for(let i=0;i<this.COMPONENTS_FLAG.length;i++)
{
 let tmpstr = this.DisegnaIconaComponenteUsato(this.COMPONENTS_FLAG[i].name, dim_target, null);
}

num_righe_usate = this.LAST_ROW_ON_GRID;

let errore = false;

do{
  errore = false;
  dim_target = {w:0, h:this.ALTEZZA_RIQUADRI};

  this.FIRST_X_POSITION_ON_GRID = parseFloat(2*DeltaCornicetta);
  this.FIRST_Y_POSITION_ON_GRID = parseFloat((max_altezza-(num_righe_usate*this.ALTEZZA_RIQUADRI))/2); //165;
  this.LAST_X_POSITION_ON_GRID = this.FIRST_X_POSITION_ON_GRID;
  this.LAST_Y_POSITION_ON_GRID = this.FIRST_Y_POSITION_ON_GRID;
  this.LAST_ROW_ON_GRID = 1;

  for(let i=0;i<this.COMPONENTS_FLAG.length;i++)
  {
   let tmpstr = this.DisegnaIconaComponenteUsato(this.COMPONENTS_FLAG[i].name, dim_target, null);
  }
  num_righe_usate = this.LAST_ROW_ON_GRID;
  if(parseFloat(num_righe_usate*this.ALTEZZA_RIQUADRI)>max_contenimento)
  {
    this.ALTEZZA_RIQUADRI = parseInt(this.ALTEZZA_RIQUADRI-1);
    errore = true;
  }
} while(errore==true && ALTEZZA_RIQUADRI>10);

this.FIRST_X_POSITION_ON_GRID = parseFloat(2*DeltaCornicetta);
this.FIRST_Y_POSITION_ON_GRID = parseFloat((max_altezza-(num_righe_usate*this.ALTEZZA_RIQUADRI))/2); //165;
this.LAST_X_POSITION_ON_GRID = this.FIRST_X_POSITION_ON_GRID;
this.LAST_Y_POSITION_ON_GRID = this.FIRST_Y_POSITION_ON_GRID;
this.LAST_ROW_ON_GRID = 1;


for(let i=0;i<this.COMPONENTS_FLAG.length;i++)
{
 let tmpstr = this.DisegnaIconaComponenteUsato(this.COMPONENTS_FLAG[i].name, dim_target, null);
 sDis += tmpstr;
}

let out = {};
out.sDis  = sDis;
out.H     = parseFloat(max_contenimento);
out.W     = parseFloat(out.H/1.414);

return out;
}


EseguiFunzione(f, p1, p2, obj, lunghezza=0) {
  //return f(p1, p2, obj, lunghezza);
  return f.call(this, p1, p2, obj, lunghezza);
}

DisegnaIconaComponenteUsato(label, dim_target, obj) {
  let sDis = '';
  if (this.SetGetFLAG(label, 0).valore) {
      //console.log('funzione: '+SetGetFLAG(label, 0).funzione);
      sDis += this.EseguiFunzione(this.SetGetFLAG(label, 0).funzione, dim_target, this.SetGetFLAG(label, 0), obj);
  }
  return sDis;
}

SetGetFLAG(name, type, new_value=null) {
  let found = false;
  let valore = false;
  let contatore = 0;
  let pallinatura = '';
  let funzione = null;
  let smeup = '';
  let lunghezza = 0;
  let opt = '';

  for (let i = 0; i < this.COMPONENTS_FLAG.length; i++) {
      if (this.COMPONENTS_FLAG[i].name == name) {
          found = true;
          pallinatura = this.COMPONENTS_FLAG[i].pallinatura;
          funzione = this.COMPONENTS_FLAG[i].funzione;
          smeup = this.COMPONENTS_FLAG[i].smeup;
          opt = this.COMPONENTS_FLAG[i].opt;
          //get
          if (type == 0) {
              valore = this.COMPONENTS_FLAG[i].active;

              if (typeof (this.COMPONENTS_FLAG[i].lunghezza) !== 'undefined') 
              {
                  lunghezza = this.COMPONENTS_FLAG[i].lunghezza;
              }
          }

          //set
          if (type == 1) {
              this.COMPONENTS_FLAG[i].active = (new_value !== null) ? new_value : false;
              valore = this.COMPONENTS_FLAG[i].active;
              if (valore == false)
                  this.COMPONENTS_FLAG[i].counter = 0;
              if (valore == true)
                  this.COMPONENTS_FLAG[i].counter++;

          }
          contatore = this.COMPONENTS_FLAG[i].counter;
      }
  }

  let info = new Object();
  info.found = found;
  info.valore = valore && found;
  info.counter = contatore;
  info.pallinatura = pallinatura;
  info.funzione = funzione;
  info.smeup = smeup;
  info.lunghezza = lunghezza;
  info.opt = opt;

  return info;
}

USINGComponents(name, type, new_value=null) {
  let found = false;
  let valore = false;
  let contatore = 0;
  let pallinatura = '';
  let funzione = null;
  let smeup = '';
  let lunghezza = 0;
  let opt = '';

  for (let i = 0; i < this.COMPONENTS_FLAG.length; i++) {
      if (this.COMPONENTS_FLAG[i].name == name) {
          found       = true;
          pallinatura = this.COMPONENTS_FLAG[i].pallinatura;
          funzione    = this.COMPONENTS_FLAG[i].funzione;
          smeup       = this.COMPONENTS_FLAG[i].smeup;
          opt         = this.COMPONENTS_FLAG[i].opt;

          //get
          if (type == 0) {
              valore  = this.COMPONENTS_FLAG[i].active;

              if (typeof (this.COMPONENTS_FLAG[i].lunghezza) !== 'undefined') {
                  lunghezza = this.COMPONENTS_FLAG[i].lunghezza;
                  ////console.log(COMPONENTS_FLAG[i]);
              }
          }

          //set
          if (type == 1) {
              this.COMPONENTS_FLAG[i].active = (new_value !== null) ? new_value : false;
              valore  = this.COMPONENTS_FLAG[i].active;
              if (valore == false)
                  this.COMPONENTS_FLAG[i].counter = 0;
              if (valore == true)
                  this.COMPONENTS_FLAG[i].counter++;

              ////console.log(  COMPONENTS_FLAG[i]);
          }
          contatore = this.COMPONENTS_FLAG[i].counter;
      }
  }

  let info = new Object();
  info.found          = found;
  info.valore         = valore && found;
  info.counter        = contatore;
  info.pallinatura    = pallinatura;
  info.funzione       = funzione;
  info.smeup          = smeup;
  info.lunghezza      = lunghezza;
  info.opt            = opt;

  return info;
}

PallinaOggetto(posC, offset, etk, visible=true) {

  let fontSize = offset.scala * 4/this.grafica.scala;
  /*
  if (fontSize > 5)
      fontSize = 5;
  if (fontSize < 5)
      fontSize = 5;
  */

  //if(fontSize>30) fontSize = 30;
  //if(fontSize<15) fontSize = 15;
  let gainFont = 1;
  if (etk.length > 1)
      gainFont = 0.55;
  if (etk.length > 2)
      gainFont = 0.35;

  let delta = {
      x: parseFloat(offset.scala * offset.R * Math.cos(offset.angle * Math.PI / 180)),
      y: parseFloat(offset.scala * offset.R * Math.sin(offset.angle * Math.PI / 180))
  };
  let pos = {
      x: parseFloat(posC.x + delta.x),
      y: parseFloat(posC.y + delta.y)
  };
  let sDis = '';
  if (visible) {
      sDis += '<g>';
      sDis += '<line x1="' + posC.x + '" y1="' + posC.y + '" x2="' + pos.x + '" y2="' + pos.y + '" style="fill:orange;stroke:orange;stroke-width:0.2%;" />';
      sDis += '<circle cx="' + pos.x + '" cy="' + pos.y + '" r="' + 0.55 * fontSize + '" style="fill:orange;stroke:white;stroke-width:0.3;" />';
      sDis += '<text x="' + parseFloat(pos.x - 0 * 0.51 * fontSize) + '" y="' + pos.y + '" text-anchor="middle"  alignment-baseline="middle" style="fill:black; stroke:none;  font-size: ' + gainFont * fontSize + 'px;"> ' + etk + ' </text>';
      //
      sDis += '</g>';
  }
  return sDis;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
ElaboraLunghezza(obj, thismax, rule)
{
let out = {};
out.toAdd = [];
out.toDel = [];
let tmp = this.cloneMyObj(obj);
let n_pezzi = 1;
let resto = 0;
if(tmp.lunghezza>thismax)
{
   resto =  tmp.lunghezza%thismax;
   n_pezzi  = Math.trunc(tmp.lunghezza/thismax);
   n_pezzi  += (resto>0)?1:0;
   //console.log(tmp.lunghezza, thismax, n_pezzi, resto);
   
   for(let i=0;i<n_pezzi;i++)
    {
       let newX = this.cloneMyObj(tmp);
       if(i==0)
        {
          if(rule=="1-x")
            newX.lunghezza = (resto<100)?parseFloat(thismax-(100-resto)):thismax;
          else
            newX.lunghezza = ((tmp.lunghezza)/2);
        }
       else
       {
        if(i==n_pezzi-1)
        {   
          if(rule=="1-x")
            newX.lunghezza = (resto<100)?parseFloat(100):resto;
          else
            newX.lunghezza = ((tmp.lunghezza)/2);
        }
        else
        {
          newX.lunghezza = thismax;
        }
       }
       newX.peso = parseFloat(newX.lunghezza/tmp.lunghezza*tmp.peso);
       newX.ref += "/"+parseInt(i+1)+"."+n_pezzi;
       out.toAdd.push(this.cloneMyObj(newX));  
    }
    out.toDel.push(tmp); 
    
}
else
{

}
out.toDel = out.toDel.flat();
out.toAdd = out.toAdd.flat();

//console.log(out);
return out;
}


sistemaProfiliInBOM()
{
let toAdd = [];
let toDel = [];
let elabora = {};
let copia = this.cloneMyObj(this.BOM);
for(let i=0;i<copia.length;i++)
{
  let tmp = this.cloneMyObj(copia[i]);
  switch (tmp.name) {
    case "PROFILO STRUTTURALE ESTERNO":
    case "PROFILO STRUTTURALE INTERNO":
         elabora = this.cloneMyObj(this.ElaboraLunghezza(tmp, 705, "1-x"));
         //console.log(elabora);
         if(elabora.toAdd.length>0) toAdd.push(elabora.toAdd);
         if(elabora.toDel.length>0) toDel.push(elabora.toDel);
         if(elabora.toAdd.length>0)
         {
           this.insert4BOM({name:'GIUNZIONE PROFILI', n: parseFloat(elabora.toAdd.length-1),   gruppo:tmp.ref, lunghezza:0, codifica:tmp.codifica});
           //console.log(parseFloat(elabora.toAdd.length-1));
         }
    break;
    
    case "PROFILO COVER ESTERNA":
         elabora = this.ElaboraLunghezza(tmp, 705, "x-x");
         if(elabora.toAdd.length>0) toAdd.push(elabora.toAdd);
         if(elabora.toDel.length>0) toDel.push(elabora.toDel);
         if(elabora.toAdd.length>0)
         {
          this.insert4BOM({name:'GIUNZIONE COVER', n: parseFloat(elabora.toAdd.length-1),   gruppo:tmp.ref, lunghezza:0, codifica:tmp.codifica});
          //console.log(parseFloat(elabora.toAdd.length-1));
         }
    break;

    case "PROFILO CON CAVA":
        elabora = this.ElaboraLunghezza(tmp, 600, "x-x");
        if(elabora.toAdd.length>0) toAdd.push(elabora.toAdd);
        if(elabora.toDel.length>0) toDel.push(elabora.toDel);
    break;

    case "PROFILO A C":
        elabora = this.ElaboraLunghezza(tmp, 600, "x-x");
        if(elabora.toAdd.length>0) toAdd.push(elabora.toAdd);
        if(elabora.toDel.length>0) toDel.push(elabora.toDel);
    break;
    
    case "PROFILO A L":
        elabora = this.ElaboraLunghezza(tmp, 600, "x-x");
        if(elabora.toAdd.length>0) toAdd.push(elabora.toAdd);
        if(elabora.toDel.length>0) toDel.push(elabora.toDel);
    break;
  
    default:
      break;
  }
}
//console.log(toAdd);
// console.log(this.cloneMyObj(toDel));

// console.log(this.cloneMyObj(this.BOM));
for(let i=0;i<toDel.length;i++)      
{
  for(let j=0;j<toDel[i].length;j++)
    {
      //console.log(toDel[i][j].ref, toDel[i][j].name);
      let tmp = this.BOM.filter((el)=> {return !(el.ref==toDel[i][j].ref&&el.name==toDel[i][j].name);});
      this.BOM = this.cloneMyObj(tmp);
    }          
}  
// console.log(this.cloneMyObj(this.BOM));
//for(let i=0;i<toAdd.length;i++)  this.BOM.push(this.cloneMyObj(toAdd[i]));

for(let i=0;i<toAdd.length;i++)      
{
  for(let j=0;j<toAdd[i].length;j++)
    {
      //console.log(toAdd[i][j].ref, toAdd[i][j].name);
      this.BOM.push(this.cloneMyObj(toAdd[i][j]));
    }          
}  
}




}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////




// nuova funzione che crea l'oggetto da fornire alla classe;
function setNEWobject(ORDINE, LINGUA,
                      MODELLO_TENDA,
                      DIM_X, DIM_Y,
                      TYPE_ANG_A, TYPE_ANG_B, TYPE_ANG_C, TYPE_ANG_D,
                      TOP_ANG_A, TOP_ANG_B, TOP_ANG_C, TOP_ANG_D,
                      OPTIONAL_ANG_A, OPTIONAL_ANG_B, OPTIONAL_ANG_C, OPTIONAL_ANG_D,
                      LATO_SBALZO_A, LATO_SBALZO_B, LATO_SBALZO_C, LATO_SBALZO_D,
                      NUM_GAMBE_AGG_AB, NUM_GAMBE_AGG_BC, NUM_GAMBE_AGG_CD, NUM_GAMBE_AGG_AD,
                      DISTANZA_Y_SBALZO_A, DISTANZA_Y_SBALZO_B, DISTANZA_Y_SBALZO_C, DISTANZA_Y_SBALZO_D,
                      DISTANZA_X_SBALZO_A, DISTANZA_X_SBALZO_B, DISTANZA_X_SBALZO_C, DISTANZA_X_SBALZO_D,
                      DISTANZA_LGAD1, DISTANZA_LGAB1, DISTANZA_LGBC1, DISTANZA_LGCD1, DISTANZA_LGAD2, DISTANZA_LGAB2, DISTANZA_LGBC2, DISTANZA_LGCD2,
                      DELTA_SP_VAR,
                      CHIUSURA_X1, CHIUSURA_X2, CHIUSURA_Y1, CHIUSURA_Y2, CHIUSURA_X3,  CHIUSURA_X4,  CHIUSURA_Y3,  CHIUSURA_Y4, CHIUSURA_X5,  CHIUSURA_X6,  CHIUSURA_Y5,  CHIUSURA_Y6,  
                      CHIUS_SUCCESSIVA_B, CHIUS_SUCCESSIVA_C, CHIUS_SUCCESSIVA_D,
                      OFFSET_A, OFFSET_B, OFFSET_C, OFFSET_D,
                      TIPO_PAVIMENTAZIONE,
                      FLOOR_EL_DIMENSION_W, FLOOR_EL_DIMENSION_H, FLOOR_EL_DIMENSION_T, FLOOR_EL_WEIGHT, FLOOR_EL_ORIENTATION, FLOOR_EL_PHASE_DISP,
                      PEDANA_ADD_IN_AB, PEDANA_ADD_IN_BC, PEDANA_ADD_IN_CD, PEDANA_ADD_IN_AD,
                      TIPO_BALLAST, BALLAST_EL_DIMENSION_W, BALLAST_EL_DIMENSION_H, BALLAST_EL_DIMENSION_T, BALLAST_EL_WEIGHT, REQUIRED_BALLAST, TAILORED_BALLAST,
                      STRIP_LED_AB, STRIP_LED_BC, STRIP_LED_CD, STRIP_LED_AD, POWER_A, POWER_B, POWER_C, POWER_D, MOTORIZZAZIONE,
                      DISLIVELLO_A, DISLIVELLO_B, DISLIVELLO_C, DISLIVELLO_D,
                      MARTINETTI_PREMIUM,
                      TABELLA_COSTI,
                      TIPO_RGB

)
{

  //----------------------------------
  const CleanInput            = (input)   => {return parseInt(input.split('-')[0]);}
  const testCoupling          = (top, valore, passi, quanto) => {return (top==valore)?parseFloat(quanto*passi):0;} 
  const SumIFActive           = (x, flag) => {return (flag==1)?parseFloat(x):0;}
  const ConsideraSPVariabile  = (test, lato, modello, MARKER_SPORGENZA_VARIABILE_A1P1, MARKER_SPORGENZA_VARIABILE_A2P2,
                                 DELTA_SP_VAR) => {let offset = 0; if(test && lato=='A1P1' && MARKER_SPORGENZA_VARIABILE_A1P1 == false){ MARKER_SPORGENZA_VARIABILE_A1P1 = true; offset =  (modello=='SWAY'||modello=='ECO JOY')?0:DELTA_SP_VAR;}if(test && lato=='A2P2' && MARKER_SPORGENZA_VARIABILE_A2P2 == false){MARKER_SPORGENZA_VARIABILE_A2P2 = true;offset =  (modello=='SWAY'||modello=='ECO JOY')?0:DELTA_SP_VAR;}  return {offset: offset, m1: MARKER_SPORGENZA_VARIABILE_A1P1, m2:MARKER_SPORGENZA_VARIABILE_A2P2};}
  //----------------------------------

let GAMBA_INTERA = 0;
let GAMBA_MEZZA  = 0;

let ANG_A = {type:CleanInput(TYPE_ANG_A), top:CleanInput(TOP_ANG_A), opt:CleanInput(OPTIONAL_ANG_A), etk:'A', pow:CleanInput(POWER_A)};
let ANG_B = {type:CleanInput(TYPE_ANG_B), top:CleanInput(TOP_ANG_B), opt:CleanInput(OPTIONAL_ANG_B), etk:'B', pow:CleanInput(POWER_B)};
let ANG_C = {type:CleanInput(TYPE_ANG_C), top:CleanInput(TOP_ANG_C), opt:CleanInput(OPTIONAL_ANG_C), etk:'C', pow:CleanInput(POWER_C)};
let ANG_D = {type:CleanInput(TYPE_ANG_D), top:CleanInput(TOP_ANG_D), opt:CleanInput(OPTIONAL_ANG_D), etk:'D', pow:CleanInput(POWER_D)}; 


let ACT_BY      = false;
let ACT_AY      = false;
let ACT_AB1     = false;
let ACT_AB2     = false;
let ACT_BX      = false;
let ACT_CX      = false;
let ACT_BC1     = false;
let ACT_BC2     = false;
let ACT_CY      = false;
let ACT_DY      = false;
let ACT_CD1     = false;
let ACT_CD2     = false;
let ACT_AX      = false;
let ACT_DX      = false;
let ACT_AD1     = false;
let ACT_AD2     = false;


let ACT_NUM_BY	= 0;
let ACT_NUM_AY	= 0;
let ACT_NUM_Y3	= 0;
let ACT_NUM_Y5	= 0;
let ACT_NUM_BX	= 0;
let ACT_NUM_CX	= 0;
let ACT_NUM_X3	= 0;
let ACT_NUM_X5	= 0;
let ACT_NUM_CY	= 0;
let ACT_NUM_DY	= 0;
let ACT_NUM_Y4	= 0;
let ACT_NUM_Y6	= 0;
let ACT_NUM_AX	= 0;
let ACT_NUM_DX	= 0;
let ACT_NUM_X4	= 0;
let ACT_NUM_X6	= 0;

if ((OPTIONAL_ANG_A.split('-')[0]=='3')&&(LATO_SBALZO_A.split('-')[0]!=='1'))   {ACT_AY  = true; ACT_NUM_AY	= 1;}
if ((OPTIONAL_ANG_B.split('-')[0]=='3')&&(LATO_SBALZO_B.split('-')[0]!=='1'))   {ACT_BY  = true; ACT_NUM_BY	= 1;}

let dimensioni       = {};
dimensioni.nominali  = {
      sporgenza: DIM_Y,
      larghezza: DIM_X,
      gamba    : 13,
      delta_sporgenze_variabili: 0,
      limite_gamba:1000
  };


if(MODELLO_TENDA=='ECO JOY'||
   MODELLO_TENDA=='JOY'||
   MODELLO_TENDA=='TWIST'||
   MODELLO_TENDA=='VARIA'||
   MODELLO_TENDA=='AZIMUT'||
   MODELLO_TENDA=='ZENIT'||
   MODELLO_TENDA=='SIRIO'||
   MODELLO_TENDA=='VELVET'||
   MODELLO_TENDA=='VELVET PLUS'||
   MODELLO_TENDA=='SWAY'
   )
  {
  /////////////////////////////////////////////////////////////////////////////////////////////////////////
  // calcolo intervento gamba intermedia
  let CORR_AB_INTERM  = 0;  // forzatura della vairabile
  let CORR_CD_INTERM  = 0;



  

  switch (MODELLO_TENDA) {
    case 'ECO JOY':
      //dimensioni.nominali.limite_gamba = 488;
      dimensioni.nominali.gamba = 11;
      break;
    case 'JOY':
    case 'SWAY':  
      //dimensioni.nominali.limite_gamba = 610;
      dimensioni.nominali.gamba = 13;
      break;
    case 'TWIST':
    case 'VELVET':  
      //dimensioni.nominali.limite_gamba = 650;
      dimensioni.nominali.gamba = 15;
      break;
    case 'VARIA':
    case 'VELVET PLUS':  
      //dimensioni.nominali.limite_gamba = 600;
      dimensioni.nominali.gamba = 17;
      break;
    case 'ZENIT':  
      //dimensioni.nominali.limite_gamba = 710;
      dimensioni.nominali.gamba = 15;
      break;
    case 'AZIMUT':
      //dimensioni.nominali.limite_gamba = 600;
      dimensioni.nominali.gamba = 17;
      break;
    case 'SIRIO':
      //dimensioni.nominali.limite_gamba = 750;
      dimensioni.nominali.gamba = 13;
      break;
      
  }

  

  //TEST_ME(letiable, number)

  if  (DIM_Y > dimensioni.nominali.limite_gamba)
  {

    //---------------------
    if   (((
           ANG_A.top == 1 && ANG_A.type == 3 || ANG_A.top == 7 && ANG_A.type == 3
         )
         &&
         (
           ANG_B.top == 2 && ANG_B.type == 3 || ANG_B.top == 7 && ANG_B.type == 3
         ))
        )
      {
      }
    else
        {
          CORR_AB_INTERM = 1;
        }
    //---------------------

    if (
        (
         (
          ANG_D.top == 4 && ANG_D.type == 3 || ANG_D.top == 8 && ANG_A.type == 3
         )
         &&
         (
          ANG_C.top == 3 && ANG_C.type == 3 || ANG_C.top == 8 && ANG_C.type == 3
         )
        )
        ||
         ANG_D.top == 5 && ANG_C.top == 6
       )
       {

       }
    else
        {
            CORR_CD_INTERM = 1;

        }

  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////
  if (NUM_GAMBE_AGG_AB.split('-')[0]!=='1'||(CORR_AB_INTERM == 1))                 {ACT_AB1 = true; ACT_NUM_Y3	= 1;}
  if (NUM_GAMBE_AGG_CD.split('-')[0]!=='1'||(CORR_CD_INTERM == 1))                 {ACT_CD1 = true; ACT_NUM_Y4	= 1;}
  }
  else
  {
      if (NUM_GAMBE_AGG_AB.split('-')[0]!=='1')                                        {ACT_AB1 = true; ACT_NUM_Y3	= 1;}
      if (NUM_GAMBE_AGG_CD.split('-')[0]!=='1')                                        {ACT_CD1 = true; ACT_NUM_Y4	= 1;}
  }
  
  GAMBA_INTERA = dimensioni.nominali.gamba;
  GAMBA_MEZZA  = dimensioni.nominali.gamba/2;


  if (NUM_GAMBE_AGG_AB.split('-')[0]=='3')                                          {ACT_AB2 = true; ACT_NUM_Y5	= 1;}
  if ((OPTIONAL_ANG_B.split('-')[0]=='3')&&(LATO_SBALZO_B.split('-')[0]!=='2'))     {ACT_BX  = true; ACT_NUM_BX	= 1;}
  if ((OPTIONAL_ANG_C.split('-')[0]=='3')&&(LATO_SBALZO_C.split('-')[0]!=='2'))     {ACT_CX  = true; ACT_NUM_CX	= 1;}
  if (NUM_GAMBE_AGG_BC.split('-')[0]!=='1')                                         {ACT_BC1 = true; ACT_NUM_X3	= 1;}
  if (NUM_GAMBE_AGG_BC.split('-')[0]=='3')                                          {ACT_BC2 = true; ACT_NUM_X5	= 1;}
  if ((OPTIONAL_ANG_C.split('-')[0]=='3')&&(LATO_SBALZO_C.split('-')[0]!=='1'))     {ACT_CY  = true; ACT_NUM_CY	= 1;}
  if ((OPTIONAL_ANG_D.split('-')[0]=='3')&&(LATO_SBALZO_D.split('-')[0]!=='1'))     {ACT_DY  = true; ACT_NUM_DY	= 1;}
  if (NUM_GAMBE_AGG_CD.split('-')[0]=='3')                                          {ACT_CD2 = true; ACT_NUM_Y6	= 1;}
  if ((OPTIONAL_ANG_A.split('-')[0]=='3')&&(LATO_SBALZO_A.split('-')[0]!=='2'))     {ACT_AX  = true; ACT_NUM_AX	= 1;}
  if ((OPTIONAL_ANG_D.split('-')[0]=='3')&&(LATO_SBALZO_D.split('-')[0]!=='2'))     {ACT_DX  = true; ACT_NUM_DX	= 1;}
  if (NUM_GAMBE_AGG_AD.split('-')[0]!=='1')                                         {ACT_AD1 = true; ACT_NUM_X4	= 1;}
  if (NUM_GAMBE_AGG_AD.split('-')[0]=='3')                                          {ACT_AD2 = true; ACT_NUM_X6	= 1;}


  //CREAZIONE OGGETTI GAMBE AGGIUNTIVE

  let ab = {};
  ab.GA_S1 = {active: ACT_AY}; //GAMBA SBALZO AY
  ab.GA_S2 = {active: ACT_BY}; //GAMBA SBALZO BY
  ab.GA_A1 = {active: ACT_AB1}; //GAMBA AGGIUNTIVA AB1
  ab.GA_A2 = {active: ACT_AB2}; //GAMBA AGGIUNTIVA AB2

  let bc = {};
  bc.GA_S1 = {active: ACT_BX}; //GAMBA SBALZO BX
  bc.GA_S2 = {active: ACT_CX}; //GAMBA SBALZO CX
  bc.GA_A1 = {active: ACT_BC1}; //GAMBA AGGIUNTIVA BC1
  bc.GA_A2 = {active: ACT_BC2};	//GAMBA AGGIUNTIVA BC2

  let cd = {};
  cd.GA_S1 = {active: ACT_DY}; //GAMBA SBALZO BY
  cd.GA_S2 = {active: ACT_CY};	//GAMBA SBALZO AY
  cd.GA_A1 = {active: ACT_CD1}; //GAMBA AGGIUNTIVA AB1
  cd.GA_A2 = {active: ACT_CD2}; //GAMBA AGGIUNTIVA AB1

  let ad = {};
  ad.GA_S1 = {active: ACT_AX}; //GAMBA SBALZO DX
  ad.GA_S2 = {active: ACT_DX};	//GAMBA SBALZO AX
  ad.GA_A1 = {active: ACT_AD1}; //GAMBA AGGIUNTIVA AD1
  ad.GA_A2 = {active: ACT_AD2}; //GAMBA AGGIUNTIVA AD2

  let gamba_agg = {};
  gamba_agg.ab    = ab;
  gamba_agg.bc    = bc;
  gamba_agg.cd    = cd;
  gamba_agg.ad    = ad; 

///////////////////////////////////////
let ACT_C_AY = false;
let ACT_C_BY = false;
let ACT_C_Y1 = false;
let ACT_C_Y2 = false;
let ACT_C_Y3 = false;
let ACT_C_Y4 = false;
let ACT_C_Y5 = false;
let ACT_C_Y6 = false;
let ACT_C_CY = false;
let ACT_C_DY = false;
let ACT_C_BX = false;
let ACT_C_CX = false;
let ACT_C_X1 = false;
let ACT_C_X2 = false;
let ACT_C_X3 = false;
let ACT_C_X4 = false;
let ACT_C_X5 = false;
let ACT_C_X6 = false;
let ACT_C_AX = false;
let ACT_C_DX = false;




const setMotPos = (chiusura) => {
    if(chiusura.split('-').length>1)
    {
      let etk = chiusura.split('-')[1];
      switch (etk) {
        case 'Left':
          return 1;
          break;
        case 'Right':
          return 2;
          break;
        case 'Standard':
          return 3;
          break;
        default:
          return 3;
      }
    }
    return 0;
  };

  const setGlassThreads = (chiusura) => {

      if(typeof chiusura == 'undefined') return 0;

      if(chiusura.split('-').length>1)
      {
        let etk = chiusura.split('-')[1];
        switch (etk) {
          case 'Left':
            return 1;
            break;
          case 'Right':
            return 2;
            break;
          case 'Standard':
            return 3;
            break;
          default:
            return 3;
        }
      }
      return 0;
    };


// vanni
let T_ACT_C_AY = 0;
let T_ACT_C_BY = 0;
let T_ACT_C_Y1 = setMotPos(CHIUSURA_Y1);//(CHIUSURA_Y1.split('-')[1]=='Left')?1:2;
let T_ACT_C_Y2 = setMotPos(CHIUSURA_Y2);//(CHIUSURA_Y2.split('-')[1]=='Left')?1:2;
let T_ACT_C_Y3 = setMotPos(CHIUSURA_Y3);//(CHIUSURA_Y3.split('-')[1]=='Left')?1:2;
let T_ACT_C_Y4 = setMotPos(CHIUSURA_Y4);//(CHIUSURA_Y4.split('-')[1]=='Left')?1:2;
let T_ACT_C_Y5 = setMotPos(CHIUSURA_Y5);//(CHIUSURA_Y5.split('-')[1]=='Left')?1:2;
let T_ACT_C_Y6 = setMotPos(CHIUSURA_Y6);//(CHIUSURA_Y6.split('-')[1]=='Left')?1:2;
let T_ACT_C_CY = 0;
let T_ACT_C_DY = 0;
let T_ACT_C_BX = 0;
let T_ACT_C_CX = 0;
let T_ACT_C_X1 = setMotPos(CHIUSURA_X1);//(CHIUSURA_X1.split('-')[1]=='Left')?1:2;
let T_ACT_C_X2 = setMotPos(CHIUSURA_X2);//(CHIUSURA_X2.split('-')[1]=='Left')?1:2;
let T_ACT_C_X3 = setMotPos(CHIUSURA_X3);//(CHIUSURA_X3.split('-')[1]=='Left')?1:2;
let T_ACT_C_X4 = setMotPos(CHIUSURA_X4);//(CHIUSURA_X4.split('-')[1]=='Left')?1:2;
let T_ACT_C_X5 = setMotPos(CHIUSURA_X5);//(CHIUSURA_X5.split('-')[1]=='Left')?1:2;
let T_ACT_C_X6 = setMotPos(CHIUSURA_X6);//(CHIUSURA_X6.split('-')[1]=='Left')?1:2;
let T_ACT_C_AX = 0;
let T_ACT_C_DX = 0;
/////

// solo vetrate su pedana

  let VETRATA_Y1 = CHIUSURA_Y1;
  let VETRATA_Y2 = CHIUSURA_Y2;
  let VETRATA_Y3 = CHIUSURA_Y3;
  let VETRATA_Y4 = CHIUSURA_Y4;
  let VETRATA_Y5 = CHIUSURA_Y5;
  let VETRATA_Y6 = CHIUSURA_Y6;

  let VETRATA_X1 = CHIUSURA_X1;
  let VETRATA_X2 = CHIUSURA_X2;
  let VETRATA_X3 = CHIUSURA_X3;
  let VETRATA_X4 = CHIUSURA_X4;
  let VETRATA_X5 = CHIUSURA_X5;
  let VETRATA_X6 = CHIUSURA_X6;

  let VET_SUCCESSIVA_B = (typeof CHIUS_SUCCESSIVA_B== 'undefined')?'':CHIUS_SUCCESSIVA_B;
  let VET_SUCCESSIVA_C = (typeof CHIUS_SUCCESSIVA_C== 'undefined')?'':CHIUS_SUCCESSIVA_C;
  let VET_SUCCESSIVA_D = (typeof CHIUS_SUCCESSIVA_D== 'undefined')?'':CHIUS_SUCCESSIVA_D;

  let VETRATA_YP1 = '';//CHIUSURA_YP1;
  let VETRATA_YP2 = '';//CHIUSURA_YP2;
  let VETRATA_YA2 = '';//CHIUSURA_YA2;
  let VETRATA_YA1 = '';//CHIUSURA_YA1;

  let VETRATA_XP1 = '';//CHIUSURA_XP1;
  let VETRATA_XP2 = '';//CHIUSURA_XP2;
  let VETRATA_XA1 = '';//CHIUSURA_XA1;
  let VETRATA_XA2 = '';//CHIUSURA_XA2;




let GLASS_ACT_C_AY = 0;
let GLASS_ACT_C_BY = 0;
let GLASS_ACT_C_Y1 = setGlassThreads(VETRATA_Y1);//(VETRATA_Y1.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_Y2 = setGlassThreads(VETRATA_Y2);//(VETRATA_Y2.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_Y3 = setGlassThreads(VETRATA_Y3);//(VETRATA_Y3.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_Y4 = setGlassThreads(VETRATA_Y4);//(VETRATA_Y4.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_Y5 = setGlassThreads(VETRATA_Y5);//(VETRATA_Y5.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_Y6 = setGlassThreads(VETRATA_Y6);//(VETRATA_Y6.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_CY = 0;
let GLASS_ACT_C_DY = 0;
let GLASS_ACT_C_BX = 0;
let GLASS_ACT_C_CX = 0;
let GLASS_ACT_C_X1 = setGlassThreads(VETRATA_X1);//(VETRATA_X1.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_X2 = setGlassThreads(VETRATA_X2);//(VETRATA_X2.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_X3 = setGlassThreads(VETRATA_X3);//(VETRATA_X3.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_X4 = setGlassThreads(VETRATA_X4);//(VETRATA_X4.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_X5 = setGlassThreads(VETRATA_X5);//(VETRATA_X5.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_X6 = setGlassThreads(VETRATA_X6);//(VETRATA_X6.split('-')[1]=='Left')?1:2;
let GLASS_ACT_C_AX = 0;
let GLASS_ACT_C_DX = 0;

let GLASS_ACT_C_YP1= setGlassThreads(VETRATA_YP1);
let GLASS_ACT_C_YP2= setGlassThreads(VETRATA_YP2);
let GLASS_ACT_C_YA1= setGlassThreads(VETRATA_YA1);
let GLASS_ACT_C_YA2= setGlassThreads(VETRATA_YA2);

let GLASS_ACT_C_XP1= setGlassThreads(VETRATA_XP1);
let GLASS_ACT_C_XP2= setGlassThreads(VETRATA_XP2);
let GLASS_ACT_C_XA1= setGlassThreads(VETRATA_XA1);
let GLASS_ACT_C_XA2= setGlassThreads(VETRATA_XA2);








if ((OPTIONAL_ANG_A.split('-')[0]=='3')&&(LATO_SBALZO_A.split('-')[0]!=='1'))   ACT_C_AY = true;
if ((OPTIONAL_ANG_B.split('-')[0]=='3')&&(LATO_SBALZO_B.split('-')[0]!=='1'))   ACT_C_BY = true;
if (CHIUSURA_Y1.split('-')[0]=='Yes')                                   ACT_C_Y1 = true;
if (CHIUSURA_Y2.split('-')[0]=='Yes')                                   ACT_C_Y2 = true;
if (CHIUSURA_Y3.split('-')[0]=='Yes')                                   ACT_C_Y3 = true;
if (CHIUSURA_Y4.split('-')[0]=='Yes')                                   ACT_C_Y4 = true;
if (CHIUSURA_Y5.split('-')[0]=='Yes')                                   ACT_C_Y5 = true;
if (CHIUSURA_Y6.split('-')[0]=='Yes')                                   ACT_C_Y6 = true;
if ((OPTIONAL_ANG_C.split('-')[0]=='3')&&(LATO_SBALZO_C.split('-')[0]!=='1'))   ACT_C_CY = true;
if ((OPTIONAL_ANG_D.split('-')[0]=='3')&&(LATO_SBALZO_D.split('-')[0]!=='1'))   ACT_C_DY = true;
if ((OPTIONAL_ANG_B.split('-')[0]=='3')&&(LATO_SBALZO_B.split('-')[0]!=='2'))   ACT_C_BX = true;
if ((OPTIONAL_ANG_C.split('-')[0]=='3')&&(LATO_SBALZO_C.split('-')[0]!=='2'))   ACT_C_CX = true;
if (CHIUSURA_X1.split('-')[0]=='Yes')                                   ACT_C_X1 = true;
if (CHIUSURA_X2.split('-')[0]=='Yes')                                   ACT_C_X2 = true;
if (CHIUSURA_X3.split('-')[0]=='Yes')                                   ACT_C_X3 = true;
if (CHIUSURA_X4.split('-')[0]=='Yes')                                   ACT_C_X4 = true;
if (CHIUSURA_X5.split('-')[0]=='Yes')                                   ACT_C_X5 = true;
if (CHIUSURA_X6.split('-')[0]=='Yes')                                   ACT_C_X6 = true;
if ((OPTIONAL_ANG_A.split('-')[0]=='3')&&(LATO_SBALZO_A!=='2'))   ACT_C_AX = true;
if ((OPTIONAL_ANG_D.split('-')[0]=='3')&&(LATO_SBALZO_D!=='2'))   ACT_C_DX = true;









let ACT_C_NB = false;
let ACT_C_NC = false;
let ACT_C_ND = false;

if(MODELLO_TENDA=='SWAY'||MODELLO_TENDA=='ECO JOY')
{

}
else
{
  if (CHIUS_SUCCESSIVA_B=='Yes')                                          ACT_C_NB = true;
  if (CHIUS_SUCCESSIVA_C=='Yes')                                          ACT_C_NC = true;
  if (CHIUS_SUCCESSIVA_D=='Yes')                                          ACT_C_ND = true;
}


if ((OPTIONAL_ANG_A.split('-')[0]=='3')&&(LATO_SBALZO_A.split('-')[0]!=='1'))   GLASS_ACT_C_AY = true;
if ((OPTIONAL_ANG_B.split('-')[0]=='3')&&(LATO_SBALZO_B.split('-')[0]!=='1'))   GLASS_ACT_C_BY = true;
if (VETRATA_Y1.split('-')[0]=='Yes')                                   GLASS_ACT_C_Y1 = true;
if (VETRATA_Y2.split('-')[0]=='Yes')                                   GLASS_ACT_C_Y2 = true;
if (VETRATA_Y3.split('-')[0]=='Yes')                                   GLASS_ACT_C_Y3 = true;
if (VETRATA_Y4.split('-')[0]=='Yes')                                   GLASS_ACT_C_Y4 = true;
if (VETRATA_Y5.split('-')[0]=='Yes')                                   GLASS_ACT_C_Y5 = true;
if (VETRATA_Y6.split('-')[0]=='Yes')                                   GLASS_ACT_C_Y6 = true;
if ((OPTIONAL_ANG_C.split('-')[0]=='3')&&(LATO_SBALZO_C.split('-')[0]!=='1'))   GLASS_ACT_C_CY = true;
if ((OPTIONAL_ANG_D.split('-')[0]=='3')&&(LATO_SBALZO_D.split('-')[0]!=='1'))   GLASS_ACT_C_DY = true;
if ((OPTIONAL_ANG_B.split('-')[0]=='3')&&(LATO_SBALZO_B.split('-')[0]!=='2'))   GLASS_ACT_C_BX = true;
if ((OPTIONAL_ANG_C.split('-')[0]=='3')&&(LATO_SBALZO_C.split('-')[0]!=='2'))   GLASS_ACT_C_CX = true;
if (VETRATA_X1.split('-')[0]=='Yes')                                   GLASS_ACT_C_X1 = true;
if (VETRATA_X2.split('-')[0]=='Yes')                                   GLASS_ACT_C_X2 = true;
if (VETRATA_X3.split('-')[0]=='Yes')                                   GLASS_ACT_C_X3 = true;
if (VETRATA_X4.split('-')[0]=='Yes')                                   GLASS_ACT_C_X4 = true;
if (VETRATA_X5.split('-')[0]=='Yes')                                   GLASS_ACT_C_X5 = true;
if (VETRATA_X6.split('-')[0]=='Yes')                                   GLASS_ACT_C_X6 = true;
if ((OPTIONAL_ANG_A.split('-')[0]=='3')&&(LATO_SBALZO_A.split('-')[0]!=='2'))   GLASS_ACT_C_AX = true;
if ((OPTIONAL_ANG_D.split('-')[0]=='3')&&(LATO_SBALZO_D.split('-')[0]!=='2'))   GLASS_ACT_C_DX = true;

let GLASS_ACT_C_NB = false;
let GLASS_ACT_C_NC = false;
let GLASS_ACT_C_ND = false;

if (VETRATA_YP1.split('-')[0]=='Yes')                                  GLASS_ACT_C_YP1 = true;
if (VETRATA_YP2.split('-')[0]=='Yes')                                  GLASS_ACT_C_YP2 = true;
if (VETRATA_YA1.split('-')[0]=='Yes')                                  GLASS_ACT_C_YA1 = true;
if (VETRATA_YA2.split('-')[0]=='Yes')                                  GLASS_ACT_C_YA2 = true;

if (VETRATA_XP1.split('-')[0]=='Yes')                                  GLASS_ACT_C_XP1 = true;
if (VETRATA_XP2.split('-')[0]=='Yes')                                  GLASS_ACT_C_XP2 = true;
if (VETRATA_XA1.split('-')[0]=='Yes')                                  GLASS_ACT_C_XA1 = true;
if (VETRATA_XA2.split('-')[0]=='Yes')                                  GLASS_ACT_C_XA2 = true;

if(MODELLO_TENDA=='SWAY'||MODELLO_TENDA=='ECO JOY')
{

}
else
{
  if (VET_SUCCESSIVA_B=='Yes')                                          GLASS_ACT_C_NB = true;
  if (VET_SUCCESSIVA_C=='Yes')                                          GLASS_ACT_C_NC = true;
  if (VET_SUCCESSIVA_D=='Yes')                                          GLASS_ACT_C_ND = true;
}
    ///////////////////////////////////////


let luce_AY = 0;
let luce_BY = 0;
let luce_Y1 = 0;
let luce_Y3 = 0;
let luce_Y5 = 0;

let luce_BX = 0;
let luce_CX = 0;
let luce_X1 = 0;
let luce_X3 = 0;
let luce_X5 = 0;

let luce_CY = 0;
let luce_DY = 0;
let luce_Y2 = 0;
let luce_Y4 = 0;
let luce_Y6 = 0;

let luce_DX = 0;
let luce_AX = 0;
let luce_X2 = 0;
let luce_X4 = 0;
let luce_X6 = 0;

let luce_YP1 = 0;
let luce_YP2 = 0;
let luce_YA1 = 0;
let luce_YA2 = 0;

let luce_XP1 = 0;
let luce_XP2 = 0;
let luce_XA1 = 0;
let luce_XA2 = 0;


let quanto      =  GAMBA_MEZZA;
let correzioneY =  0;
let correzioneX =  0;
let MARKER_SPORGENZA_VARIABILE_A1P1 = false;
let MARKER_SPORGENZA_VARIABILE_A2P2 = false;



correzioneY += (MODELLO_TENDA!=='SWAY'&&MODELLO_TENDA!=='JOY')?testCoupling(ANG_A.top, 7, 2, quanto):testCoupling(ANG_A.top, 7, 1, quanto);
correzioneY += (MODELLO_TENDA!=='SWAY'&&MODELLO_TENDA!=='JOY')?testCoupling(ANG_B.top, 7, 0, quanto):testCoupling(ANG_A.top, 7, -1, quanto);

correzioneX += testCoupling(ANG_A.top, 5, 1, quanto);
correzioneX += testCoupling(ANG_D.top, 5, 1, quanto);

luce_AY =  SumIFActive(DISTANZA_Y_SBALZO_A-GAMBA_INTERA, ACT_NUM_AY)//(DISTANZA_Y_SBALZO_A-DIM_GAMBA_AY)*ACT_NUM_AY;


luce_BY =  SumIFActive(DISTANZA_Y_SBALZO_B-GAMBA_INTERA, ACT_NUM_BY);  //(DISTANZA_Y_SBALZO_B-DIM_GAMBA_BY)*ACT_NUM_BY;

let xTemp= ConsideraSPVariabile(ACT_NUM_BY, 'A1P1', MODELLO_TENDA, 
                                       MARKER_SPORGENZA_VARIABILE_A1P1, 
                                       MARKER_SPORGENZA_VARIABILE_A2P2,
                                       DELTA_SP_VAR);
MARKER_SPORGENZA_VARIABILE_A1P1 = xTemp.m1;
MARKER_SPORGENZA_VARIABILE_A2P2 = xTemp.m2;
luce_BY += xTemp.offset;



luce_Y5 =  SumIFActive(DISTANZA_LGAB2
                         -SumIFActive(luce_BY+GAMBA_INTERA, ACT_NUM_BY)
                         , ACT_NUM_Y5);//(DISTANZA_LGAB2-(luce_BY+GAMBA_INTERA)*ACT_NUM_BY)*ACT_NUM_Y5;

xTemp = ConsideraSPVariabile(   ACT_NUM_Y5, 'A1P1', MODELLO_TENDA, 
                                       MARKER_SPORGENZA_VARIABILE_A1P1, 
                                       MARKER_SPORGENZA_VARIABILE_A2P2,
                                       DELTA_SP_VAR);
MARKER_SPORGENZA_VARIABILE_A1P1 = xTemp.m1;
MARKER_SPORGENZA_VARIABILE_A2P2 = xTemp.m2;                         
luce_Y5 += xTemp.offset;

// console.log('');
// console.log('<->');
// console.log(DIM_Y, correzioneY, GAMBA_INTERA, DISTANZA_LGAB1, luce_BY, ACT_NUM_BY, luce_Y5, ACT_NUM_Y5, ACT_NUM_Y3);
// console.log('<->');
// console.log('');

luce_Y3 =  SumIFActive( DIM_Y
                         + correzioneY
                         - 3*GAMBA_INTERA-DISTANZA_LGAB1
                         - SumIFActive(luce_BY+GAMBA_INTERA, ACT_NUM_BY)
                         - SumIFActive(luce_Y5+GAMBA_INTERA, ACT_NUM_Y5)
                         , ACT_NUM_Y3); //(DIM_Y-DIM_GAMBA_AY-DIM_GAMBA_BY-(DISTANZA_LGAB1+GAMBA_INTERA)-(luce_BY+GAMBA_INTERA)*ACT_NUM_BY-(luce_Y5+GAMBA_INTERA)*ACT_NUM_Y5)*ACT_NUM_Y3;
xTemp = ConsideraSPVariabile(   ACT_NUM_Y3, 'A1P1', MODELLO_TENDA, 
                                       MARKER_SPORGENZA_VARIABILE_A1P1, 
                                       MARKER_SPORGENZA_VARIABILE_A2P2,
                                       DELTA_SP_VAR);
MARKER_SPORGENZA_VARIABILE_A1P1 = xTemp.m1;
MARKER_SPORGENZA_VARIABILE_A2P2 = xTemp.m2;                         
luce_Y3 += xTemp.offset;



luce_Y1 =  DIM_Y
           + correzioneY
           - 2*GAMBA_INTERA
           - SumIFActive(luce_AY+GAMBA_INTERA, ACT_NUM_AY)
           - SumIFActive(luce_BY+GAMBA_INTERA, ACT_NUM_BY)
           - SumIFActive(luce_Y5+GAMBA_INTERA, ACT_NUM_Y5)
           - SumIFActive(luce_Y3+GAMBA_INTERA, ACT_NUM_Y3);
luce_Y1 += (MODELLO_TENDA=='SWAY'||MODELLO_TENDA=='ECO JOY')?0:DELTA_SP_VAR;




luce_DY =  SumIFActive(DISTANZA_Y_SBALZO_D-GAMBA_INTERA, ACT_NUM_DY)//(DISTANZA_Y_SBALZO_A-DIM_GAMBA_AY)*ACT_NUM_AY;
xTemp = ConsideraSPVariabile(   ACT_NUM_DY, 'A2P2', MODELLO_TENDA, 
                                       MARKER_SPORGENZA_VARIABILE_A1P1, 
                                       MARKER_SPORGENZA_VARIABILE_A2P2,
                                       DELTA_SP_VAR);
MARKER_SPORGENZA_VARIABILE_A1P1 = xTemp.m1;
MARKER_SPORGENZA_VARIABILE_A2P2 = xTemp.m2;                         
luce_DY += xTemp.offset;
 


 luce_CY =  SumIFActive(DISTANZA_Y_SBALZO_C-GAMBA_INTERA, ACT_NUM_CY);  //(DISTANZA_Y_SBALZO_B-DIM_GAMBA_BY)*ACT_NUM_BY;

 luce_Y6 =  SumIFActive(DISTANZA_LGCD2
                          -SumIFActive(luce_CY+GAMBA_INTERA, ACT_NUM_CY)
                          , ACT_NUM_Y6);//(DISTANZA_LGAB2-(luce_BY+GAMBA_INTERA)*ACT_NUM_BY)*ACT_NUM_Y5;

 luce_Y4 =  SumIFActive( DIM_Y
                          + correzioneY
                          - 3*GAMBA_INTERA-DISTANZA_LGCD1
                          - SumIFActive(luce_CY+GAMBA_INTERA, ACT_NUM_CY)
                          - SumIFActive(luce_Y6+GAMBA_INTERA, ACT_NUM_Y6)
                          , ACT_NUM_Y4); //(DIM_Y-DIM_GAMBA_AY-DIM_GAMBA_BY-(DISTANZA_LGAB1+GAMBA_INTERA)-(luce_BY+GAMBA_INTERA)*ACT_NUM_BY-(luce_Y5+GAMBA_INTERA)*ACT_NUM_Y5)*ACT_NUM_Y3;

 xTemp = ConsideraSPVariabile(   ACT_NUM_Y4, 'A2P2', MODELLO_TENDA, 
                                       MARKER_SPORGENZA_VARIABILE_A1P1, 
                                       MARKER_SPORGENZA_VARIABILE_A2P2,
                                       DELTA_SP_VAR);
MARKER_SPORGENZA_VARIABILE_A1P1 = xTemp.m1;
MARKER_SPORGENZA_VARIABILE_A2P2 = xTemp.m2;                         
luce_Y4 += xTemp.offset;                        


  luce_Y2 =  DIM_Y
            + correzioneY
            - 2*GAMBA_INTERA
            - SumIFActive(luce_DY+GAMBA_INTERA, ACT_NUM_DY)
            - SumIFActive(luce_CY+GAMBA_INTERA, ACT_NUM_CY)
            - SumIFActive(luce_Y6+GAMBA_INTERA, ACT_NUM_Y6)
            - SumIFActive(luce_Y4+GAMBA_INTERA, ACT_NUM_Y4);
  luce_Y2 +=  (MODELLO_TENDA=='SWAY'||MODELLO_TENDA=='ECO JOY')?0:DELTA_SP_VAR;



  luce_BX =  SumIFActive(DISTANZA_X_SBALZO_B-GAMBA_INTERA, ACT_NUM_BX)//(DISTANZA_Y_SBALZO_A-DIM_GAMBA_AY)*ACT_NUM_AY;

  luce_CX =  SumIFActive(DISTANZA_X_SBALZO_C-GAMBA_INTERA, ACT_NUM_CX);  //(DISTANZA_Y_SBALZO_B-DIM_GAMBA_BY)*ACT_NUM_BY;

  luce_X5 =  SumIFActive(DISTANZA_LGBC2
                           -SumIFActive(luce_CX+GAMBA_INTERA, ACT_NUM_CX)
                           , ACT_NUM_X5);//(DISTANZA_LGAB2-(luce_BY+GAMBA_INTERA)*ACT_NUM_BY)*ACT_NUM_Y5;

  luce_X3 =  SumIFActive( DIM_X
                           + correzioneX
                           - 3*GAMBA_INTERA-DISTANZA_LGBC1
                           - SumIFActive(luce_CX+GAMBA_INTERA, ACT_NUM_CX)
                           - SumIFActive(luce_X5+GAMBA_INTERA, ACT_NUM_X5)
                           , ACT_NUM_X3); //(DIM_Y-DIM_GAMBA_AY-DIM_GAMBA_BY-(DISTANZA_LGAB1+GAMBA_INTERA)-(luce_BY+GAMBA_INTERA)*ACT_NUM_BY-(luce_Y5+GAMBA_INTERA)*ACT_NUM_Y5)*ACT_NUM_Y3;

  luce_X1 =  DIM_X
             + correzioneX
             - 2*GAMBA_INTERA
             - SumIFActive(luce_BX+GAMBA_INTERA, ACT_NUM_BX)
             - SumIFActive(luce_CX+GAMBA_INTERA, ACT_NUM_CX)
             - SumIFActive(luce_X5+GAMBA_INTERA, ACT_NUM_X5)
             - SumIFActive(luce_X3+GAMBA_INTERA, ACT_NUM_X3);



  luce_AX =  SumIFActive(DISTANZA_X_SBALZO_A-GAMBA_INTERA, ACT_NUM_AX)//(DISTANZA_Y_SBALZO_A-DIM_GAMBA_AY)*ACT_NUM_AY;

  luce_DX =  SumIFActive(DISTANZA_X_SBALZO_D-GAMBA_INTERA, ACT_NUM_DX);  //(DISTANZA_Y_SBALZO_B-DIM_GAMBA_BY)*ACT_NUM_BY;

  luce_X6 =  SumIFActive(DISTANZA_LGAD2
                          -SumIFActive(luce_DX+GAMBA_INTERA, ACT_NUM_DX)
                          , ACT_NUM_X6);//(DISTANZA_LGAB2-(luce_BY+GAMBA_INTERA)*ACT_NUM_BY)*ACT_NUM_Y5;

  luce_X4 =  SumIFActive( DIM_X
                          + correzioneX
                          - 3*GAMBA_INTERA-DISTANZA_LGAD1
                          - SumIFActive(luce_DX+GAMBA_INTERA, ACT_NUM_DX)
                          - SumIFActive(luce_X6+GAMBA_INTERA, ACT_NUM_X6)
                          , ACT_NUM_X4); //(DIM_Y-DIM_GAMBA_AY-DIM_GAMBA_BY-(DISTANZA_LGAB1+GAMBA_INTERA)-(luce_BY+GAMBA_INTERA)*ACT_NUM_BY-(luce_Y5+GAMBA_INTERA)*ACT_NUM_Y5)*ACT_NUM_Y3;

  luce_X2 =  DIM_X
            + correzioneX
            - 2*GAMBA_INTERA
            - SumIFActive(luce_AX+GAMBA_INTERA, ACT_NUM_AX)
            - SumIFActive(luce_DX+GAMBA_INTERA, ACT_NUM_DX)
            - SumIFActive(luce_X6+GAMBA_INTERA, ACT_NUM_X6)
            - SumIFActive(luce_X4+GAMBA_INTERA, ACT_NUM_X4);


 // luci per vetrate su pedana
 let sbalzo_pedana = {a:0, b:0, c:0, d:0};

 if(typeof OFFSET_A !== 'undefined')
 {
   sbalzo_pedana = {a:OFFSET_A, b:OFFSET_B, c:OFFSET_C, d:OFFSET_D};
 }

 luce_YP1 = parseFloat(luce_Y1+GAMBA_INTERA+sbalzo_pedana.a);
 luce_YP2 = parseFloat(luce_Y2+GAMBA_INTERA+sbalzo_pedana.a);

 luce_XP1 = parseFloat(luce_X1+GAMBA_INTERA+sbalzo_pedana.d);
 luce_XA1 = parseFloat(luce_X2+GAMBA_INTERA+sbalzo_pedana.d);

 let sommatore = 0;


 if(ACT_NUM_X6==1) sommatore = luce_X6;
 else
 {
   if(ACT_NUM_X4==1) sommatore = luce_X4;
   else sommatore = luce_X2;
 }
 luce_XP2 = parseFloat(sommatore+GAMBA_INTERA+sbalzo_pedana.b);

 sommatore = 0;
 if(ACT_NUM_X5==1) sommatore = luce_X5;
 else
 {
   if(ACT_NUM_X3==1) sommatore = luce_X3;
   else sommatore = luce_X1;
 }
 luce_XA2 = parseFloat(sommatore+GAMBA_INTERA+sbalzo_pedana.b);


 sommatore = 0;
 if(ACT_NUM_Y6==1) sommatore = luce_Y6;
 else
 {
   if(ACT_NUM_Y4==1) sommatore = luce_Y4;
   else sommatore = luce_Y2;
 }
 luce_YA2 = parseFloat(sommatore+GAMBA_INTERA+sbalzo_pedana.c);

 sommatore = 0;
 if(ACT_NUM_Y5==1) sommatore = luce_Y5;
 else
 {
   if(ACT_NUM_Y3==1) sommatore = luce_Y3;
   else sommatore = luce_Y1;
 }
 luce_YA1 = parseFloat(sommatore+GAMBA_INTERA+sbalzo_pedana.c);





//console.log('done 1');
//CREAZIONE OGGETTI CHIUSURE CASSONETTO

let t_ab = {};
t_ab.CH_S1 = {name: 'AY', active: ACT_C_AY, following: false   , luce:luce_AY, mot:T_ACT_C_AY}; //CHIUSURA SBALZO AY
t_ab.CH_S2 = {name: 'BY', active: ACT_C_BY, following: false   , luce:luce_BY, mot:T_ACT_C_BY}; //CHIUSURA SBALZO BY
t_ab.CH_A1 = {name: 'Y1', active: ACT_C_Y1, following: ACT_C_NB, luce:luce_Y1, mot:T_ACT_C_Y1}; //CHIUSURA Y1
t_ab.CH_A2 = {name: 'Y3', active: ACT_C_Y3, following: ACT_C_NB, luce:luce_Y3, mot:T_ACT_C_Y3}; //CHIUSURA Y3
t_ab.CH_A3 = {name: 'Y5', active: ACT_C_Y5, following: ACT_C_NB, luce:luce_Y5, mot:T_ACT_C_Y5}; //CHIUSURA Y5

let t_bc = {};
t_bc.CH_S1 = {name: 'BX', active: ACT_C_BX, following: false   , luce:luce_BX, mot:T_ACT_C_BX}; //CHIUSURA SBALZO BX
t_bc.CH_S2 = {name: 'CX', active: ACT_C_CX, following: false   , luce:luce_CX, mot:T_ACT_C_CX}; //CHIUSURA SBALZO CX
t_bc.CH_A1 = {name: 'X1', active: ACT_C_X1, following: ACT_C_NC, luce:luce_X1, mot:T_ACT_C_X1}; //CHIUSURA X1
t_bc.CH_A2 = {name: 'X3', active: ACT_C_X3, following: ACT_C_NC, luce:luce_X3, mot:T_ACT_C_X3}; //CHIUSURA X3
t_bc.CH_A3 = {name: 'X5', active: ACT_C_X5, following: ACT_C_NC, luce:luce_X5, mot:T_ACT_C_X5}; //CHIUSURA X5

let t_cd = {};
t_cd.CH_S1 = {name: 'DY', active: ACT_C_DY, following: false   , luce:luce_DY, mot:T_ACT_C_DY}; //CHIUSURA SBALZO DY
t_cd.CH_S2 = {name: 'CY', active: ACT_C_CY, following: false   , luce:luce_CY, mot:T_ACT_C_CY}; //CHIUSURA SBALZO CY
t_cd.CH_A1 = {name: 'Y2', active: ACT_C_Y2, following: ACT_C_NC, luce:luce_Y2, mot:T_ACT_C_Y2}; //CHIUSURA Y2
t_cd.CH_A2 = {name: 'Y4', active: ACT_C_Y4, following: ACT_C_NC, luce:luce_Y4, mot:T_ACT_C_Y4}; //CHIUSURA Y4
t_cd.CH_A3 = {name: 'Y6', active: ACT_C_Y6, following: ACT_C_NC, luce:luce_Y6, mot:T_ACT_C_Y6}; //CHIUSURA Y6

let t_ad = {};
t_ad.CH_S1 = {name: 'AX', active: ACT_C_AX, following: false   , luce:luce_AX, mot:T_ACT_C_AX}; //CHIUSURA SBALZO AX
t_ad.CH_S2 = {name: 'DX', active: ACT_C_DX, following: false   , luce:luce_DX, mot:T_ACT_C_DX}; //CHIUSURA SBALZO DX
t_ad.CH_A1 = {name: 'X2', active: ACT_C_X2, following: ACT_C_ND, luce:luce_X2, mot:T_ACT_C_X2}; //CHIUSURA X2
t_ad.CH_A2 = {name: 'X4', active: ACT_C_X4, following: ACT_C_ND, luce:luce_X4, mot:T_ACT_C_X4}; //CHIUSURA X4
t_ad.CH_A3 = {name: 'X6', active: ACT_C_X6, following: ACT_C_ND, luce:luce_X6, mot:T_ACT_C_X6}; //CHIUSURA X6

let tenda_caduta = {};
tenda_caduta.t_ab = t_ab;
tenda_caduta.t_bc = t_bc;
tenda_caduta.t_cd = t_cd;
tenda_caduta.t_ad = t_ad

let glass_ab = {};
glass_ab.CH_S1 = {name: 'AY', active: GLASS_ACT_C_AY, following: false   , luce:luce_AY, threads:GLASS_ACT_C_AY}; //CHIUSURA SBALZO AY
glass_ab.CH_S2 = {name: 'BY', active: GLASS_ACT_C_BY, following: false   , luce:luce_BY, threads:GLASS_ACT_C_BY}; //CHIUSURA SBALZO BY
glass_ab.CH_A1 = {name: 'Y1', active: GLASS_ACT_C_Y1, following: GLASS_ACT_C_NB, luce:luce_Y1, threads:VETRATA_Y1}; //CHIUSURA Y1
glass_ab.CH_A2 = {name: 'Y3', active: GLASS_ACT_C_Y3, following: GLASS_ACT_C_NB, luce:luce_Y3, threads:VETRATA_Y3}; //CHIUSURA Y3
glass_ab.CH_A3 = {name: 'Y5', active: GLASS_ACT_C_Y5, following: GLASS_ACT_C_NB, luce:luce_Y5, threads:VETRATA_Y5}; //CHIUSURA Y5
glass_ab.CH_YP1 = {name: 'YP1', active: GLASS_ACT_C_YP1, following: GLASS_ACT_C_NB, luce:luce_YP1, threads:VETRATA_YP1};
glass_ab.CH_YA1 = {name: 'YA1', active: GLASS_ACT_C_YA1, following: GLASS_ACT_C_NB, luce:luce_YA1, threads:VETRATA_YA1};


let glass_bc = {};
glass_bc.CH_S1 = {name: 'BX', active: GLASS_ACT_C_BX, following: false   , luce:luce_BX, threads:GLASS_ACT_C_BX}; //CHIUSURA SBALZO BX
glass_bc.CH_S2 = {name: 'CX', active: GLASS_ACT_C_CX, following: false   , luce:luce_CX, threads:GLASS_ACT_C_CX}; //CHIUSURA SBALZO CX
glass_bc.CH_A1 = {name: 'X1', active: GLASS_ACT_C_X1, following: GLASS_ACT_C_NC, luce:luce_X1, threads:VETRATA_X1}; //CHIUSURA X1
glass_bc.CH_A2 = {name: 'X3', active: GLASS_ACT_C_X3, following: GLASS_ACT_C_NC, luce:luce_X3, threads:VETRATA_X3}; //CHIUSURA X3
glass_bc.CH_A3 = {name: 'X5', active: GLASS_ACT_C_X5, following: GLASS_ACT_C_NC, luce:luce_X5, threads:VETRATA_X5}; //CHIUSURA X5
glass_bc.CH_XA1 = {name: 'XA1', active: GLASS_ACT_C_XA1, following: GLASS_ACT_C_NB, luce:luce_XA1, threads:VETRATA_XA1};
glass_bc.CH_XA2 = {name: 'XA2', active: GLASS_ACT_C_XA2, following: GLASS_ACT_C_NB, luce:luce_XA2, threads:VETRATA_XA2};


let glass_cd = {};
glass_cd.CH_S1 = {name: 'DY', active: GLASS_ACT_C_DY, following: false   , luce:luce_DY, threads:GLASS_ACT_C_DY}; //CHIUSURA SBALZO DY
glass_cd.CH_S2 = {name: 'CY', active: GLASS_ACT_C_CY, following: false   , luce:luce_CY, threads:GLASS_ACT_C_CY}; //CHIUSURA SBALZO CY
glass_cd.CH_A1 = {name: 'Y2', active: GLASS_ACT_C_Y2, following: GLASS_ACT_C_NC, luce:luce_Y2, threads:VETRATA_Y2}; //CHIUSURA Y2
glass_cd.CH_A2 = {name: 'Y4', active: GLASS_ACT_C_Y4, following: GLASS_ACT_C_NC, luce:luce_Y4, threads:VETRATA_Y4}; //CHIUSURA Y4
glass_cd.CH_A3 = {name: 'Y6', active: GLASS_ACT_C_Y6, following: GLASS_ACT_C_NC, luce:luce_Y6, threads:VETRATA_Y6}; //CHIUSURA Y6
glass_cd.CH_YP2 = {name: 'YP2', active: GLASS_ACT_C_YP2, following: GLASS_ACT_C_NB, luce:luce_YP2, threads:VETRATA_YP2};
glass_cd.CH_YA2 = {name: 'YA2', active: GLASS_ACT_C_YA2, following: GLASS_ACT_C_NB, luce:luce_YA2, threads:VETRATA_YA2};

let glass_ad = {};
glass_ad.CH_S1 = {name: 'AX', active: GLASS_ACT_C_AX, following: false   , luce:luce_AX, threads:GLASS_ACT_C_AX}; //CHIUSURA SBALZO AX
glass_ad.CH_S2 = {name: 'DX', active: GLASS_ACT_C_DX, following: false   , luce:luce_DX, threads:GLASS_ACT_C_DX}; //CHIUSURA SBALZO DX
glass_ad.CH_A1 = {name: 'X2', active: GLASS_ACT_C_X2, following: GLASS_ACT_C_ND, luce:luce_X2, threads:VETRATA_X2}; //CHIUSURA X2
glass_ad.CH_A2 = {name: 'X4', active: GLASS_ACT_C_X4, following: GLASS_ACT_C_ND, luce:luce_X4, threads:VETRATA_X4}; //CHIUSURA X4
glass_ad.CH_A3 = {name: 'X6', active: GLASS_ACT_C_X6, following: GLASS_ACT_C_ND, luce:luce_X6, threads:VETRATA_X6}; //CHIUSURA X6
glass_ad.CH_XP1 = {name: 'XP1', active: GLASS_ACT_C_XP1, following: GLASS_ACT_C_NB, luce:luce_XP1, threads:VETRATA_XP1};
glass_ad.CH_XP2 = {name: 'XP2', active: GLASS_ACT_C_XP2, following: GLASS_ACT_C_NB, luce:luce_XP2, threads:VETRATA_XP2};

let vetrate = {};
vetrate.glass_ab = glass_ab;
vetrate.glass_bc = glass_bc;
vetrate.glass_cd = glass_cd;
vetrate.glass_ad = glass_ad;

//////
// Elettronica strip perimetrali

let control_type = {};
control_type.motorizzazione = MOTORIZZAZIONE;
control_type.rgb            = TIPO_RGB;
control_type.codifica_radio = { tipo:   parseFloat(MOTORIZZAZIONE.split('-')[0]),
                                tecnologia: parseFloat(MOTORIZZAZIONE.split('-')[0]),
                                stringa:MOTORIZZAZIONE};

let electronics           = {};
electronics.side          = {};
electronics.side.ab       = parseInt(STRIP_LED_AB.split('-')[0]);
electronics.side.bc       = parseInt(STRIP_LED_BC.split('-')[0]);
electronics.side.cd       = parseInt(STRIP_LED_CD.split('-')[0]);
electronics.side.ad       = parseInt(STRIP_LED_AD.split('-')[0]);
electronics.powsource     = {};
electronics.powsource.a   = parseInt(POWER_A.split('-')[0]);
electronics.powsource.b   = parseInt(POWER_B.split('-')[0]);
electronics.powsource.c   = parseInt(POWER_C.split('-')[0]);
electronics.powsource.d   = parseInt(POWER_D.split('-')[0]);
electronics.type          = parseInt(MOTORIZZAZIONE.split('-')[0]);







  let obj = {}
  obj.angoli = [(ANG_A),
                (ANG_B),
                (ANG_C),
                (ANG_D),
               ];
  obj.gamba_agg       = JSON.parse(JSON.stringify(gamba_agg));
  
  obj.dimensioni      = JSON.parse(JSON.stringify(dimensioni));

  obj.modello         = MODELLO_TENDA;
  obj.tenda_caduta    = JSON.parse(JSON.stringify(tenda_caduta));
  obj.vetrate         = JSON.parse(JSON.stringify(vetrate));

  obj.electronics     = JSON.parse(JSON.stringify(electronics)); 
  obj.control_type    = JSON.parse(JSON.stringify(control_type)); 
  ///////////////////////////
  // parte legata alla pedana
  ///////////////////////////
  if(MODELLO_TENDA=='MOVIE') MODELLO_TENDA = 'ECO JOY';

  if(1*OFFSET_A>0) OFFSET_A = (1*OFFSET_A>30)?OFFSET_A:30;
  if(1*OFFSET_B>0) OFFSET_B = (1*OFFSET_B>30)?OFFSET_B:30;
  if(1*OFFSET_C>0) OFFSET_C = (1*OFFSET_C>30)?OFFSET_C:30;
  if(1*OFFSET_D>0) OFFSET_D = (1*OFFSET_D>30)?OFFSET_D:30;

  if(CleanInput(TIPO_PAVIMENTAZIONE)==1)
  {
      FLOOR_EL_DIMENSION_W = (1*FLOOR_EL_DIMENSION_W>60)?FLOOR_EL_DIMENSION_W:60;
      FLOOR_EL_DIMENSION_H = (1*FLOOR_EL_DIMENSION_H>60)?FLOOR_EL_DIMENSION_H:60;
      FLOOR_EL_DIMENSION_T = (1*FLOOR_EL_DIMENSION_T>2.2)?FLOOR_EL_DIMENSION_T:2.2;
  }
  else
  {
      FLOOR_EL_DIMENSION_W = (1*FLOOR_EL_DIMENSION_W>15)?FLOOR_EL_DIMENSION_W:15;
      FLOOR_EL_DIMENSION_H = (1*FLOOR_EL_DIMENSION_H>200)?FLOOR_EL_DIMENSION_H:200;
      FLOOR_EL_DIMENSION_T = (1*FLOOR_EL_DIMENSION_T>2.2)?FLOOR_EL_DIMENSION_T:2.2;
  }

  obj.optionals            = {};
  obj.optionals.pedana     = {};
  obj.optionals.pedana.a   = OFFSET_A;
  obj.optionals.pedana.b   = OFFSET_B;
  obj.optionals.pedana.c   = OFFSET_C;
  obj.optionals.pedana.d   = OFFSET_D;

  obj.optionals.pedana.add     = {};
  obj.optionals.pedana.add.AB   = PEDANA_ADD_IN_AB;
  obj.optionals.pedana.add.BC   = PEDANA_ADD_IN_BC;
  obj.optionals.pedana.add.CD   = PEDANA_ADD_IN_CD;
  obj.optionals.pedana.add.AD   = PEDANA_ADD_IN_AD;

  if(FLOOR_EL_WEIGHT===0)      FLOOR_EL_WEIGHT  = 5;

  if(CleanInput(TIPO_BALLAST)==3 || CleanInput(TIPO_BALLAST)==1)
  {
      if(DIM_Y>DIM_X) FLOOR_EL_ORIENTATION = 'Hor';
      if(DIM_X>DIM_Y) FLOOR_EL_ORIENTATION = 'Ver';
  }

  if(FLOOR_EL_ORIENTATION=='Ver')
  {
  obj.optionals.pedana.floor    =                {type:TIPO_PAVIMENTAZIONE,
                                                  W:FLOOR_EL_DIMENSION_W,
                                                  H:FLOOR_EL_DIMENSION_H,
                                                  T:FLOOR_EL_DIMENSION_T,
                                                  WEIGHT: FLOOR_EL_WEIGHT,
                                                  PHASE: FLOOR_EL_PHASE_DISP,
                                                  ORIENTATION: FLOOR_EL_ORIENTATION};
  }
  else
  {
  obj.optionals.pedana.floor    =                {type:TIPO_PAVIMENTAZIONE,
                                                  W:FLOOR_EL_DIMENSION_H,
                                                  H:FLOOR_EL_DIMENSION_W,
                                                  T:FLOOR_EL_DIMENSION_T,
                                                  WEIGHT: FLOOR_EL_WEIGHT,
                                                  PHASE: FLOOR_EL_PHASE_DISP,
                                                  ORIENTATION: FLOOR_EL_ORIENTATION}; 
  }

  obj.optionals.pedana.floor.premium =            parseInt(MARTINETTI_PREMIUM.split('-')[0]);


  if(BALLAST_EL_DIMENSION_W===0)   BALLAST_EL_DIMENSION_W  = 50;
  if(BALLAST_EL_DIMENSION_H===0)   BALLAST_EL_DIMENSION_H  = 50;
  if(BALLAST_EL_DIMENSION_T===0)   BALLAST_EL_DIMENSION_T  = 4;
  if(BALLAST_EL_WEIGHT===0)        BALLAST_EL_WEIGHT       = 25;



  obj.optionals.pedana.ballast    =              {required:REQUIRED_BALLAST,
                                                  W:BALLAST_EL_DIMENSION_W,
                                                  T:BALLAST_EL_DIMENSION_T,
                                                  H:BALLAST_EL_DIMENSION_H,
                                                  WEIGHT: BALLAST_EL_WEIGHT,
                                                  TAILORED: TAILORED_BALLAST,
                                                  TIPO_BALLAST:TIPO_BALLAST
                                                  };


  obj.optionals.pedana.dislivelli = {zP1:DISLIVELLO_A, zA1:DISLIVELLO_B, zA2:DISLIVELLO_C, zP2:DISLIVELLO_D};                                                
  obj.ordine  = ORDINE;
  obj.lingua  = LINGUA;                                                
  obj.costing = TABELLA_COSTI=='No'?0:1;
  
  
  return JSON.parse(JSON.stringify(obj));
}


///// 
var myDECK = {};
function start(type = "graph")
{
  //console.clear();
  let myOBJ = {};
  myOBJ = setNEWobject(ORDINE, LINGUA,
                      MODELLO_TENDA,
                      DIM_X, DIM_Y,
                      TYPE_ANG_A, TYPE_ANG_B, TYPE_ANG_C, TYPE_ANG_D,
                      TOP_ANG_A, TOP_ANG_B, TOP_ANG_C, TOP_ANG_D,
                      OPTIONAL_ANG_A, OPTIONAL_ANG_B, OPTIONAL_ANG_C, OPTIONAL_ANG_D,
                      LATO_SBALZO_A, LATO_SBALZO_B, LATO_SBALZO_C, LATO_SBALZO_D,
                      NUM_GAMBE_AGG_AB, NUM_GAMBE_AGG_BC, NUM_GAMBE_AGG_CD, NUM_GAMBE_AGG_AD,
                      DISTANZA_Y_SBALZO_A, DISTANZA_Y_SBALZO_B, DISTANZA_Y_SBALZO_C, DISTANZA_Y_SBALZO_D,
                      DISTANZA_X_SBALZO_A, DISTANZA_X_SBALZO_B, DISTANZA_X_SBALZO_C, DISTANZA_X_SBALZO_D,
                      DISTANZA_LGAD1, DISTANZA_LGAB1, DISTANZA_LGBC1, DISTANZA_LGCD1, DISTANZA_LGAD2, DISTANZA_LGAB2, DISTANZA_LGBC2, DISTANZA_LGCD2,
                      DELTA_SP_VAR,
                      CHIUSURA_X1, CHIUSURA_X2, CHIUSURA_Y1, CHIUSURA_Y2, CHIUSURA_X3,  CHIUSURA_X4,  CHIUSURA_Y3,  CHIUSURA_Y4, CHIUSURA_X5,  CHIUSURA_X6,  CHIUSURA_Y5,  CHIUSURA_Y6,  
                      CHIUS_SUCCESSIVA_B, CHIUS_SUCCESSIVA_C, CHIUS_SUCCESSIVA_D,
                      OFFSET_A, OFFSET_B, OFFSET_C, OFFSET_D,
                      TIPO_PAVIMENTAZIONE,
                      FLOOR_EL_DIMENSION_W, FLOOR_EL_DIMENSION_H, FLOOR_EL_DIMENSION_T, FLOOR_EL_WEIGHT, FLOOR_EL_ORIENTATION, FLOOR_EL_PHASE_DISP,
                      PEDANA_ADD_IN_AB, PEDANA_ADD_IN_BC, PEDANA_ADD_IN_CD, PEDANA_ADD_IN_AD,
                      TIPO_BALLAST, BALLAST_EL_DIMENSION_W, BALLAST_EL_DIMENSION_H, BALLAST_EL_DIMENSION_T, BALLAST_EL_WEIGHT, REQUIRED_BALLAST, TAILORED_BALLAST,
                      STRIP_LED_AB, STRIP_LED_BC, STRIP_LED_CD, STRIP_LED_AD, POWER_A, POWER_B, POWER_C, POWER_D, MOTORIZZAZIONE,
                      DISLIVELLO_A, DISLIVELLO_B, DISLIVELLO_C, DISLIVELLO_D,
                      MARTINETTI_PREMIUM, 
                      TABELLA_COSTI,
                      TIPO_RGB
                                                         
 );

 myDECK = {};
 myDECK = new PEDANA(myOBJ);
 
 
 if(type== "graph")
 {
  const myElement = document.getElementById('TableBOMTOTAL_PEDANA');
  myElement.innerHTML = '';
  myDECK.preparaListaSVG();   
  
  let sDis = '';
  for(let i=0;i<myDECK.grafica.lista_SVG.length;i++)
  {
      sDis += myDECK.grafica.lista_SVG[i].svg;
  }
  myElement.innerHTML = sDis;
 }
}



function EsportaListaCosti()
{
let lista = [];
for(let i=0;i<FISHER_COD.length;i++)
{
  let obj = {};
  obj.smeup       = FISHER_COD[i].code;
  obj.descrizione = FISHER_COD[i].descrizione.id;
  obj.peso        = FISHER_COD[i].peso;
  obj.costo       = FISHER_COD[i].costo;

  lista.push(obj);  
}
return lista;
}